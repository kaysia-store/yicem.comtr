// Restaurant Menu Website - JavaScript
class RestaurantApp {
    constructor() {
        this.currentLanguage = 'tr';
        this.currentCategory = 'all';
        this.products = [];
        this.currentProduct = null;
        this.currentSelections = { extras: {}, removedIngredients: new Set() };
        this.cart = [];
        this.currentTheme = 'light';
        this.cartItems = [];
        
        this.init();
        this.registerServiceWorker();
    }

    init() {
        this.loadLanguage();
        this.loadTheme();
        this.setupEventListeners();
        this.setupInstallPrompt();
        this.loadProducts();
        this.showLanguageModal();
    }

    // Language System
    loadLanguage() {
        const savedLang = localStorage.getItem('restaurant_language');
        if (savedLang && this.isValidLanguage(savedLang)) {
            this.currentLanguage = savedLang;
        }
        this.updateLanguage();
    }

    isValidLanguage(lang) {
        const validLanguages = ['tr', 'en', 'ru', 'de', 'fr', 'ar'];
        return validLanguages.includes(lang);
    }

    updateLanguage() {
        document.documentElement.lang = this.currentLanguage;
        document.documentElement.setAttribute('data-lang', this.currentLanguage);
        
        // Update flag
        const flagMap = {
            'tr': 'üáπüá∑',
            'en': 'üá∫üá∏',
            'ru': 'üá∑üá∫',
            'de': 'üá©üá™',
            'fr': 'üá´üá∑',
            'ar': 'üá∏üá¶'
        };
        
        const currentFlag = document.getElementById('currentFlag');
        if (currentFlag) {
            currentFlag.textContent = flagMap[this.currentLanguage];
        }

        // Update RTL
        if (this.currentLanguage === 'ar') {
            document.documentElement.dir = 'rtl';
        } else {
            document.documentElement.dir = 'ltr';
        }

        // Update all translatable elements
        this.updateTranslations();
    }

    updateTranslations() {
        const translations = this.getTranslations();
        const elements = document.querySelectorAll('[data-translate]');
        
        elements.forEach(element => {
            const key = element.getAttribute('data-translate');
            if (translations[this.currentLanguage] && translations[this.currentLanguage][key]) {
                element.textContent = translations[this.currentLanguage][key];
            }
        });
    }

    getTranslations() {
        return {
            tr: {
                select_language: 'Dil Se√ßiniz',
                hero_title: 'Ne Yi\'cem diye d√º≈ü√ºnme!',
                hero_subtitle: 'Hemen indir',
                download: 'ƒ∞ndir',
                view_menu: 'Men√ºy√º ƒ∞ncele',
                all_categories: 'T√ºm√º',
                cat_pizzalar: 'Pizzalar',
                cat_ayvalik_tostu: 'Ayvalƒ±k Tostu',
                cat_soguk_sandvic: 'Soƒüuk Sandvi√ß',
                cat_tavuk_doner: 'Tavuk D√∂ner',
                cat_et_doner: 'Et D√∂ner',
                cat_makarnalar: 'Makarnalar',
                cat_manti: 'Mantƒ±',
                cat_hamburger: 'Hamburger',
                cat_kofte_spesiyel: 'K√∂fte Spesiyel',
                cat_aperatifler: 'Aperatifler',
                cat_bistro: 'Bistro',
                cat_salata: 'Salata',
                cat_icecekler: 'ƒ∞√ßecekler',
                contact: 'ƒ∞leti≈üim',
                address: 'Fener Mah. 1968 Sk. No: 21/A Muratpa≈üa/ANTALYA',
                phone: '+90 242 323 1177',
                email: 'info@yicem.com',
                hours: '√áalƒ±≈üma Saatleri',
                weekdays: 'Pazartesi - Cumartesi: 09:00 - 20:30',
                weekend: 'Pazar g√ºn√º kapalƒ±',
                follow_us: 'Bizi Takip Edin',
                all_rights: 'T√ºm haklarƒ± saklƒ±dƒ±r.',
                call_now: 'Ara',
                product_details: 'Sipari≈ü Ver',
                order_now: 'Sipari≈ü Ver',
                add_to_cart: 'Sepete Ekle',
                loading: 'Y√ºkleniyor...',
                product_details: '√úr√ºn Detaylarƒ±',
                extras: 'Ekstralar',
                ingredients: 'ƒ∞√ßerikler',
                remove_ingredients: 'ƒ∞√ßerik √ßƒ±kar',
                total: 'Toplam',
                select_option: 'Bir se√ßenek se√ßiniz'
            },
            en: {
                select_language: 'Select Language',
                hero_title: 'Don\'t think about what to eat!',
                hero_subtitle: 'Download now',
                download: 'Download',
                view_menu: 'View Menu',
                all_categories: 'All',
                cat_pizzalar: 'Pizzas',
                cat_ayvalik_tostu: 'Ayvalƒ±k Toast',
                cat_soguk_sandvic: 'Cold Sandwich',
                cat_tavuk_doner: 'Chicken D√∂ner',
                cat_et_doner: 'Beef D√∂ner',
                cat_makarnalar: 'Pastas',
                cat_manti: 'Manti',
                cat_hamburger: 'Hamburger',
                cat_kofte_spesiyel: 'Meatball Special',
                cat_aperatifler: 'Appetizers',
                cat_bistro: 'Bistro',
                cat_salata: 'Salad',
                cat_icecekler: 'Drinks',
                contact: 'Contact',
                address: 'Fener Mah. 1968 Sk. No: 21/A Muratpa≈üa/ANTALYA',
                phone: '+90 242 323 1177',
                email: 'info@yicem.com',
                hours: 'Working Hours',
                weekdays: 'Monday - Saturday: 09:00 - 20:30',
                weekend: 'Closed on Sunday',
                follow_us: 'Follow Us',
                all_rights: 'All rights reserved.',
                call_now: 'Call',
                product_details: 'Order Now',
                order_now: 'Order Now',
                add_to_cart: 'Add to Cart',
                loading: 'Loading...',
                product_details: 'Product Details',
                extras: 'Extras',
                ingredients: 'Ingredients',
                remove_ingredients: 'Remove ingredients',
                total: 'Total',
                select_option: 'Please select an option'
            },
            ru: {
                select_language: '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫',
                hero_title: '–ù–µ –¥—É–º–∞–π, —á—Ç–æ –ø–æ–µ—Å—Ç—å!',
                hero_subtitle: '–°–∫–∞—á–∞–π —Å–µ–π—á–∞—Å',
                download: '–°–∫–∞—á–∞—Ç—å',
                view_menu: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é',
                all_categories: '–í—Å–µ',
                cat_pizzalar: '–ü–∏—Ü—Ü—ã',
                cat_ayvalik_tostu: '–¢–æ—Å—Ç –ê–π–≤–∞–ª—ã–∫',
                cat_soguk_sandvic: '–•–æ–ª–æ–¥–Ω—ã–π —Å—ç–Ω–¥–≤–∏—á',
                cat_tavuk_doner: '–ö—É—Ä–∏–Ω—ã–π –¥–æ–Ω–µ—Ä',
                cat_et_doner: '–ì–æ–≤—è–∂–∏–π –¥–æ–Ω–µ—Ä',
                cat_makarnalar: '–ü–∞—Å—Ç–∞',
                cat_manti: '–ú–∞–Ω—Ç—ã',
                cat_hamburger: '–ì–∞–º–±—É—Ä–≥–µ—Ä',
                cat_kofte_spesiyel: '–ö—ë—Ñ—Ç–µ –°–ø–µ—Ü–∏–∞–ª—å',
                cat_aperatifler: '–ó–∞–∫—É—Å–∫–∏',
                cat_bistro: '–ë–∏—Å—Ç—Ä–æ',
                cat_salata: '–°–∞–ª–∞—Ç',
                cat_icecekler: '–ù–∞–ø–∏—Ç–∫–∏',
                contact: '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
                address: 'Fener Mah. 1968 Sk. No: 21/A Muratpa≈üa/ANTALYA',
                phone: '+90 242 323 1177',
                email: 'info@yicem.com',
                hours: '–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã',
                weekdays: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –°—É–±–±–æ—Ç–∞: 09:00 - 20:30',
                weekend: '–ó–∞–∫—Ä—ã—Ç–æ –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
                follow_us: '–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å',
                all_rights: '–í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.',
                call_now: '–ü–æ–∑–≤–æ–Ω–∏—Ç—å',
                product_details: '–ó–∞–∫–∞–∑–∞—Ç—å',
                order_now: '–ó–∞–∫–∞–∑–∞—Ç—å',
                add_to_cart: '–í –∫–æ—Ä–∑–∏–Ω—É',
                loading: '–ó–∞–≥—Ä—É–∑–∫–∞...',
                product_details: '–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞',
                extras: '–î–æ–ø–æ–ª–Ω–µ–Ω–∏—è',
                ingredients: '–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã',
                remove_ingredients: '–£–±—Ä–∞—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã',
                total: '–ò—Ç–æ–≥–æ',
                select_option: '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç'
            },
            de: {
                select_language: 'Sprache w√§hlen',
                hero_title: 'Denk nicht dar√ºber nach, was du essen sollst!',
                hero_subtitle: 'Jetzt herunterladen',
                download: 'Herunterladen',
                view_menu: 'Men√º anzeigen',
                all_categories: 'Alle',
                cat_pizzalar: 'Pizzen',
                cat_ayvalik_tostu: 'Ayvalƒ±k-Toast',
                cat_soguk_sandvic: 'Kaltes Sandwich',
                cat_tavuk_doner: 'H√§hnchen-D√∂ner',
                cat_et_doner: 'Rind-D√∂ner',
                cat_makarnalar: 'Pasta',
                cat_manti: 'Manti',
                cat_hamburger: 'Hamburger',
                cat_kofte_spesiyel: 'K√∂fte Spezial',
                cat_aperatifler: 'Vorspeisen',
                cat_bistro: 'Bistro',
                cat_salata: 'Salat',
                cat_icecekler: 'Getr√§nke',
                contact: 'Kontakt',
                address: 'Fener Mah. 1968 Sk. No: 21/A Muratpa≈üa/ANTALYA',
                phone: '+90 242 323 1177',
                email: 'info@yicem.com',
                hours: '√ñffnungszeiten',
                weekdays: 'Montag - Samstag: 09:00 - 20:30',
                weekend: 'Sonntags geschlossen',
                follow_us: 'Folgen Sie uns',
                all_rights: 'Alle Rechte vorbehalten.',
                call_now: 'Anrufen',
                product_details: 'Jetzt bestellen',
                order_now: 'Jetzt bestellen',
                add_to_cart: 'In den Warenkorb',
                loading: 'Wird geladen...',
                product_details: 'Produktdetails',
                extras: 'Extras',
                ingredients: 'Zutaten',
                remove_ingredients: 'Zutaten entfernen',
                total: 'Gesamt',
                select_option: 'Bitte w√§hlen Sie eine Option'
            },
            fr: {
                select_language: 'Choisir la langue',
                hero_title: 'Ne pense pas √† ce que tu vas manger !',
                hero_subtitle: 'T√©l√©charge maintenant',
                download: 'T√©l√©charger',
                view_menu: 'Voir le menu',
                all_categories: 'Tout',
                cat_pizzalar: 'Pizzas',
                cat_ayvalik_tostu: 'Toast Ayvalƒ±k',
                cat_soguk_sandvic: 'Sandwich froid',
                cat_tavuk_doner: 'D√∂ner au poulet',
                cat_et_doner: 'D√∂ner au boeuf',
                cat_makarnalar: 'P√¢tes',
                cat_manti: 'Manti',
                cat_hamburger: 'Hamburger',
                cat_kofte_spesiyel: 'K√∂fte Sp√©cial',
                cat_aperatifler: 'Ap√©ritifs',
                cat_bistro: 'Bistrot',
                cat_salata: 'Salade',
                cat_icecekler: 'Boissons',
                contact: 'Contact',
                address: 'Fener Mah. 1968 Sk. No: 21/A Muratpa≈üa/ANTALYA',
                phone: '+90 242 323 1177',
                email: 'info@yicem.com',
                hours: 'Heures d\'ouverture',
                weekdays: 'Lundi - Samedi: 09:00 - 20:30',
                weekend: 'Ferm√© le dimanche',
                follow_us: 'Suivez-nous',
                all_rights: 'Tous droits r√©serv√©s.',
                call_now: 'Appeler',
                product_details: 'Commander',
                order_now: 'Commander',
                add_to_cart: 'Ajouter au panier',
                loading: 'Chargement...',
                product_details: 'D√©tails du produit',
                extras: 'Suppl√©ments',
                ingredients: 'Ingr√©dients',
                remove_ingredients: 'Retirer des ingr√©dients',
                total: 'Total',
                select_option: 'Veuillez s√©lectionner une option'
            },
            ar: {
                select_language: 'ÿßÿÆÿ™ÿ± ÿßŸÑŸÑÿ∫ÿ©',
                hero_title: 'ŸÑÿß ÿ™ŸÅŸÉÿ± ŸÅŸä ŸÖÿßÿ∞ÿß ÿ™ÿ£ŸÉŸÑ!',
                hero_subtitle: 'ÿ≠ŸÖŸÑ ÿßŸÑÿ¢ŸÜ',
                download: 'ÿ™ÿ≠ŸÖŸäŸÑ',
                view_menu: 'ÿπÿ±ÿ∂ ÿßŸÑŸÇÿßÿ¶ŸÖÿ©',
                all_categories: 'ÿßŸÑŸÉŸÑ',
                cat_pizzalar: 'ÿ®Ÿäÿ™ÿ≤ÿß',
                cat_ayvalik_tostu: 'ÿ™Ÿàÿ≥ÿ™ ÿ£ŸäŸÅÿßŸÑŸäŸÉ',
                cat_soguk_sandvic: 'ÿ≥ÿßŸÜÿØŸàŸäÿ™ÿ¥ ÿ®ÿßÿ±ÿØ',
                cat_tavuk_doner: 'ÿ¥ÿßŸàÿ±ŸÖÿß ÿØÿ¨ÿßÿ¨',
                cat_et_doner: 'ÿ¥ÿßŸàÿ±ŸÖÿß ŸÑÿ≠ŸÖ',
                cat_makarnalar: 'ÿ®ÿßÿ≥ÿ™ÿß',
                cat_manti: 'ŸÖÿßŸÜÿ™Ÿä',
                cat_hamburger: 'ŸáÿßŸÖÿ®Ÿàÿ±ÿ¨ÿ±',
                cat_kofte_spesiyel: 'ŸÉŸÅÿ™ÿ© ÿÆÿßÿµÿ©',
                cat_aperatifler: 'ŸÖŸÇÿ®ŸÑÿßÿ™',
                cat_bistro: 'ÿ®Ÿäÿ≥ÿ™ÿ±Ÿà',
                cat_salata: 'ÿ≥ŸÑÿ∑ÿ©',
                cat_icecekler: 'ŸÖÿ¥ÿ±Ÿàÿ®ÿßÿ™',
                contact: 'ÿßÿ™ÿµŸÑ ÿ®ŸÜÿß',
                address: 'Fener Mah. 1968 Sk. No: 21/A Muratpa≈üa/ANTALYA',
                phone: '+90 242 323 1177',
                email: 'info@yicem.com',
                hours: 'ÿ≥ÿßÿπÿßÿ™ ÿßŸÑÿπŸÖŸÑ',
                weekdays: 'ÿßŸÑÿßÿ´ŸÜŸäŸÜ - ÿßŸÑÿ≥ÿ®ÿ™: 09:00 - 20:30',
                weekend: 'ŸÖÿ∫ŸÑŸÇ ŸäŸàŸÖ ÿßŸÑÿ£ÿ≠ÿØ',
                follow_us: 'ÿ™ÿßÿ®ÿπŸÜÿß',
                all_rights: 'ÿ¨ŸÖŸäÿπ ÿßŸÑÿ≠ŸÇŸàŸÇ ŸÖÿ≠ŸÅŸàÿ∏ÿ©.',
                call_now: 'ÿßÿ™ÿµŸÑ',
                product_details: 'ÿßÿ∑ŸÑÿ® ÿßŸÑÿ¢ŸÜ',
                order_now: 'ÿßÿ∑ŸÑÿ® ÿßŸÑÿ¢ŸÜ',
                add_to_cart: 'ÿ£ÿ∂ŸÅ ŸÑŸÑÿ≥ŸÑÿ©',
                loading: 'ÿ¨ÿßÿ±Ÿä ÿßŸÑÿ™ÿ≠ŸÖŸäŸÑ...',
                product_details: 'ÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑŸÖŸÜÿ™ÿ¨',
                extras: 'ÿ•ÿ∂ÿßŸÅÿßÿ™',
                ingredients: 'ÿßŸÑŸÖŸÉŸàŸÜÿßÿ™',
                remove_ingredients: 'ÿ•ÿ≤ÿßŸÑÿ© ÿßŸÑŸÖŸÉŸàŸÜÿßÿ™',
                total: 'ÿßŸÑÿ•ÿ¨ŸÖÿßŸÑŸä',
                select_option: 'Ÿäÿ±ÿ¨Ÿâ ÿßÿÆÿ™Ÿäÿßÿ± ÿÆŸäÿßÿ±'
            }
        };
    }

    // Helpers for localization from JSON with missing fields
    buildTranslations(nameObj = {}, descObj = {}) {
        const langs = ['tr','en','de','ru','fr','ar'];
        const result = {};
        langs.forEach(l => {
            const name = (nameObj && (nameObj[l] || nameObj.tr || nameObj.en)) || '';
            const description = (descObj && (descObj[l] || descObj.tr || descObj.en)) || '';
            result[l] = { name, description };
        });
        return result;
    }

    // Normalize any incoming label/value into a displayable string
    normalizeLabel(value) {
        if (value == null) return '';
        if (typeof value === 'string') return value;
        if (typeof value === 'number') return String(value);
        if (Array.isArray(value)) {
            return value.map(v => this.normalizeLabel(v)).filter(Boolean).join(' + ');
        }
        if (typeof value === 'object') {
            if (value.name && typeof value.name === 'string') return value.name;
            const lang = this.currentLanguage || 'tr';
            if (value[lang] && typeof value[lang] === 'string') return value[lang];
            if (value.tr && typeof value.tr === 'string') return value.tr;
            if (value.en && typeof value.en === 'string') return value.en;
        }
        try { return String(value); } catch (_) { return ''; }
    }

// --- BEGIN: Static image maps (top-level constants) ---
}

// √úr√ºn ID -> kesin resim yolu (gerekli g√∂rd√ºk√ße doldurulabilir)
const PRODUCT_IMAGE_MAP = {
    // √ñrnek:
    // 'p_margherita': './pic/Pizzalar/margarita.jpg',
};

// Klas√∂rlere g√∂re mevcut g√∂rsel dosyalarƒ± (pic/ altƒ±)
const AVAILABLE_IMAGES = {
    'Pizzalar': [
        '4-peynirli-yicem.jpg','brokoli-yicem.jpg','diavola-yicem.jpg','donerli-yicem.jpg','ƒ±spanak-tulum-yicem.jpg','kavurmali-yicem.jpg','klasik-yicem.jpg','margarita.jpg','mix-yicem-pizza.jpg','sosisli-yicem.jpg','sucuklu-yicem.jpg','tavuklu-yicem.jpg','tonno-yicem.jpg'
    ],
    'Ayvalik-Tostu': [
        'sanayi-tostu.jpg','soguk-sandvic.jpg','yicem-donerli.jpg','yicem-evkofteli.jpg','yicem-karisik.jpg','yicem-kasarli-jambon.jpg','yicem-kasarli.jpg','yicem-kavurma.jpg','yicem-mega-karisik.jpg','yicem-salam.jpg','yicem-schnitzel.jpg','yicem-sucuklu.jpg','yicem-super-karisik.jpg','yicem-yengen.jpg','yicem-yengenn.jpg'
    ],
    'Tavuk-Doner': [
        '3lu-tavuk-doner.jpg','5lƒ±-tavuk-doner.jpg','pilav-ustu-tavuk-doner.jpg','tavuk-doner-beyti.jpg','tavuk-doner-porsiyon.jpg','tavuk-doner.jpg','tavuk-iskender.jpg'
    ],
    'Et-Doner': [
        '3lu-etdoner.jpg','5li-etdoner.jpg','ayvalik-etdoner.jpg','et-doner-porsiyon.jpg','et-doner.jpg','et-iskender.jpg','kasarli-etdoner.jpg','pilavustu-etdoner.jpg','soslu-doner.jpg'
    ],
    'Makarnalar': [
        'alfredo.jpg','arabiata.jpg','bolonez.jpg','manti.jpg','Napoliten.jpg','pesto.jpg','ton-balikli.jpg','turkusulu.jpg'
    ],
    'Hamburger': [
        'cheeseburger.jpg','hamburger.jpg','tavukburger.jpg'
    ],
    'Kofte-Spesiyel': [
        'ekmekarasi.jpg','kasarli-kofte.jpg','sefin-izgarasi.jpg'
    ],
    'Aperatifler': [
        'citir.jpg','elmadilim.jpg','parmakpatates.jpg'
    ],
    'Bistro': [
        'barbekusoslutavuk.jpg','cafedeparis.jpg','chicken-quesadilla.jpg','chicken-stroganoff.jpg','dagkekigi-kremali.jpg','kasarli-mantarli-quesadilla.jpg','mantarli-kori-tavuk.jpg','mexicanososlutavuk.jpg','tatliacisoslutavuk.jpg','tavuk-wrap.jpg','viyana.jpg'
    ],
    'Salata': [
        'baharsalata.jpg','citir-tavuk-salata.jpg','diyet-tavuk-salata.jpg','hellim-salata.jpg','sezar.jpg','tonnosalata.jpg'
    ],
    'Icecek': [
        '4lucamicecek.jpg','ayran.jpg','cay.jpg','cocacola.jpg','fanta.jpg','icetea.jpg','litrelikicecek.jpg','pepsi.jpg','redbull.jpg','salgam.jpg','soda.jpg','sprite.jpg','su.jpg','turk-kahvesi.jpg'
    ]
};

// --- END: Static image maps ---

// Sƒ±nƒ±fƒ±n devamƒ±
class __KeepTypes__ {}

	// Build description for display: for pizzas always use language-specific description; others fallback to ingredients
	getDisplayDescription(product, translation) {
		try {
			// Force fixed multilingual description for doner categories
			if (product?.category === 'tavuk-doner' || product?.category === 'et-doner') {
				return translation?.description || '';
			}
			// T√ºm √ºr√ºnlerde: √∂nce aktif dildeki ingredients
			const lang = this.currentLanguage || 'tr';
			if (product?.ingredients) {
				if (Array.isArray(product.ingredients)) {
					if (product.ingredients.length) return product.ingredients.join(', ');
				} else if (typeof product.ingredients === 'object') {
					const localized = product.ingredients[lang];
					if (Array.isArray(localized) && localized.length) return localized.join(', ');
					// Eƒüer o dilde yoksa ve √ßeviri a√ßƒ±klamasƒ± varsa, onu kullan (dil uyumu i√ßin)
					if (translation?.description) return translation.description;
					// Son √ßare TR ingredients
					const trList = product.ingredients.tr;
					if (Array.isArray(trList) && trList.length) return trList.join(', ');
				}
			}
			// Ingredients yoksa √ßeviri a√ßƒ±klamasƒ±na d√º≈ü
			if (translation?.description) return translation.description;
		} catch (e) {}
		return translation?.description || '';
	}

    // Get local image based on product ID/name and available files
    getLocalImage(categoryFolder, productId, productName) {
        // 1) Explicit ID map
        if (typeof PRODUCT_IMAGE_MAP !== 'undefined' && PRODUCT_IMAGE_MAP[productId]) {
            return PRODUCT_IMAGE_MAP[productId];
        }

        const folder = this.resolvePicFolder(categoryFolder);
        const key = String(categoryFolder || '').toLowerCase();

        // 2) Special single-file cases
        if (key === 'soguk-sandvic') {
            return `./pic/Ayvalik-Tostu/soguk-sandvic.jpg`;
        }
        if (key === 'manti') {
            return `./pic/Makarnalar/manti.jpg`;
        }

        // 3) No name ‚Üí category default
        if (!productName) {
            return this.getDefaultImage(folder, productId);
        }

        // 4) Try mapping by cleaned name
        const cleanName = this.cleanProductName(productName);
        const mapped = this.findMatchingImage(cleanName);
        if (mapped) {
            return `./pic/${folder}/${mapped}`;
        }

        // 5) Try best match from AVAILABLE_IMAGES list
        const best = this.bestMatchFile(cleanName, folder);
        if (best) {
            return `./pic/${folder}/${best}`;
        }

        // 6) Slug-based fallback
        const fallbackFile = `${cleanName}.jpg`;
        return `./pic/${folder}/${fallbackFile}`;
    }

    // Clean product name for better matching
    cleanProductName(name) {
        if (!name) return '';
        // First transliterate Turkish characters to ASCII
        const turkishMap = {
            'ƒ±': 'i', 'ƒ∞': 'i', 'ƒü': 'g', 'ƒû': 'g',
            '√º': 'u', '√ú': 'u', '≈ü': 's', '≈û': 's',
            '√∂': 'o', '√ñ': 'o', '√ß': 'c', '√á': 'c'
        };
        let result = String(name).toLowerCase();
        // Simple character replacement without regex
        for (let i = 0; i < result.length; i++) {
            if (turkishMap[result[i]]) {
                result = result.substring(0, i) + turkishMap[result[i]] + result.substring(i + 1);
            }
        }
        return result
            .replace(/[^a-z0-9\s]/g, '') // Remove special chars
            .replace(/\s+/g, '-') // Replace spaces with hyphens
            .replace(/--+/g, '-') // Replace multiple hyphens
            .trim();
    }

    // Resolve category folder name for /pic path
    resolvePicFolder(categoryFolder) {
        const key = String(categoryFolder || '')
            .toLowerCase()
            .replace(/\s+/g, '-')
            .trim();
        const mapping = {
            'pizzalar': 'Pizzalar',
            'ayvalik-tostu': 'Ayvalik-Tostu',
            // Soƒüuk Sandvi√ß resmi Ayvalik-Tostu klas√∂r√ºnde tek dosya olarak tutulacak
            'soguk-sandvic': 'Ayvalik-Tostu',
            'tavuk-doner': 'Tavuk-Doner',
            'et-doner': 'Et-Doner',
            'makarnalar': 'Makarnalar',
            // Mantƒ± resmi Makarnalar klas√∂r√ºnde tek dosya
            'manti': 'Makarnalar',
            'hamburger': 'Hamburger',
            'kofte-spesiyel': 'Kofte-Spesiyel',
            'aperatifler': 'Aperatifler',
            'bistro': 'Bistro',
            'salata': 'Salata',
            // ƒ∞√ßecekler klas√∂r√º: Icecek
            'icecekler': 'Icecek',
            'icecek': 'Icecek'
        };
        // If already a proper folder-like string (e.g., 'Pizzalar'), keep it
        if (!mapping[key] && /^[A-Za-z0-9][A-Za-z0-9_-]*$/.test(String(categoryFolder))) {
            return categoryFolder;
        }
        return mapping[key] || 'Pizzalar';
    }

    // Find matching image based on product name
    findMatchingImage(cleanName) {
        // Common image patterns to try
        const patterns = [
            cleanName,
            cleanName.replace(/-/g, ''),
            cleanName.replace(/-/g, '_'),
            cleanName.split('-')[0], // First word only
            cleanName.split('-').slice(0, 2).join('-'), // First two words
        ];

        // Known image mappings for common products
        const imageMappings = {
            'margarita': 'margarita.jpg',
            'sucuklu': 'sucuklu-pizza.jpg',
            'pepperoni': 'pepperoni-pizza.jpg',
            'ton-baligi': 'ton-balikli-sandvic.jpg',
            'tavuk-doner': 'tavuk-doner.jpg',
            'et-doner': 'et-doner.jpg',
            'hamburger': 'hamburger.jpg',
            'cheeseburger': 'cheeseburger.jpg',
            'sezar': 'sezar-salata.jpg',
            'cay': 'cay.jpg',
            'kahve': 'turk-kahvesi.jpg',
            'ayran': 'ayran.jpg',
            'cola': 'cocacola.jpg',
            'fanta': 'fanta.jpg',
            'sprite': 'sprite.jpg',
            'pepsi': 'pepsi.jpg',
            'soguk-sandvic': 'soguk-sandvic.jpg',
            'yicem-karisik': 'yicem-karisik.jpg',
            'yicem-sucuklu': 'yicem-sucuklu.jpg',
            'yicem-kasarli': 'yicem-kasarli.jpg',
            'yicem-salam': 'yicem-salam.jpg',
            'yicem-jambon': 'yicem-jambon.jpg',
            'yicem-kavurma': 'yicem-kavurma.jpg',
            'yicem-mega-karisik': 'yicem-mega-karisik.jpg',
            'yicem-super-karisik': 'yicem-super-karisik.jpg',
            'yicem-yengen': 'yicem-yengen.jpg',
            'yicem-donerli': 'yicem-donerli.jpg',
            'yicem-evkofteli': 'yicem-evkofteli.jpg',
            'yicem-schnitzel': 'yicem-schnitzel.jpg',
            'sanayi-tostu': 'sanayi-tostu.jpg',
            'bolonez': 'bolonez.jpg',
            'alfredo': 'alfredo.jpg',
                'arabiat': 'arabiat.jpg',
                'arabiata': 'arabiata.jpg',
                'napoliten': 'Napoliten.jpg',
            'pesto': 'pesto.jpg',
            'turkusulu': 'turkusulu.jpg',
            'manti': 'manti.jpg',
            'sefin-izgarasi': 'sefin-izgarasi.jpg',
            'ekmek-arasi': 'ekmekarasi.jpg',
                'kasarli-kofte': 'kasarli-kofte.jpg',
                'ekmek-arasi-kofte': 'kasarli-kofte.jpg',
                'ekmek-arasi-kasarli-kofte': 'kasarli-kofte.jpg',
                'kavurmali-yicem': 'kavurmali-yicem.jpg',
                'donerli-yicem': 'donerli-yicem.jpg',
                'klasik-vejeteryan': 'klasik-yicem.jpg',
                'brokoli-peynir-yicem': 'brokoli-yicem.jpg',
                'turk-usulu-4-peynirli': 'turkusulu.jpg',
                'sezar-salata': 'sezar.jpg',
                'pilavustu-tavuk-doner': 'pilav-ustu-tavuk-doner.jpg',
                '3-adet-tavuk-doner': '3lu-tavuk-doner.jpg',
                '5-adet-tavuk-doner': '5lƒ±-tavuk-doner.jpg',
                'yicem-donerli': 'yicem-donerli.jpg',
                'tavuk-doner-beyti': 'tavuk-doner-beyti.jpg',
                'tavuk-doner-porsiyon': 'tavuk-doner-porsiyon.jpg',
                'tavuk-burger': 'tavukburger.jpg',
                'elma-dilim-patates': 'elmadilim.jpg',
                
                // Drinks image mappings
                'redbull': 'redbull.jpg',
                'coca-cola': 'cocacola.jpg',
                'pepsi': 'pepsi.jpg',
                'fanta': 'fanta.jpg',
                'sprite': 'sprite.jpg',
                'ice-tea': 'ice-tea.jpg',
                'litrelik-icecek': 'litrelikicecek.jpg',
                'yorukoglu-ayran': 'ayran.jpg',
                'su': 'su.jpg',
                'soda': 'soda.jpg',
                'salgam': 'salgam.jpg',
                'cay': 'cay.jpg',
                'turk-kahvesi': 'turk-kahvesi.jpg',
                '4lu-cam-icecek': '4lucamicecek.jpg',
            'citir': 'citir.jpg',
            'elmadilim': 'elmadilim.jpg',
            'parmak-patates': 'parmakpatates.jpg',
            'cafe-de-paris': 'cafedeparis.jpg',
            'barbeku-soslu-tavuk': 'barbekusoslutavuk.jpg',
            'chicken-quesadilla': 'chicken-quesadilla.jpg',
            'chicken-stroganoff': 'chicken-stroganoff.jpg',
            'dagkekigi-kremali': 'dagkekigi-kremali.jpg',
            'kasarli-mantarli-quesadilla': 'kasarli-mantarli-quesadilla.jpg',
            'mantarli-kori-tavuk': 'mantarli-kori-tavuk.jpg',
            'mexican-soslu-tavuk': 'mexicanososlutavuk.jpg',
            'tatliaci-soslu-tavuk': 'tatliacisoslutavuk.jpg',
            'tavuk-wrap': 'tavuk-wrap.jpg',
            'viyana': 'viyana.jpg',
            'bahar-salata': 'baharsalata.jpg',
            'citir-tavuk-salata': 'citir-tavuk-salata.jpg',
            'diyet-tavuk-salata': 'diyet-tavuk-salata.jpg',
            'hellim-salata': 'hellim-salata.jpg',
            'tonno-salata': 'tonnosalata.jpg',
            '3lu-tavuk-doner': '3lu-tavuk-doner.jpg',
            '5li-tavuk-doner': '5lƒ±-tavuk-doner.jpg',
            'pilav-ustu-tavuk-doner': 'pilav-ustu-tavuk-doner.jpg',
            'tavuk-doner-beyti': 'tavuk-doner-beyti.jpg',
            'tavuk-doner-porsiyon': 'tavuk-doner-porsiyon.jpg',
            'tavuk-iskender': 'tavuk-iskender.jpg',
            '3lu-et-doner': '3lu-etdoner.jpg',
            '5li-et-doner': '5li-etdoner.jpg',
            'ayvalik-et-doner': 'ayvalik-etdoner.jpg',
            'et-doner-porsiyon': 'et-doner-porsiyon.jpg',
            'et-iskender': 'et-iskender.jpg',
            'kasarli-et-doner': 'kasarli-etdoner.jpg',
            'pilav-ustu-et-doner': 'pilavustu-etdoner.jpg',
            'soslu-doner': 'soslu-doner.jpg',
            '4-peynirli-yicem': '4-peynirli-yicem.jpg',
            'brokoli-yicem': 'brokoli-yicem.jpg',
            'diavola-yicem': 'diavola-yicem.jpg',
            'donerli-yicem': 'donerli-yicem.jpg',
            'ispanak-tulum-yicem': 'ƒ±spanak-tulum-yicem.jpg',
            'kavurmali-yicem': 'kavurmali-yicem.jpg',
            'klasik-yicem': 'klasik-yicem.jpg',
            'mix-yicem-pizza': 'mix-yicem-pizza.jpg',
            'sosisli-yicem': 'sosisli-yicem.jpg',
            'sucuklu-yicem': 'sucuklu-yicem.jpg',
            'tavuklu-yicem': 'tavuklu-yicem.jpg',
            'tonno-yicem': 'tonno-yicem.jpg',
            '4lu-cam-icecek': '4lucamicecek.jpg',
            'ice-tea': 'icetea.jpg',
            'litrelik-icecek': 'litrelikicecek.jpg',
            'red-bull': 'redbull.jpg',
            'salgam': 'salgam.jpg',
            'soda': 'soda.jpg',
            'su': 'su.jpg',
            'turk-kahvesi': 'turk-kahvesi.jpg',
            'lavas-ekmegi': 'lavasekmegi.jpg',
            'tas-firin-ekmegi': 'tasfirinekmegi.jpg',
            // Additional mappings for missing products
            'mix-yicem': 'mix-yicem-pizza.jpg',
            'yicem-super-karisik': 'yicem-super-karisik.jpg',
            'yicem-kasarli-jambon': 'yicem-kasarli-jambon.jpg',
            'ton-balikli': 'ton-balikli.jpg',
            'kasarli-tavuk-durum': 'tavuk-doner.jpg',
            'tavuk-iskender': 'tavuk-iskender.jpg',
            'kaasrli-et-doner': 'kasarli-etdoner.jpg',
            'soslu-kaasrli-et-durum': 'kasarli-etdoner.jpg',
            // Additional mappings for proper image matching (without Turkish chars - they are automatically converted)
            'et-doner-70gr': 'et-doner.jpg',
            'et-doner-100gr': 'et-doner.jpg',
            'ispanak-tulum-yicem': 'ƒ±spanak-tulum-yicem.jpg',
            'yicem-karisik': 'yicem-karisik.jpg',
            'yicem-mega-karisik': 'yicem-mega-karisik.jpg',
            'yicem-kavurma': 'yicem-kavurma.jpg',
            'yicem-sucuk': 'yicem-sucuklu.jpg',
            'yicem-ev-kofteli': 'yicem-evkofteli.jpg',
            'tatli-aci-soslu-tavuk': 'tatliacisoslutavuk.jpg',
            'mexicano-soslu-tavuk': 'mexicanososlutavuk.jpg',
            'barbeku-soslu-tavuk': 'barbekusoslutavuk.jpg',
            'cafe-de-paris-soslu-tavuk': 'cafedeparis.jpg',
            'mantarli-kori-soslu-tavuk': 'mantarli-kori-tavuk.jpg',
            'dag-kekigi-kremali-tavuk': 'dagkekigi-kremali.jpg',
            'viyana-pilic-sinitzel': 'viyana.jpg',
            'kasarli-mantarli-quesadilla': 'kasarli-mantarli-quesadilla.jpg',
            'tavuk-quesadilla': 'chicken-quesadilla.jpg',
            'chicken-stroganoff': 'chicken-stroganoff.jpg',
            '5-adet-tavuk-doner': '5li-tavuk-doner.jpg',
            '5li-tavuk-doner': '5li-tavuk-doner.jpg',
            '3-adet-et-doner-70gr': '3lu-etdoner.jpg',
            '3-adet-et-doner-100gr': '3lu-etdoner.jpg',
            '5-adet-et-doner-70gr': '5li-etdoner.jpg',
            '5-adet-et-doner-100gr': '5li-etdoner.jpg',
            'pilavustu-et-doner': 'pilavustu-etdoner.jpg',
            'soslu-et-doner': 'soslu-doner.jpg',
            'soslu-kasarli-et-durum-70gr': 'kasarli-etdoner.jpg',
            'soslu-kasarli-et-durum-100gr': 'kasarli-etdoner.jpg',
            'ayvalik-et-durum-70gr': 'ayvalik-etdoner.jpg',
            'ayvalik-kasarli-et-doner-70gr': 'ayvalik-etdoner.jpg',
            'ev-yapimi-manti': 'manti.jpg',
            'ton-balikli': 'ton-balikli.jpg',
            'napoliten': 'Napoliten.jpg',
            'sefin-izgara-koftesi': 'sefin-izgarasi.jpg',
            'ekmek-arasi-kofte': 'ekmekarasi.jpg',
            'ekmek-arasi-kasarli-kofte': 'kasarli-kofte.jpg',
            'citir-tavuk-tabagi': 'citir.jpg',
            'tonno-yicem': 'tonno-yicem.jpg',
            'ice-tea': 'icetea.jpg',
            'redbull': 'redbull.jpg',
            'yorukoglu-ayran': 'ayran.jpg',
            'cay': 'cay.jpg',
            'turk-kahvesi': 'turk-kahvesi.jpg',
            'turkusulu': 'turkusulu.jpg',
            'turk-usulu-4-peynirli': 'turkusulu.jpg'
        };

        // Try exact matches first
        for (const pattern of patterns) {
            if (imageMappings[pattern]) {
                return imageMappings[pattern];
            }
        }

        // Try partial matches
        for (const [key, value] of Object.entries(imageMappings)) {
            if (cleanName.includes(key) || key.includes(cleanName)) {
                return value;
            }
        }

        return null;
    }

    // Choose best matching file from AVAILABLE_IMAGES for a folder
    bestMatchFile(cleanName, folder) {
        const list = (typeof AVAILABLE_IMAGES !== 'undefined' && AVAILABLE_IMAGES[folder]) ? AVAILABLE_IMAGES[folder] : [];
        if (!cleanName || !list.length) return null;

        // Exact without extension
        const exact = list.find(f => f.replace(/\.jpg$/i, '') === cleanName);
        if (exact) return exact;

        // Starts with
        const starts = list.find(f => f.toLowerCase().startsWith(cleanName));
        if (starts) return starts;

        // Includes either way
        const includes = list.find(f => f.toLowerCase().includes(cleanName) || cleanName.includes(f.replace(/\.jpg$/i, '').toLowerCase()));
        if (includes) return includes;

        // Alternative candidates
        const altCandidates = [
            cleanName.replace(/-/g, ''),
            cleanName.replace(/-/g, '_'),
            cleanName.split('-')[0],
            cleanName.split('-').slice(0, 2).join('-')
        ].filter(Boolean);

        for (const c of altCandidates) {
            const hit = list.find(f => f.toLowerCase().includes(c));
            if (hit) return hit;
        }

        return null;
    }

    // Get default image for category
    getDefaultImage(categoryFolder, productId) {
        const key = String(categoryFolder || '')
            .toLowerCase()
            .replace(/\s+/g, '-')
            .trim();
        const defaultImages = {
            'pizzalar': 'margarita.jpg',
            'ayvalik-tostu': 'yicem-karisik.jpg',
            'soguk-sandvic': 'soguk-sandvic.jpg',
            'tavuk-doner': 'tavuk-doner.jpg',
            'et-doner': 'et-doner.jpg',
            'makarnalar': 'bolonez.jpg',
            'manti': 'manti.jpg',
            'hamburger': 'hamburger.jpg',
            'kofte-spesiyel': 'sefin-izgarasi.jpg',
            'aperatifler': 'citir.jpg',
            'bistro': 'cafedeparis.jpg',
            'salata': 'sezar.jpg',
            'icecekler': 'cay.jpg'
        };

        const folder = this.resolvePicFolder(categoryFolder);
        const defaultImg = defaultImages[key];
        return defaultImg ? `./pic/${folder}/${defaultImg}` : `https://images.unsplash.com/photo-1551782450-a2132b4ba21d?w=400&h=300&fit=crop&sig=${productId}`;
    }

    showLanguageModal() {
        const modal = document.getElementById('languageModal');
        if (modal && !localStorage.getItem('language_selected')) {
            modal.classList.add('show');
        }
    }

    hideLanguageModal() {
        const modal = document.getElementById('languageModal');
        if (modal) {
            modal.classList.remove('show');
            localStorage.setItem('language_selected', 'true');
        }
    }

    // Product Data
	loadProducts() {
		try {
			// √ñncelikle √ßevirili birle≈üik men√º JSON'unu y√ºklemeyi dene
			fetch('./yicem_menu_translated.json')
				.then(res => {
					if (!res.ok) throw new Error('Menu JSON not found');
					return res.json();
				})
				.then(data => {
					this.products = this.mapTranslatedMenuToProducts(data);
					// Pizzalar ve Ayvalƒ±k Tostu i√ßin ingredients'i √ßevirilerden dil bazlƒ± tamamla
					this.normalizeIngredientsForCategories(['pizzalar','ayvalik-tostu']);
					// D√∂ner kategorileri i√ßin a√ßƒ±klama, men√º se√ßenekleri ve i√ßerik normalizasyonu
					this.normalizeDonerCategories(['tavuk-doner','et-doner']);
					console.log(`Total products loaded (translated menu): ${this.products.length}`);
					this.renderProducts();
				})
				.catch(() => {
					// Y√ºkleme ba≈üarƒ±sƒ±z: bo≈ü liste g√∂ster
					this.products = [];
					this.renderProducts();
				});
		} catch (error) {
			console.error('Error loading products:', error);
			// Hata durumunda bo≈ü array
			this.products = [];
			this.renderProducts();
		}
	}

	// yicem_menu_translated.json -> dahili √ºr√ºn yapƒ±sƒ±na d√∂n√º≈üt√ºr
	mapTranslatedMenuToProducts(data) {
		if (!data || !data.restaurant || !Array.isArray(data.restaurant.categories)) return [];
		const catMap = {
			pizza: 'pizzalar',
			toast: 'ayvalik-tostu',
			sandwich: 'soguk-sandvic',
			'chicken-doner': 'tavuk-doner',
			'beef-doner': 'et-doner',
			pasta: 'makarnalar',
			manti: 'manti',
			hamburger: 'hamburger',
			kofte: 'kofte-spesiyel',
			aperatifler: 'aperatifler',
			bistro: 'bistro',
			salad: 'salata',
			drinks: 'icecekler',
			// Legacy mappings for backward compatibility
			ayvalik_tostu: 'ayvalik-tostu',
			soguk_sandvic: 'soguk-sandvic',
			tavuk_doner: 'tavuk-doner',
			et_doner: 'et-doner',
			makarna: 'makarnalar',
			kofte_spesiyel: 'kofte-spesiyel',
			salata: 'salata',
			icecekler: 'icecekler'
		};

		const products = [];
		for (const category of data.restaurant.categories) {
			const internalCat = catMap[category.id] || category.id;
			if (!Array.isArray(category.products)) continue;
			for (const product of category.products) {
				const nameTr = product?.name?.tr || product?.name?.en || '';
                const imagePath = (typeof PRODUCT_IMAGE_MAP !== 'undefined' && PRODUCT_IMAGE_MAP[product.id])
                    ? PRODUCT_IMAGE_MAP[product.id]
                    : this.getLocalImage(internalCat, product.id, nameTr);
                const mapped = {
					id: product.id,
					category: internalCat,
					price: product.price,
                    image: imagePath,
					translations: this.buildTranslations(product.name, product.description),
					// contents √ßok dilli obje; mevcut dili se√ß ya da t√ºm objeyi koru
					ingredients: (product.contents && (product.contents[this.currentLanguage] || product.contents.tr)) ? product.contents : (product.contents || {}),
					extras: []
				};
                // Bellekte kesin e≈üle≈ütirme tablosunu doldur (ileride kalƒ±cƒ±ya √ßekilebilir)
                if (typeof PRODUCT_IMAGE_MAP !== 'undefined' && !PRODUCT_IMAGE_MAP[product.id]) {
                    PRODUCT_IMAGE_MAP[product.id] = imagePath;
                }

				// Boyut/se√ßenekler -> radio extra
				if (Array.isArray(product.options) && product.options.length) {
					mapped.extras.push({
						type: 'radio',
						name: 'Boyut',
						translations: { tr: 'Boyut', en: 'Size', de: 'Gr√∂√üe', ru: '–†–∞–∑–º–µ—Ä', fr: 'Taille', ar: 'ÿßŸÑÿ≠ÿ¨ŸÖ' },
						options: product.options.map(option => ({
							id: option.id,
							name: option.label?.[this.currentLanguage] || option.label?.tr || option.label?.en || '',
							translations: this.buildTranslations(option.label || {}, {}),
							priceDelta: option.price || 0
						}))
					});
				}

				// Ekstralar: ana ve yan √ºr√ºnler -> checkbox gruplarƒ±
				if (product.extras && Array.isArray(product.extras.mainProducts) && product.extras.mainProducts.length) {
					mapped.extras.push({
						type: 'checkbox',
						name: 'Ana √úr√ºnler (2 se√ßim)',
						translations: { tr: 'Ana √úr√ºnler (2 se√ßim)', en: 'Main Products (choose 2)', de: 'Hauptprodukte (2 ausw√§hlen)', ru: '–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã (–≤—ã–±—Ä–∞—Ç—å 2)', fr: 'Produits principaux (choisir 2)', ar: 'ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (ÿßÿÆÿ™Ÿäÿßÿ±ÿßŸÜ)' },
						options: product.extras.mainProducts.map(item => ({
							id: item.id,
							name: item.name?.[this.currentLanguage] || item.name?.tr || item.name?.en || '',
							translations: this.buildTranslations(item.name || {}, {}),
							priceDelta: item.price || 0
						}))
					});
				}
				if (product.extras && Array.isArray(product.extras.sideProducts) && product.extras.sideProducts.length) {
					mapped.extras.push({
						type: 'checkbox',
						name: 'Yan √úr√ºnler (4 se√ßim)',
						translations: { tr: 'Yan √úr√ºnler (4 se√ßim)', en: 'Side Products (choose 4)', de: 'Beilagen (4 ausw√§hlen)', ru: '–ì–∞—Ä–Ω–∏—Ä—ã (–≤—ã–±—Ä–∞—Ç—å 4)', fr: 'Accompagnements (choisir 4)', ar: 'ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿßŸÑÿ¨ÿßŸÜÿ®Ÿäÿ© (4 ÿßÿÆÿ™Ÿäÿßÿ±ÿßÿ™)' },
						options: product.extras.sideProducts.map(item => ({
							id: item.id,
							name: item.name?.[this.currentLanguage] || item.name?.tr || item.name?.en || '',
							translations: this.buildTranslations(item.name || {}, {}),
							priceDelta: item.price || 0
						}))
					});
				}

				// Men√º se√ßenekleri -> checkbox (Cips + Ayran, Cips + Kola vb.)
				if (product.extras && Array.isArray(product.extras.menuOptions) && product.extras.menuOptions.length) {
					mapped.extras.push({
						type: 'checkbox',
						name: 'Men√º Se√ßenekleri',
						translations: { tr: 'Men√º Se√ßenekleri', en: 'Menu Options', de: 'Men√º-Optionen', ru: '–í–∞—Ä–∏–∞–Ω—Ç—ã –º–µ–Ω—é', fr: 'Options de Menu', ar: 'ÿÆŸäÿßÿ±ÿßÿ™ ÿßŸÑŸÇÿßÿ¶ŸÖÿ©' },
						options: product.extras.menuOptions.map(item => ({
							id: item.id,
							name: item.name?.[this.currentLanguage] || item.name?.tr || item.name?.en || '',
							translations: this.buildTranslations(item.name || {}, {}),
							priceDelta: item.price || 0
						}))
					});
				}

				// Patates se√ßenekleri -> checkbox
				if (product.extras && Array.isArray(product.extras.potatoOptions) && product.extras.potatoOptions.length) {
					mapped.extras.push({
						type: 'checkbox',
						name: 'Patates Se√ßenekleri',
						translations: { tr: 'Patates Se√ßenekleri', en: 'Potato Options', de: 'Kartoffel-Optionen', ru: '–í–∞—Ä–∏–∞–Ω—Ç—ã –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è', fr: 'Options de Pommes', ar: 'ÿÆŸäÿßÿ±ÿßÿ™ ÿßŸÑÿ®ÿ∑ÿßÿ∑ÿ≥' },
						options: product.extras.potatoOptions.map(item => ({
							id: item.id,
							name: item.name?.[this.currentLanguage] || item.name?.tr || item.name?.en || '',
							translations: this.buildTranslations(item.name || {}, {}),
							priceDelta: item.price || 0
						}))
					});
				}

				// ƒ∞√ßecek se√ßenekleri -> checkbox
				if (product.extras && Array.isArray(product.extras.drinkOptions) && product.extras.drinkOptions.length) {
					mapped.extras.push({
						type: 'checkbox',
						name: 'ƒ∞√ßecek Se√ßenekleri',
						translations: { tr: 'ƒ∞√ßecek Se√ßenekleri', en: 'Drink Options', de: 'Getr√§nkeoptionen', ru: '–í–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Ç–∫–æ–≤', fr: 'Options de Boisson', ar: 'ÿÆŸäÿßÿ±ÿßÿ™ ÿßŸÑŸÖÿ¥ÿ±Ÿàÿ®ÿßÿ™' },
						options: product.extras.drinkOptions.map(item => ({
							id: item.id,
							name: item.name?.[this.currentLanguage] || item.name?.tr || item.name?.en || '',
							translations: this.buildTranslations(item.name || {}, {}),
							priceDelta: item.price || 0
						}))
					});
				}

				products.push(mapped);
			}
		}
		return products;
}

    // Ensure ingredients are language-specific by deriving from translations when missing
    normalizeIngredientsForCategories(categories = []) {
        const langs = ['tr','en','de','ru','fr','ar'];
        const splitDesc = (desc) => {
            return String(desc || '')
                .split(',')
                .map(s => s.trim())
                .filter(Boolean);
        };
        this.products = (this.products || []).map(p => {
            if (!categories.includes(p.category)) return p;
            const t = p.translations || {};
            let ing = p.ingredients;
            // Start from object form
            if (Array.isArray(ing)) {
                ing = { tr: ing };
            } else if (!ing || typeof ing !== 'object') {
                ing = {};
            }
            // Fill per language from existing translations when missing
            langs.forEach(l => {
                if (!Array.isArray(ing[l]) || ing[l].length === 0) {
                    const desc = t[l]?.description || '';
                    const arr = splitDesc(desc);
                    if (arr.length) {
                        ing[l] = arr;
                    }
                }
            });
            return { ...p, ingredients: ing };
        });
    }

    // Normalize descriptions, extras, and ingredients for doner categories
    normalizeDonerCategories(categories = []) {
        const langs = ['tr','en','de','ru','fr','ar'];
        const descByLang = {
            tr: 'D√ºr√ºm (Lava≈ü), Gobit Ekmek (Pita Ekmek), Ta≈ü Fƒ±rƒ±n Ekmeƒüi veya Ayvalƒ±k Tostu Ekmeƒüi Se√ßenekleri ile',
            en: 'With options: Wrap (Lavash), Gobit Bread (Pita), Stone Oven Bread or Ayvalƒ±k Toast Bread',
            de: 'Mit Optionen: Wrap (Lavash), Gobit Brot (Pita), Steinofenbrot oder Ayvalƒ±k-Toastbrot',
            ru: '–° –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏: –õ–∞–≤–∞—à (–ª–∞–≤–∞—à), —Ö–ª–µ–± –≥–æ–±–∏—Ç (–ø–∏—Ç–∞), —Ö–ª–µ–± –∏–∑ –∫–∞–º–µ–Ω–Ω–æ–π –ø–µ—á–∏ –∏–ª–∏ —Ö–ª–µ–± –¥–ª—è —Ç–æ—Å—Ç–∞ –ê–π–≤–∞–ª—ã–∫',
            fr: 'Avec options: Wrap (Lavash), Pain Gobit (Pita), Pain au four √† pierre ou Pain toast Ayvalƒ±k',
            ar: 'ŸÖÿπ ÿÆŸäÿßÿ±ÿßÿ™: ŸÑŸÅÿßŸÅÿ© (ŸÑÿßŸÅÿßÿ¥)ÿå ÿÆÿ®ÿ≤ ÿ∫Ÿàÿ®Ÿêÿ™ (ÿ®Ÿäÿ™ÿß)ÿå ÿÆÿ®ÿ≤ ŸÅÿ±ŸÜ ÿ≠ÿ¨ÿ±Ÿä ÿ£Ÿà ÿÆÿ®ÿ≤ ÿ™Ÿàÿ≥ÿ™ ÿ£ŸäŸÅÿßŸÑŸäŸÉ'
        };
        const potatoExtra = {
            type: 'checkbox',
            name: 'Ekstra Patates',
            translations: { tr: 'Ekstra Patates', en: 'Extra Fries', de: 'Extra Pommes', ru: '–î–æ–ø. –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏', fr: 'Frites suppl√©mentaires', ar: 'ÿ®ÿ∑ÿßÿ∑ÿ≥ ÿ•ÿ∂ÿßŸÅŸäÿ©' },
            options: [ { id: 'patates', name: 'Patates', translations: { tr: 'Patates', en: 'Fries', de: 'Pommes', ru: '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏', fr: 'Frites', ar: 'ÿ®ÿ∑ÿßÿ∑ÿ≥' }, priceDelta: 10 } ]
        };
        this.products = (this.products || []).map(p => {
            if (!categories.includes(p.category)) return p;
            // Set multilingual descriptions
            const t = p.translations || {};
            const newTranslations = { ...t };
            langs.forEach(l => {
                const name = (t[l]?.name) || (t.tr?.name) || '';
                newTranslations[l] = { name, description: descByLang[l] };
            });
            // Remove onions (Soƒüan) from ingredients
            const sanitizeIngs = (ings) => {
                if (Array.isArray(ings)) return ings.filter(x => (x || '').toLowerCase() !== 'soƒüan');
                if (ings && typeof ings === 'object') {
                    const m = { ...ings };
                    Object.keys(m).forEach(k => {
                        if (Array.isArray(m[k])) m[k] = m[k].filter(x => (x || '').toLowerCase() !== 'soƒüan');
                    });
                    return m;
                }
                return ings;
            };
            let newIngredients = sanitizeIngs(p.ingredients);
            // Extras are already mapped from JSON, so don't override them
            // Just ensure beef doner has potato checkbox if missing
            let extras = Array.isArray(p.extras) ? [...p.extras] : [];
            if (p.category === 'et-doner') {
                const hasPotato = extras.some(e => e && e.type === 'checkbox' && (e.name && (e.name.includes('Patates') || e.name.includes('Potatoes') || e.name.includes('Potato'))));
                if (!hasPotato) extras.push(potatoExtra);
            }
            return { ...p, translations: newTranslations, ingredients: newIngredients, extras };
        });
    }

    mapPizzaJsonToProducts(pizzaProducts) {
        if (!Array.isArray(pizzaProducts)) return [];
        return pizzaProducts.map(product => ({
            id: product.id,
            category: 'pizzalar',
            price: product.price,
            image: this.getLocalImage('Pizzalar', product.id, product.name?.tr || product.name?.en || ''),
            translations: this.buildTranslations(product.name, product.description),
            ingredients: (product.contents && product.contents[this.currentLanguage]) || (product.contents && product.contents.tr) || [],
            extras: [{
                type: 'radio',
                name: 'Boyut',
                translations: { tr: 'Boyut', en: 'Size', de: 'Gr√∂√üe', ru: '–†–∞–∑–º–µ—Ä', fr: 'Taille', ar: 'ÿßŸÑÿ≠ÿ¨ŸÖ' },
                options: (product.options || []).map(option => ({
                    id: option.id,
                    name: option.label[this.currentLanguage] || option.label.tr,
                    translations: { tr: option.label.tr, en: option.label.en, de: option.label.de, ru: option.label.ru, fr: option.label.fr, ar: option.label.ar },
                    priceDelta: option.price
                }))
            }]
        }));
    }

    mapMantiJsonToProducts(mantiProducts) {
        if (!Array.isArray(mantiProducts)) return [];
        return mantiProducts.map(product => ({
            id: product.id,
            category: 'manti',
            price: product.price,
            image: this.getLocalImage('manti', product.id, product.name?.tr || product.name?.en || ''),
            translations: this.buildTranslations(product.name, product.description),
            ingredients: (product.contents && product.contents[this.currentLanguage]) || (product.contents && product.contents.tr) || [],
            extras: [
                {
                    type: 'radio',
                    name: 'Yoƒüurt Se√ßeneƒüi',
                    translations: { tr: 'Yoƒüurt Se√ßeneƒüi', en: 'Yogurt Option', de: 'Joghurt-Option', ru: '–í–∞—Ä–∏–∞–Ω—Ç –π–æ–≥—É—Ä—Ç–∞', fr: 'Option Yaourt', ar: 'ÿÆŸäÿßÿ± ÿßŸÑÿ≤ÿ®ÿßÿØŸä' },
                    options: (product.options || []).map(option => ({
                        id: option.id,
                        name: option.label[this.currentLanguage] || option.label.tr,
                        translations: { tr: option.label.tr, en: option.label.en, de: option.label.de, ru: option.label.ru, fr: option.label.fr, ar: option.label.ar },
                        priceDelta: option.price
                    }))
                },
                ...(product.extras && Array.isArray(product.extras.drinkOptions) ? [{
                    type: 'checkbox',
                    name: 'ƒ∞√ßecek Se√ßenekleri',
                    translations: { tr: 'ƒ∞√ßecek Se√ßenekleri', en: 'Drink Options', de: 'Getr√§nkeoptionen', ru: '–í–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Ç–∫–æ–≤', fr: 'Options de Boisson', ar: 'ÿÆŸäÿßÿ±ÿßÿ™ ÿßŸÑŸÖÿ¥ÿ±Ÿàÿ®ÿßÿ™' },
                    options: product.extras.drinkOptions.map(drink => ({
                        id: drink.id,
                        name: drink.name[this.currentLanguage] || drink.name.tr,
                        translations: { tr: drink.name.tr, en: drink.name.en, de: drink.name.de, ru: drink.name.ru, fr: drink.name.fr, ar: drink.name.ar },
                        priceDelta: drink.price
                    }))
                }] : [])
            ]
        }));
    }

    mapKofteJsonToProducts(kofteProducts) {
        if (!Array.isArray(kofteProducts)) return [];
        return kofteProducts.map(product => ({
            id: product.id,
            category: 'kofte-spesiyel',
            price: product.price,
            image: this.getLocalImage('kofte-spesiyel', product.id, product.name?.tr || product.name?.en || ''),
            translations: this.buildTranslations(product.name, product.description),
            ingredients: (product.contents && product.contents[this.currentLanguage]) || (product.contents && product.contents.tr) || [],
            extras: [{
                type: 'radio',
                name: 'Servis',
                translations: { tr: 'Servis', en: 'Serving', de: 'Servieren', ru: '–ü–æ–¥–∞—á–∞', fr: 'Service', ar: 'ÿ™ŸÇÿØŸäŸÖ' },
                options: (product.options || []).map(option => ({
                    id: option.id,
                    name: option.label[this.currentLanguage] || option.label.tr,
                    translations: { tr: option.label.tr, en: option.label.en, de: option.label.de, ru: option.label.ru, fr: option.label.fr, ar: option.label.ar },
                    priceDelta: option.price
                }))
            }]
        }));
    }

    mapPastaJsonToProducts(pastaProducts) {
        if (!Array.isArray(pastaProducts)) return [];
        return pastaProducts.map(product => ({
            id: product.id,
            category: 'makarnalar',
            price: product.price,
            image: this.getLocalImage('makarnalar', product.id, product.name?.tr || product.name?.en || ''),
            translations: this.buildTranslations(product.name, product.description),
            ingredients: (product.contents && product.contents[this.currentLanguage]) || (product.contents && product.contents.tr) || [],
            extras: [
                {
                    type: 'radio',
                    name: 'Makarna T√ºr√º',
                    translations: { tr: 'Makarna T√ºr√º', en: 'Pasta Type', de: 'Pastasorte', ru: '–í–∏–¥ –ø–∞—Å—Ç—ã', fr: 'Type de P√¢tes', ar: 'ŸÜŸàÿπ ÿßŸÑŸÖÿπŸÉÿ±ŸàŸÜÿ©' },
                    options: (product.options || []).map(option => ({
                        id: option.id,
                        name: option.label[this.currentLanguage] || option.label.tr,
                        translations: { tr: option.label.tr, en: option.label.en, de: option.label.de, ru: option.label.ru, fr: option.label.fr, ar: option.label.ar },
                        priceDelta: option.price
                    }))
                },
                ...(product.extras && Array.isArray(product.extras.drinkOptions) ? [{
                    type: 'checkbox',
                    name: 'ƒ∞√ßecek Se√ßenekleri',
                    translations: { tr: 'ƒ∞√ßecek Se√ßenekleri', en: 'Drink Options', de: 'Getr√§nkeoptionen', ru: '–í–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Ç–∫–æ–≤', fr: 'Options de Boisson', ar: 'ÿÆŸäÿßÿ±ÿßÿ™ ÿßŸÑŸÖÿ¥ÿ±Ÿàÿ®ÿßÿ™' },
                    options: product.extras.drinkOptions.map(drink => ({
                        id: drink.id,
                        name: drink.name[this.currentLanguage] || drink.name.tr,
                        translations: { tr: drink.name.tr, en: drink.name.en, de: drink.name.de, ru: drink.name.ru, fr: drink.name.fr, ar: drink.name.ar },
                        priceDelta: drink.price
                    }))
                }] : [])
            ]
        }));
    }

    mapBeefDonerJsonToProducts(donerProducts) {
        if (!Array.isArray(donerProducts)) return [];
        return donerProducts.map(product => ({
            id: product.id,
            category: 'et-doner',
            price: product.price,
            image: this.getLocalImage('et-doner', product.id, product.name?.tr || product.name?.en || ''),
            translations: this.buildTranslations(product.name, product.description),
            ingredients: (product.contents && product.contents[this.currentLanguage]) || (product.contents && product.contents.tr) || [],
            extras: [
                ...(Array.isArray(product.options) && product.options.length ? [{
                    type: 'radio',
                    name: 'Servis',
                    translations: { tr: 'Servis', en: 'Serving', de: 'Servieren', ru: '–ü–æ–¥–∞—á–∞', fr: 'Service', ar: 'ÿ™ŸÇÿØŸäŸÖ' },
                    options: product.options.map(option => ({
                        id: option.id,
                        name: option.label?.[this.currentLanguage] || option.label?.tr || option.label?.en || '',
                        translations: {
                            tr: option.label?.tr || '',
                            en: option.label?.en || '',
                            de: option.label?.de || option.label?.en || '',
                            ru: option.label?.ru || option.label?.en || '',
                            fr: option.label?.fr || option.label?.en || '',
                            ar: option.label?.ar || option.label?.en || ''
                        },
                        priceDelta: option.price || 0
                    }))
                }] : [])
            ]
        }));
    }

    mapBistroJsonToProducts(bistroProducts) {
        if (!Array.isArray(bistroProducts)) return [];
        return bistroProducts.map(product => ({
            id: product.id,
            category: 'bistro',
            price: product.price,
            image: this.getLocalImage('bistro', product.id, product.name?.tr || product.name?.en || ''),
            translations: this.buildTranslations(product.name, product.description),
            ingredients: (product.contents && product.contents[this.currentLanguage]) || (product.contents && product.contents.tr) || [],
            extras: [
                ...(Array.isArray(product.options) && product.options.length ? [{
                    type: 'radio',
                    name: 'Servis',
                    translations: { tr: 'Servis', en: 'Serving', de: 'Servieren', ru: '–ü–æ–¥–∞—á–∞', fr: 'Service', ar: 'ÿ™ŸÇÿØŸäŸÖ' },
                    options: product.options.map(option => ({
                        id: option.id,
                        name: option.label?.[this.currentLanguage] || option.label?.tr || option.label?.en || '',
                        translations: {
                            tr: option.label?.tr || '',
                            en: option.label?.en || '',
                            de: option.label?.de || option.label?.en || '',
                            ru: option.label?.ru || option.label?.en || '',
                            fr: option.label?.fr || option.label?.en || '',
                            ar: option.label?.ar || option.label?.en || ''
                        },
                        priceDelta: option.price || 0
                    }))
                }] : [])
            ]
        }));
    }

    mapToastJsonToProducts(toastProducts) {
        if (!Array.isArray(toastProducts)) return [];
        return toastProducts.map(product => ({
            id: product.id,
            category: 'ayvalik-tostu',
            price: product.price,
            image: this.getLocalImage('ayvalik-tostu', product.id, product.name?.tr || product.name?.en || ''),
            translations: this.buildTranslations(product.name, product.description),
            ingredients: (product.contents && product.contents[this.currentLanguage]) || (product.contents && product.contents.tr) || [],
            extras: [
                ...(Array.isArray(product.options) && product.options.length ? [{
                    type: 'radio',
                    name: 'Servis',
                    translations: { tr: 'Servis', en: 'Serving', de: 'Servieren', ru: '–ü–æ–¥–∞—á–∞', fr: 'Service', ar: 'ÿ™ŸÇÿØŸäŸÖ' },
                    options: product.options.map(option => ({
                        id: option.id,
                        name: option.label?.[this.currentLanguage] || option.label?.tr || option.label?.en || '',
                        translations: {
                            tr: option.label?.tr || '',
                            en: option.label?.en || '',
                            de: option.label?.de || option.label?.en || '',
                            ru: option.label?.ru || option.label?.en || '',
                            fr: option.label?.fr || option.label?.en || '',
                            ar: option.label?.ar || option.label?.en || ''
                        },
                        priceDelta: option.price || 0
                    }))
                }] : [])
            ]
        }));
    }

    mapSandwichJsonToProducts(sandwichProducts) {
        if (!Array.isArray(sandwichProducts)) return [];
        return sandwichProducts.map(product => ({
            id: product.id,
            category: 'soguk-sandvic',
            price: product.price,
            image: this.getLocalImage('soguk-sandvic', product.id, product.name?.tr || product.name?.en || ''),
            translations: this.buildTranslations(product.name, product.description),
            ingredients: (product.contents && product.contents[this.currentLanguage]) || (product.contents && product.contents.tr) || [],
            extras: [
                // Servis se√ßenekleri
                ...(Array.isArray(product.options) && product.options.length ? [{
                    type: 'radio',
                    name: 'Servis',
                    translations: { tr: 'Servis', en: 'Serving', de: 'Servieren', ru: '–ü–æ–¥–∞—á–∞', fr: 'Service', ar: 'ÿ™ŸÇÿØŸäŸÖ' },
                    options: product.options.map(option => ({
                        id: option.id,
                        name: option.label?.[this.currentLanguage] || option.label?.tr || option.label?.en || '',
                        translations: {
                            tr: option.label?.tr || '',
                            en: option.label?.en || '',
                            de: option.label?.de || option.label?.en || '',
                            ru: option.label?.ru || option.label?.en || '',
                            fr: option.label?.fr || option.label?.en || '',
                            ar: option.label?.ar || option.label?.en || ''
                        },
                        priceDelta: option.price || 0
                    }))
                }] : []),
                // Ana √ºr√ºnler (2 se√ßim)
                ...(product.extras && product.extras.mainProducts ? [{
                    type: 'checkbox',
                    name: 'Ana √úr√ºnler (2 se√ßim)',
                    translations: { 
                        tr: 'Ana √úr√ºnler (2 se√ßim)', 
                        en: 'Main Products (2 choices)', 
                        de: 'Hauptprodukte (2 Auswahl)', 
                        ru: '–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã (2 –≤—ã–±–æ—Ä–∞)', 
                        fr: 'Produits Principaux (2 choix)', 
                        ar: 'ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (ÿßÿÆÿ™Ÿäÿßÿ±ÿßŸÜ)' 
                    },
                    options: product.extras.mainProducts.map(item => ({
                        id: item.id,
                        name: item.name?.[this.currentLanguage] || item.name?.tr || item.name?.en || '',
                        translations: {
                            tr: item.name?.tr || '',
                            en: item.name?.en || '',
                            de: item.name?.de || item.name?.en || '',
                            ru: item.name?.ru || item.name?.en || '',
                            fr: item.name?.fr || item.name?.en || '',
                            ar: item.name?.ar || item.name?.en || ''
                        },
                        priceDelta: item.price || 0
                    }))
                }] : []),
                // Yan √ºr√ºnler (4 se√ßim)
                ...(product.extras && product.extras.sideProducts ? [{
                    type: 'checkbox',
                    name: 'Yan √úr√ºnler (4 se√ßim)',
                    translations: { 
                        tr: 'Yan √úr√ºnler (4 se√ßim)', 
                        en: 'Side Products (4 choices)', 
                        de: 'Beilagen (4 Auswahl)', 
                        ru: '–ì–∞—Ä–Ω–∏—Ä—ã (4 –≤—ã–±–æ—Ä–∞)', 
                        fr: 'Accompagnements (4 choix)', 
                        ar: 'ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿßŸÑÿ¨ÿßŸÜÿ®Ÿäÿ© (4 ÿßÿÆÿ™Ÿäÿßÿ±ÿßÿ™)' 
                    },
                    options: product.extras.sideProducts.map(item => ({
                        id: item.id,
                        name: item.name?.[this.currentLanguage] || item.name?.tr || item.name?.en || '',
                        translations: {
                            tr: item.name?.tr || '',
                            en: item.name?.en || '',
                            de: item.name?.de || item.name?.en || '',
                            ru: item.name?.ru || item.name?.en || '',
                            fr: item.name?.fr || item.name?.en || '',
                            ar: item.name?.ar || item.name?.en || ''
                        },
                        priceDelta: item.price || 0
                    }))
                }] : [])
            ]
        }));
    }

    mapChickenDonerJsonToProducts(chickenDonerProducts) {
        if (!Array.isArray(chickenDonerProducts)) return [];
        return chickenDonerProducts.map(product => ({
            id: product.id,
            category: 'tavuk-doner',
            price: product.price,
            image: this.getLocalImage('tavuk-doner', product.id, product.name?.tr || product.name?.en || ''),
            translations: this.buildTranslations(product.name, product.description),
            ingredients: (product.contents && product.contents[this.currentLanguage]) || (product.contents && product.contents.tr) || [],
            extras: [
                ...(Array.isArray(product.options) && product.options.length ? [{
                    type: 'radio',
                    name: 'Servis',
                    translations: { tr: 'Servis', en: 'Serving', de: 'Servieren', ru: '–ü–æ–¥–∞—á–∞', fr: 'Service', ar: 'ÿ™ŸÇÿØŸäŸÖ' },
                    options: product.options.map(option => ({
                        id: option.id,
                        name: option.label?.[this.currentLanguage] || option.label?.tr || option.label?.en || '',
                        translations: {
                            tr: option.label?.tr || '',
                            en: option.label?.en || '',
                            de: option.label?.de || option.label?.en || '',
                            ru: option.label?.ru || option.label?.en || '',
                            fr: option.label?.fr || option.label?.en || '',
                            ar: option.label?.ar || option.label?.en || ''
                        },
                        priceDelta: option.price || 0
                    }))
                }] : [])
            ]
        }));
    }

    mapHamburgerJsonToProducts(hamburgerProducts) {
        if (!Array.isArray(hamburgerProducts)) return [];
        return hamburgerProducts.map(product => ({
            id: product.id,
            category: 'hamburger',
            price: product.price,
            image: this.getLocalImage('hamburger', product.id, product.name?.tr || product.name?.en || ''),
            translations: this.buildTranslations(product.name, product.description),
            ingredients: (product.contents && product.contents[this.currentLanguage]) || (product.contents && product.contents.tr) || [],
            extras: [
                ...(Array.isArray(product.options) && product.options.length ? [{
                    type: 'radio',
                    name: 'Servis',
                    translations: { tr: 'Servis', en: 'Serving', de: 'Servieren', ru: '–ü–æ–¥–∞—á–∞', fr: 'Service', ar: 'ÿ™ŸÇÿØŸäŸÖ' },
                    options: product.options.map(option => ({
                        id: option.id,
                        name: option.label?.[this.currentLanguage] || option.label?.tr || option.label?.en || '',
                        translations: {
                            tr: option.label?.tr || '',
                            en: option.label?.en || '',
                            de: option.label?.de || option.label?.en || '',
                            ru: option.label?.ru || option.label?.en || '',
                            fr: option.label?.fr || option.label?.en || '',
                            ar: option.label?.ar || option.label?.en || ''
                        },
                        priceDelta: option.price || 0
                    }))
                }] : [])
            ]
        }));
    }

    mapAperatiflerJsonToProducts(aperatiflerProducts) {
        if (!Array.isArray(aperatiflerProducts)) return [];
        return aperatiflerProducts.map(product => ({
            id: product.id,
            category: 'aperatifler',
            price: product.price,
            image: this.getLocalImage('aperatifler', product.id, product.name?.tr || product.name?.en || ''),
            translations: this.buildTranslations(product.name, product.description),
            ingredients: (product.contents && product.contents[this.currentLanguage]) || (product.contents && product.contents.tr) || [],
            extras: [
                ...(Array.isArray(product.options) && product.options.length ? [{
                    type: 'radio',
                    name: 'Servis',
                    translations: { tr: 'Servis', en: 'Serving', de: 'Servieren', ru: '–ü–æ–¥–∞—á–∞', fr: 'Service', ar: 'ÿ™ŸÇÿØŸäŸÖ' },
                    options: product.options.map(option => ({
                        id: option.id,
                        name: option.label?.[this.currentLanguage] || option.label?.tr || option.label?.en || '',
                        translations: {
                            tr: option.label?.tr || '',
                            en: option.label?.en || '',
                            de: option.label?.de || option.label?.en || '',
                            ru: option.label?.ru || option.label?.en || '',
                            fr: option.label?.fr || option.label?.en || '',
                            ar: option.label?.ar || option.label?.en || ''
                        },
                        priceDelta: option.price || 0
                    }))
                }] : [])
            ]
        }));
    }

    mapIceceklerJsonToProducts(iceceklerProducts) {
        if (!Array.isArray(iceceklerProducts)) return [];
        return iceceklerProducts.map(product => ({
            id: product.id,
            category: 'icecekler',
            price: product.price,
            image: this.getLocalImage('icecekler', product.id, product.name?.tr || product.name?.en || ''),
            translations: this.buildTranslations(product.name, product.description),
            ingredients: (product.contents && product.contents[this.currentLanguage]) || (product.contents && product.contents.tr) || [],
            extras: [
                ...(Array.isArray(product.options) && product.options.length ? [{
                    type: 'radio',
                    name: 'Servis',
                    translations: { tr: 'Servis', en: 'Serving', de: 'Servieren', ru: '–ü–æ–¥–∞—á–∞', fr: 'Service', ar: 'ÿ™ŸÇÿØŸäŸÖ' },
                    options: product.options.map(option => ({
                        id: option.id,
                        name: option.label?.[this.currentLanguage] || option.label?.tr || option.label?.en || '',
                        translations: {
                            tr: option.label?.tr || '',
                            en: option.label?.en || '',
                            de: option.label?.de || option.label?.en || '',
                            ru: option.label?.ru || option.label?.en || '',
                            fr: option.label?.fr || option.label?.en || '',
                            ar: option.label?.ar || option.label?.en || ''
                        },
                        priceDelta: option.price || 0
                    }))
                }] : [])
            ]
        }));
    }

    mapDrinksJsonToProducts(drinksProducts) {
        if (!Array.isArray(drinksProducts)) return [];
        return drinksProducts.map(product => ({
            id: product.id,
            category: 'icecekler', // Drinks will be shown under icecekler category
            price: product.price,
            image: this.getLocalImage('icecekler', product.id, product.name?.tr || product.name?.en || ''),
            translations: this.buildTranslations(product.name, product.description),
            ingredients: (product.contents && product.contents[this.currentLanguage]) || (product.contents && product.contents.tr) || [],
            extras: (product.options && product.options.length > 0) ? [{
                type: 'radio',
                name: 'Se√ßenek',
                translations: { tr: 'Se√ßenek', en: 'Option', de: 'Option', ru: '–í–∞—Ä–∏–∞–Ω—Ç', fr: 'Option', ar: 'ÿÆŸäÿßÿ±' },
                options: product.options.map(option => ({
                    id: option.id,
                    name: option.label[this.currentLanguage] || option.label.tr,
                    translations: this.buildTranslations(option.label, {}),
                    priceDelta: option.price
                }))
            }] : []
        }));
    }

    mapSaladJsonToProducts(saladProducts) {
        if (!Array.isArray(saladProducts)) return [];
        return saladProducts.map(product => ({
            id: product.id,
            category: 'salata',
            price: product.price,
            image: this.getLocalImage('salata', product.id, product.name?.tr || product.name?.en || ''),
            translations: this.buildTranslations(product.name, product.description),
            ingredients: (product.contents && product.contents[this.currentLanguage]) || (product.contents && product.contents.tr) || [],
            extras: []
        }));
    }

    // JSON dosya adƒ±ndan kategori klas√∂r√ºn√º otomatik bul
    getCategoryFolder(jsonFileName) {
        const folderMap = {
            'pizza.json': 'Pizzalar',
            'drinks.json': 'Icecek', 
            'aperatifler.json': 'Aperatifler',
            'beef-doner.json': 'Et-Doner',
            'bistro.json': 'Bistro',
            'chicken-doner.json': 'Tavuk-Doner',
            'hamburger.json': 'Hamburger',
            'kofte.json': 'Kofte-Spesiyel',
            'manti.json': 'Makarnalar',
            'pasta.json': 'Makarnalar',
            'salad.json': 'Salata',
            'toast.json': 'Ayvalik-Tostu',
            'sandwich.json': 'Ayvalik-Tostu' // Soƒüuk Sandvi√ß i√ßin
        };
        return folderMap[jsonFileName] || 'Pizzalar';
    }

    // √úr√ºn adƒ±ndan resim yolunu otomatik olu≈ütur
    getAutoImagePath(productId, productName, categoryFolder) {
        // √ñzel e≈üle≈ütirmeler
        const specialMappings = {
            'Margarita Yicem': 'margarita.jpg',
            'Mix Yicem': 'mix-yicem-pizza.jpg',
            'Kavurmalƒ± Yicem': 'kavurmali-yicem.jpg',
            '4 Peynirli Yicem': '4-peynirli-yicem.jpg',
            'Brokoli Yicem': 'brokoli-yicem.jpg',
            'Diavola Yicem': 'diavola-yicem.jpg',
            'Ispanak Tulum Yicem': 'ƒ±spanak-tulum-yicem.jpg',
            'Klasik Yicem': 'klasik-yicem.jpg',
            'Sosisli Yicem': 'sosisli-yicem.jpg',
            'Sucuklu Yicem': 'sucuklu-yicem.jpg',
            'Tavuklu Yicem': 'tavuklu-yicem.jpg',
            'Tonno Yicem': 'tonno-yicem.jpg',
            'Yicem D√∂nerli': 'donerli-yicem.jpg',
            'Coca Cola': 'cocacola.jpg',
            'Fanta': 'fanta.jpg',
            'Sprite': 'sprite.jpg',
            'Ayran': 'ayran.jpg',
            'Su': 'su.jpg',
            '√áay': 'cay.jpg',
            'T√ºrk Kahvesi': 'turk-kahvesi.jpg',
            'Ice Tea': 'icetea.jpg',
            'Soda': 'soda.jpg',
            '≈ûalgam': 'salgam.jpg',
            'Red Bull': 'redbull.jpg',
            'Litrelik ƒ∞√ßecek': 'litrelikicecek.jpg',
            '4\'l√º Cam ƒ∞√ßecek': '4lucamicecek.jpg',
            '√áƒ±tƒ±r': 'citir.jpg',
            'Elma Dilim Patates': 'elmadilim.jpg',
            'Parmak Patates': 'parmakpatates.jpg',
            'Hamburger': 'hamburger.jpg',
            'Cheeseburger': 'cheeseburger.jpg',
            'Tavuk Burger': 'tavukburger.jpg',
            'Bahar Salata': 'baharsalata.jpg',
            '√áƒ±tƒ±r Tavuk Salata': 'citir-tavuk-salata.jpg',
            'Diyet Tavuk Salata': 'diyet-tavuk-salata.jpg',
            'Hellim Salata': 'hellim-salata.jpg',
            'Sezar': 'sezar.jpg',
            'Tonno Salata': 'tonnosalata.jpg',
            'Arabiata': 'arabiata.jpg',
            'T√ºrk Usul√º 4 Peynirli': 'turkusulu.jpg',
            'Bolonez': 'bolonez.jpg',
            'Alfredo': 'alfredo.jpg',
            'Pesto': 'pesto.jpg',
            'Ton Balƒ±klƒ±': 'ton-balikli.jpg',
            'Napoliten': 'Napoliten.jpg',
            'Mantƒ±': 'manti.jpg',
            'Sanayi Tostu': 'sanayi-tostu.jpg',
            'Yicem Karƒ±≈üƒ±k': 'yicem-karisik.jpg',
            'Yicem Sucuklu': 'yicem-sucuklu.jpg',
            'Yicem Ka≈üarlƒ±': 'yicem-kasarli.jpg',
            'Yicem Salam': 'yicem-salam.jpg',
            'Yicem Mega Karƒ±≈üƒ±k': 'yicem-mega-karisik.jpg',
            'Yicem Super Karƒ±≈üƒ±k': 'yicem-super-karisik.jpg',
            'Yicem D√∂nerli': 'yicem-donerli.jpg',
            'Yicem Ev K√∂fteli': 'yicem-evkofteli.jpg',
            'Yicem Schnitzel': 'yicem-schnitzel.jpg',
            'Yicem Kavurma': 'yicem-kavurma.jpg',
            'Yicem Yengen': 'yicem-yengen.jpg',
            'Caf√© de Paris': 'cafedeparis.jpg',
            'Barbek√º Soslu Tavuk': 'barbekusoslutavuk.jpg',
            'Chicken Quesadilla': 'chicken-quesadilla.jpg',
            'Chicken Stroganoff': 'chicken-stroganoff.jpg',
            'Daƒü Kekiƒüi Kremalƒ±': 'dagkekigi-kremali.jpg',
            'Ka≈üarlƒ± Mantarlƒ± Quesadilla': 'kasarli-mantarli-quesadilla.jpg',
            'Mantarlƒ± K√∂ri Tavuk': 'mantarli-kori-tavuk.jpg',
            'Mexican Soslu Tavuk': 'mexicanososlutavuk.jpg',
            'Tatlƒ± Acƒ± Soslu Tavuk': 'tatliacisoslutavuk.jpg',
            'Tavuk Wrap': 'tavuk-wrap.jpg',
            'Viyana': 'viyana.jpg',
            'Tavuk D√∂ner Beyti': 'tavuk-doner-beyti.jpg',
            'Tavuk D√∂ner Porsiyon': 'tavuk-doner-porsiyon.jpg',
            'Pilav√ºst√º Tavuk D√∂ner': 'pilav-ustu-tavuk-doner.jpg',
            '3 Adet Tavuk D√∂ner': '3lu-tavuk-doner.jpg',
            '5 Adet Tavuk D√∂ner': '5lƒ±-tavuk-doner.jpg',
            'Tavuk ƒ∞skender': 'tavuk-iskender.jpg',
            'Et D√∂ner Porsiyon': 'et-doner-porsiyon.jpg',
            'Pilav√ºst√º Et D√∂ner': 'pilavustu-etdoner.jpg',
            '3 Adet Et D√∂ner': '3lu-etdoner.jpg',
            '5 Adet Et D√∂ner': '5li-etdoner.jpg',
            'Et ƒ∞skender': 'et-iskender.jpg',
            'Ka≈üarlƒ± Et D√∂ner': 'kasarli-etdoner.jpg',
            'Soslu D√∂ner': 'soslu-doner.jpg',
            'Ayvalƒ±k Et D√∂ner': 'ayvalik-etdoner.jpg',
            'Ekmek Arasƒ± K√∂fte': 'ekmekarasi.jpg',
            'Ekmek Arasƒ± Ka≈üarlƒ± K√∂fte': 'kasarli-kofte.jpg',
            '≈ûefin ƒ∞zgarasƒ±': 'sefin-izgarasi.jpg',
            'Soƒüuk Sandvi√ß': 'soguk-sandvic.jpg',
            'Ka≈üarlƒ± Soƒüuk Sandvi√ß': 'yicem-kasarli.jpg',
            'Tavuklu Soƒüuk Sandvi√ß': 'yicem-kasarli.jpg',
            'Ton Balƒ±klƒ± Soƒüuk Sandvi√ß': 'yicem-kasarli.jpg',
            'Sucuklu Soƒüuk Sandvi√ß': 'yicem-sucuklu.jpg',
            'Salamlƒ± Soƒüuk Sandvi√ß': 'yicem-salam.jpg',
            'Jambonlu Soƒüuk Sandvi√ß': 'yicem-kasarli-jambon.jpg',
            'Mantarlƒ± Soƒüuk Sandvi√ß': 'yicem-kasarli.jpg'
        };
        
        // √ñzel e≈üle≈ütirme varsa onu kullan
        if (specialMappings[productName]) {
            const folder = this.resolvePicFolder(categoryFolder);
            return `/pic/${folder}/${specialMappings[productName]}`;
        }
        
        // Yoksa otomatik olu≈ütur
        const cleanName = productName.toLowerCase()
            .replace(/[^a-z0-9]/g, '-')
            .replace(/-+/g, '-')
            .replace(/^-|-$/g, '');
        
        const folder = this.resolvePicFolder(categoryFolder);
        return `/pic/${folder}/${cleanName}.jpg`;
    }

    // T√ºm JSON verilerini otomatik olarak y√ºkle
    getAllProductsFromJson() {
        const allProducts = [];
        
        // Pizza kategorisi
        allProducts.push(...this.mapPizzaJsonToProducts());
        
        // Drinks kategorisi
        allProducts.push(...this.mapDrinksJsonToProducts());
        
        // Aperatifler kategorisi
        allProducts.push(...this.mapAperatiflerJsonToProducts());
        
        // Beef Doner kategorisi
        allProducts.push(...this.mapBeefDonerJsonToProducts());
        
        // Bistro kategorisi
        allProducts.push(...this.mapBistroJsonToProducts());
        
        // Chicken Doner kategorisi
        allProducts.push(...this.mapChickenDonerJsonToProducts());
        
        // Hamburger kategorisi
        allProducts.push(...this.mapHamburgerJsonToProducts());
        
        // Kofte kategorisi
        allProducts.push(...this.mapKofteJsonToProducts());
        
        // Manti kategorisi
        allProducts.push(...this.mapMantiJsonToProducts());
        
        // Pasta kategorisi
        allProducts.push(...this.mapPastaJsonToProducts());
        
        // Salad kategorisi
        allProducts.push(...this.mapSaladJsonToProducts());
        
        // Sandwich kategorisi
        allProducts.push(...this.mapSandwichJsonToProducts());
        
        // Toast kategorisi
        allProducts.push(...this.mapToastJsonToProducts());
        
        return allProducts;
    }

    // Get embedded specific products (kaldƒ±rƒ±ldƒ±): artƒ±k kullanƒ±lmƒ±yor, bo≈ü d√∂ner
    getSpecificProducts() {
        return [
            // kaldƒ±rƒ±ldƒ±
            {
                id: 'p1',
                category: 'pizzalar',
                price: 180,
                image: './pic/Pizzalar/margarita.jpg',
                translations: {
                    tr: { name: 'Margarita Yicem', description: 'Mozarella Peyniri, Pizza Sosu, Fesleƒüen, Cherry Domates' },
                    en: { name: 'Margarita Yicem', description: 'Mozzarella Cheese, Pizza Sauce, Basil, Cherry Tomatoes' },
                    de: { name: 'Margarita Yicem', description: 'Mozzarella-K√§se, Pizza-Sauce, Basilikum, Kirschtomaten' },
                    ru: { name: '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ –ô–∏—Ü–µ–º', description: '–°—ã—Ä –ú–æ—Ü–∞—Ä–µ–ª–ª–∞, –°–æ—É—Å –¥–ª—è –ø–∏—Ü—Ü—ã, –ë–∞–∑–∏–ª–∏–∫, –ß–µ—Ä—Ä–∏ –ø–æ–º–∏–¥–æ—Ä—ã' },
                    fr: { name: 'Margarita Yicem', description: 'Fromage Mozzarella, Sauce Pizza, Basilic, Tomates Cerises' },
                    ar: { name: 'ŸÖÿßÿ±ÿ∫ÿ±Ÿäÿ™ÿß Ÿäÿ¨ŸÖ', description: 'ÿ¨ÿ®ŸÜ ŸÖŸàÿ≤ÿßÿ±ŸäŸÑÿßÿå ÿµŸÑÿµÿ© ÿßŸÑÿ®Ÿäÿ™ÿ≤ÿßÿå ÿ±Ÿäÿ≠ÿßŸÜÿå ÿ∑ŸÖÿßÿ∑ŸÖ ŸÉÿ±ÿ≤Ÿäÿ©' }
                },
                ingredients: {
                    tr: ['Pizza Sosu', 'Fesleƒüen', 'Cherry Domates'],
                    en: ['Pizza Sauce', 'Basil', 'Cherry Tomatoes'],
                    ru: ['Pizza Sosu', '–ë–∞–∑–∏–ª–∏–∫', '–ü–æ–º–∏–¥–æ—Ä—ã —á–µ—Ä—Ä–∏']
                },
                extras: [
                    {
                        type: 'radio',
                        name: 'Boyut',
                        translations: { tr: 'Boyut', en: 'Size', de: 'Gr√∂√üe', ru: '–†–∞–∑–º–µ—Ä', fr: 'Taille', ar: 'ÿßŸÑÿ≠ÿ¨ŸÖ' },
                        options: [
                            { id: 'o1', name: 'Small (1 Ki≈üilik)', translations: { tr: 'Small (1 Ki≈üilik)', en: 'Small (1 Person)', de: 'Klein (1 Person)', ru: '–ú–∞–ª–µ–Ω—å–∫–∞—è (1 —á–µ–ª–æ–≤–µ–∫)', fr: 'Petit (1 personne)', ar: 'ÿµÿ∫Ÿäÿ± (ÿ¥ÿÆÿµ Ÿàÿßÿ≠ÿØ)' }, priceDelta: 0 },
                            { id: 'o2', name: 'Medium (1-2 Ki≈üilik)', translations: { tr: 'Medium (1-2 Ki≈üilik)', en: 'Medium (1-2 People)', de: 'Mittel (1-2 Personen)', ru: '–°—Ä–µ–¥–Ω—è—è (1-2 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Moyen (1-2 personnes)', ar: 'ŸÖÿ™Ÿàÿ≥ÿ∑ (1-2 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 60 },
                            { id: 'o3', name: 'Large (2-3 Ki≈üilik)', translations: { tr: 'Large (2-3 Ki≈üilik)', en: 'Large (2-3 People)', de: 'Gro√ü (2-3 Personen)', ru: '–ë–æ–ª—å—à–∞—è (2-3 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Grand (2-3 personnes)', ar: 'ŸÉÿ®Ÿäÿ± (2-3 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 120 },
                            { id: 'o4', name: 'XLarge (3-4 Ki≈üilik)', translations: { tr: 'XLarge (3-4 Ki≈üilik)', en: 'XLarge (3-4 People)', de: 'Extra Gro√ü (3-4 Personen)', ru: '–û—á–µ–Ω—å –±–æ–ª—å—à–∞—è (3-4 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Tr√®s grand (3-4 personnes)', ar: 'ŸÉÿ®Ÿäÿ± ÿ¨ÿØÿßŸã (3-4 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 180 }
                        ]
                    }
                ]
            },
            {
                id: 'p2',
                category: 'pizzalar',
                price: 240,
                image: './pic/Pizzalar/mix-yicem-pizza.jpg',
                translations: {
                    tr: { name: 'Mix Yicem', description: 'Mozarella Peyniri, Pizza Sosu, Sucuk, Sosis, Salam, Zeytin, Mƒ±sƒ±r, Mantar' },
                    en: { name: 'Mix Yicem', description: 'Mozzarella Cheese, Pizza Sauce, Sucuk, Sausage, Salami, Olives, Corn, Mushrooms' },
                    de: { name: 'Mix Yicem', description: 'Mozzarella-K√§se, Pizza-Sauce, Sucuk, Wurst, Salami, Oliven, Mais, Pilze' },
                    ru: { name: '–ú–∏–∫—Å –ô–∏—Ü–µ–º', description: '–°—ã—Ä –ú–æ—Ü–∞—Ä–µ–ª–ª–∞, –°–æ—É—Å –¥–ª—è –ø–∏—Ü—Ü—ã, –°—É–¥–∂—É–∫, –ö–æ–ª–±–∞—Å–∞, –°–∞–ª–∞–º–∏, –û–ª–∏–≤–∫–∏, –ö—É–∫—É—Ä—É–∑–∞, –ì—Ä–∏–±—ã' },
                    fr: { name: 'Mix Yicem', description: 'Fromage Mozzarella, Sauce Pizza, Sucuk, Saucisse, Salami, Olives, Ma√Øs, Champignons' },
                    ar: { name: 'ŸÖŸäŸÉÿ≥ Ÿäÿ¨ŸÖ', description: 'ÿ¨ÿ®ŸÜ ŸÖŸàÿ≤ÿßÿ±ŸäŸÑÿßÿå ÿµŸÑÿµÿ© ÿßŸÑÿ®Ÿäÿ™ÿ≤ÿßÿå ÿ≥Ÿàÿ¨ŸÇÿå ÿ≥ÿ¨ŸÇÿå ÿ≥ŸÑÿßŸÖŸäÿå ÿ≤Ÿäÿ™ŸàŸÜÿå ÿ∞ÿ±ÿ©ÿå ŸÅÿ∑ÿ±' }
                },
                ingredients: ['Pizza Sosu', 'Sucuk', 'Sosis', 'Salam', 'Zeytin', 'Mƒ±sƒ±r', 'Mantar'],
                extras: [
                    {
                        type: 'radio',
                        name: 'Boyut',
                        translations: { tr: 'Boyut', en: 'Size', de: 'Gr√∂√üe', ru: '–†–∞–∑–º–µ—Ä', fr: 'Taille', ar: 'ÿßŸÑÿ≠ÿ¨ŸÖ' },
                        options: [
                            { id: 'o5', name: 'Small (1 Ki≈üilik)', translations: { tr: 'Small (1 Ki≈üilik)', en: 'Small (1 Person)', de: 'Klein (1 Person)', ru: '–ú–∞–ª–µ–Ω—å–∫–∞—è (1 —á–µ–ª–æ–≤–µ–∫)', fr: 'Petit (1 personne)', ar: 'ÿµÿ∫Ÿäÿ± (ÿ¥ÿÆÿµ Ÿàÿßÿ≠ÿØ)' }, priceDelta: 0 },
                            { id: 'o6', name: 'Medium (1-2 Ki≈üilik)', translations: { tr: 'Medium (1-2 Ki≈üilik)', en: 'Medium (1-2 People)', de: 'Mittel (1-2 Personen)', ru: '–°—Ä–µ–¥–Ω—è—è (1-2 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Moyen (1-2 personnes)', ar: 'ŸÖÿ™Ÿàÿ≥ÿ∑ (1-2 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 60 },
                            { id: 'o7', name: 'Large (2-3 Ki≈üilik)', translations: { tr: 'Large (2-3 Ki≈üilik)', en: 'Large (2-3 People)', de: 'Gro√ü (2-3 Personen)', ru: '–ë–æ–ª—å—à–∞—è (2-3 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Grand (2-3 personnes)', ar: 'ŸÉÿ®Ÿäÿ± (2-3 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 120 },
                            { id: 'o8', name: 'XLarge (3-4 Ki≈üilik)', translations: { tr: 'XLarge (3-4 Ki≈üilik)', en: 'XLarge (3-4 People)', de: 'Extra Gro√ü (3-4 Personen)', ru: '–û—á–µ–Ω—å –±–æ–ª—å—à–∞—è (3-4 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Tr√®s grand (3-4 personnes)', ar: 'ŸÉÿ®Ÿäÿ± ÿ¨ÿØÿßŸã (3-4 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 180 }
                        ]
                    }
                ]
            },
            {
                id: 'p3',
                category: 'pizzalar',
                price: 300,
                image: './pic/Pizzalar/kavurmali-yicem.jpg',
                translations: {
                    tr: { name: 'Kavurmalƒ± Yicem', description: 'Mozarella, Pizza Sosu, Dana Kavurma, Soƒüan, Biber, Kekik' },
                    en: { name: 'Beef Stew Yicem', description: 'Mozzarella, Pizza Sauce, Beef Stew, Onion, Pepper, Thyme' },
                    de: { name: 'Rindfleisch-Eintopf Yicem', description: 'Mozzarella, Pizza-Sauce, Rindfleisch-Eintopf, Zwiebel, Paprika, Thymian' },
                    ru: { name: '–ô–∏—Ü–µ–º —Å —Ç—É—à–µ–Ω–æ–π –≥–æ–≤—è–¥–∏–Ω–æ–π', description: '–ú–æ—Ü–∞—Ä–µ–ª–ª–∞, –°–æ—É—Å –¥–ª—è –ø–∏—Ü—Ü—ã, –¢—É—à–µ–Ω–∞—è –≥–æ–≤—è–¥–∏–Ω–∞, –õ—É–∫, –ü–µ—Ä–µ—Ü, –¢–∏–º—å—è–Ω' },
                    fr: { name: 'Yicem au Rago√ªt de B≈ìuf', description: 'Mozzarella, Sauce Pizza, Rago√ªt de B≈ìuf, Oignon, Poivron, Thym' },
                    ar: { name: 'Ÿäÿ¨ŸÖ ÿ®ÿßŸÑŸÑÿ≠ŸÖ ÿßŸÑŸÖÿ∑ÿ®ŸàÿÆ', description: 'ŸÖŸàÿ≤ÿßÿ±ŸäŸÑÿßÿå ÿµŸÑÿµÿ© ÿßŸÑÿ®Ÿäÿ™ÿ≤ÿßÿå ŸÑÿ≠ŸÖ ŸÖÿ∑ÿ®ŸàÿÆÿå ÿ®ÿµŸÑÿå ŸÅŸÑŸÅŸÑÿå ÿ≤ÿπÿ™ÿ±' }
                },
                ingredients: ['Pizza Sosu', 'Dana Kavurma', 'Soƒüan', 'Biber', 'Kekik'],
                extras: [
                    {
                        type: 'radio',
                        name: 'Boyut',
                        translations: { tr: 'Boyut', en: 'Size', de: 'Gr√∂√üe', ru: '–†–∞–∑–º–µ—Ä', fr: 'Taille', ar: 'ÿßŸÑÿ≠ÿ¨ŸÖ' },
                        options: [
                            { id: 'o9', name: 'Small (1 Ki≈üilik)', translations: { tr: 'Small (1 Ki≈üilik)', en: 'Small (1 Person)', de: 'Klein (1 Person)', ru: '–ú–∞–ª–µ–Ω—å–∫–∞—è (1 —á–µ–ª–æ–≤–µ–∫)', fr: 'Petit (1 personne)', ar: 'ÿµÿ∫Ÿäÿ± (ÿ¥ÿÆÿµ Ÿàÿßÿ≠ÿØ)' }, priceDelta: 0 },
                            { id: 'o10', name: 'Medium (1-2 Ki≈üilik)', translations: { tr: 'Medium (1-2 Ki≈üilik)', en: 'Medium (1-2 People)', de: 'Mittel (1-2 Personen)', ru: '–°—Ä–µ–¥–Ω—è—è (1-2 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Moyen (1-2 personnes)', ar: 'ŸÖÿ™Ÿàÿ≥ÿ∑ (1-2 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 60 },
                            { id: 'o11', name: 'Large (2-3 Ki≈üilik)', translations: { tr: 'Large (2-3 Ki≈üilik)', en: 'Large (2-3 People)', de: 'Gro√ü (2-3 Personen)', ru: '–ë–æ–ª—å—à–∞—è (2-3 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Grand (2-3 personnes)', ar: 'ŸÉÿ®Ÿäÿ± (2-3 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 120 },
                            { id: 'o12', name: 'XLarge (3-4 Ki≈üilik)', translations: { tr: 'XLarge (3-4 Ki≈üilik)', en: 'XLarge (3-4 People)', de: 'Extra Gro√ü (3-4 Personen)', ru: '–û—á–µ–Ω—å –±–æ–ª—å—à–∞—è (3-4 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Tr√®s grand (3-4 personnes)', ar: 'ŸÉÿ®Ÿäÿ± ÿ¨ÿØÿßŸã (3-4 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 180 }
                        ]
                    }
                ]
            },
            // Drinks kategorisi - JSON'dan g√∂m√ºl√º veriler
            {
                id: 'd1',
                category: 'icecekler',
                price: 20,
                image: this.getAutoImagePath('d1', 'Coca Cola', 'Icecek'),
                translations: {
                    tr: { name: 'Coca Cola', description: 'Coca Cola 330ml' },
                    en: { name: 'Coca Cola', description: 'Coca Cola 330ml' },
                    de: { name: 'Coca Cola', description: 'Coca Cola 330ml' },
                    ru: { name: '–ö–æ–∫–∞-–ö–æ–ª–∞', description: '–ö–æ–∫–∞-–ö–æ–ª–∞ 330–º–ª' },
                    fr: { name: 'Coca Cola', description: 'Coca Cola 330ml' },
                    ar: { name: 'ŸÉŸàŸÉÿß ŸÉŸàŸÑÿß', description: 'ŸÉŸàŸÉÿß ŸÉŸàŸÑÿß 330ŸÖŸÑ' }
                },
                ingredients: [],
                extras: []
            },
            {
                id: 'd2',
                category: 'icecekler',
                price: 20,
                image: this.getAutoImagePath('d2', 'Fanta', 'Icecek'),
                translations: {
                    tr: { name: 'Fanta', description: 'Fanta 330ml' },
                    en: { name: 'Fanta', description: 'Fanta 330ml' },
                    de: { name: 'Fanta', description: 'Fanta 330ml' },
                    ru: { name: '–§–∞–Ω—Ç–∞', description: '–§–∞–Ω—Ç–∞ 330–º–ª' },
                    fr: { name: 'Fanta', description: 'Fanta 330ml' },
                    ar: { name: 'ŸÅÿßŸÜÿ™ÿß', description: 'ŸÅÿßŸÜÿ™ÿß 330ŸÖŸÑ' }
                },
                ingredients: [],
                extras: []
            },
            {
                id: 'd3',
                category: 'icecekler',
                price: 20,
                image: this.getAutoImagePath('d3', 'Sprite', 'Icecek'),
                translations: {
                    tr: { name: 'Sprite', description: 'Sprite 330ml' },
                    en: { name: 'Sprite', description: 'Sprite 330ml' },
                    de: { name: 'Sprite', description: 'Sprite 330ml' },
                    ru: { name: '–°–ø—Ä–∞–π—Ç', description: '–°–ø—Ä–∞–π—Ç 330–º–ª' },
                    fr: { name: 'Sprite', description: 'Sprite 330ml' },
                    ar: { name: 'ÿ≥ÿ®ÿ±ÿßŸäÿ™', description: 'ÿ≥ÿ®ÿ±ÿßŸäÿ™ 330ŸÖŸÑ' }
                },
                ingredients: [],
                extras: []
            },
            {
                id: 'd4',
                category: 'icecekler',
                price: 30,
                image: this.getAutoImagePath('d4', 'Ayran', 'Icecek'),
                translations: {
                    tr: { name: 'Ayran', description: 'Ayran 250ml' },
                    en: { name: 'Ayran', description: 'Ayran 250ml' },
                    de: { name: 'Ayran', description: 'Ayran 250ml' },
                    ru: { name: '–ê–π—Ä–∞–Ω', description: '–ê–π—Ä–∞–Ω 250–º–ª' },
                    fr: { name: 'Ayran', description: 'Ayran 250ml' },
                    ar: { name: 'ÿπŸäÿ±ÿßŸÜ', description: 'ÿπŸäÿ±ÿßŸÜ 250ŸÖŸÑ' }
                },
                ingredients: [],
                extras: []
            },
            {
                id: 'd5',
                category: 'icecekler',
                price: 15,
                image: this.getAutoImagePath('d5', 'Su', 'Icecek'),
                translations: {
                    tr: { name: 'Su', description: 'Su 500ml' },
                    en: { name: 'Water', description: 'Water 500ml' },
                    de: { name: 'Wasser', description: 'Wasser 500ml' },
                    ru: { name: '–í–æ–¥–∞', description: '–í–æ–¥–∞ 500–º–ª' },
                    fr: { name: 'Eau', description: 'Eau 500ml' },
                    ar: { name: 'ŸÖÿßÿ°', description: 'ŸÖÿßÿ° 500ŸÖŸÑ' }
                },
                ingredients: [],
                extras: []
            },
            {
                id: 'd6',
                category: 'icecekler',
                price: 25,
                image: this.getAutoImagePath('d6', '√áay', 'Icecek'),
                translations: {
                    tr: { name: '√áay', description: '√áay' },
                    en: { name: 'Tea', description: 'Tea' },
                    de: { name: 'Tee', description: 'Tee' },
                    ru: { name: '–ß–∞–π', description: '–ß–∞–π' },
                    fr: { name: 'Th√©', description: 'Th√©' },
                    ar: { name: 'ÿ¥ÿßŸä', description: 'ÿ¥ÿßŸä' }
                },
                ingredients: [],
                extras: []
            },
            {
                id: 'd7',
                category: 'icecekler',
                price: 35,
                image: this.getAutoImagePath('d7', 'T√ºrk Kahvesi', 'Icecek'),
                translations: {
                    tr: { name: 'T√ºrk Kahvesi', description: 'T√ºrk Kahvesi' },
                    en: { name: 'Turkish Coffee', description: 'Turkish Coffee' },
                    de: { name: 'T√ºrkischer Kaffee', description: 'T√ºrkischer Kaffee' },
                    ru: { name: '–¢—É—Ä–µ—Ü–∫–∏–π –∫–æ—Ñ–µ', description: '–¢—É—Ä–µ—Ü–∫–∏–π –∫–æ—Ñ–µ' },
                    fr: { name: 'Caf√© Turc', description: 'Caf√© Turc' },
                    ar: { name: 'ŸÇŸáŸàÿ© ÿ™ÿ±ŸÉŸäÿ©', description: 'ŸÇŸáŸàÿ© ÿ™ÿ±ŸÉŸäÿ©' }
                },
                ingredients: [],
                extras: []
            },
            {
                id: 'd8',
                category: 'icecekler',
                price: 30,
                image: this.getAutoImagePath('d8', 'Ice Tea', 'Icecek'),
                translations: {
                    tr: { name: 'Ice Tea', description: 'Ice Tea 330ml' },
                    en: { name: 'Ice Tea', description: 'Ice Tea 330ml' },
                    de: { name: 'Eistee', description: 'Eistee 330ml' },
                    ru: { name: '–•–æ–ª–æ–¥–Ω—ã–π —á–∞–π', description: '–•–æ–ª–æ–¥–Ω—ã–π —á–∞–π 330–º–ª' },
                    fr: { name: 'Th√© Glac√©', description: 'Th√© Glac√© 330ml' },
                    ar: { name: 'ÿ¥ÿßŸä ŸÖÿ´ŸÑÿ¨', description: 'ÿ¥ÿßŸä ŸÖÿ´ŸÑÿ¨ 330ŸÖŸÑ' }
                },
                ingredients: [],
                extras: []
            },
            {
                id: 'd9',
                category: 'icecekler',
                price: 25,
                image: this.getAutoImagePath('d9', 'Soda', 'Icecek'),
                translations: {
                    tr: { name: 'Soda', description: 'Soda 330ml' },
                    en: { name: 'Soda', description: 'Soda 330ml' },
                    de: { name: 'Soda', description: 'Soda 330ml' },
                    ru: { name: '–°–æ–¥–æ–≤–∞—è', description: '–°–æ–¥–æ–≤–∞—è 330–º–ª' },
                    fr: { name: 'Soda', description: 'Soda 330ml' },
                    ar: { name: 'ÿµŸàÿØÿß', description: 'ÿµŸàÿØÿß 330ŸÖŸÑ' }
                },
                ingredients: [],
                extras: []
            },
            {
                id: 'd10',
                category: 'icecekler',
                price: 30,
                image: this.getAutoImagePath('d10', '≈ûalgam', 'Icecek'),
                translations: {
                    tr: { name: '≈ûalgam', description: '≈ûalgam 250ml' },
                    en: { name: '≈ûalgam', description: '≈ûalgam 250ml' },
                    de: { name: '≈ûalgam', description: '≈ûalgam 250ml' },
                    ru: { name: '–®–∞–ª–≥–∞–º', description: '–®–∞–ª–≥–∞–º 250–º–ª' },
                    fr: { name: '≈ûalgam', description: '≈ûalgam 250ml' },
                    ar: { name: 'ÿ¥ŸÑÿ∫ŸÖ', description: 'ÿ¥ŸÑÿ∫ŸÖ 250ŸÖŸÑ' }
                },
                ingredients: [],
                extras: []
            },
            {
                id: 'd11',
                category: 'icecekler',
                price: 50,
                image: this.getAutoImagePath('d11', 'Red Bull', 'Icecek'),
                translations: {
                    tr: { name: 'Red Bull', description: 'Red Bull 250ml' },
                    en: { name: 'Red Bull', description: 'Red Bull 250ml' },
                    de: { name: 'Red Bull', description: 'Red Bull 250ml' },
                    ru: { name: '–†–µ–¥ –ë—É–ª–ª', description: '–†–µ–¥ –ë—É–ª–ª 250–º–ª' },
                    fr: { name: 'Red Bull', description: 'Red Bull 250ml' },
                    ar: { name: 'ÿ±ŸäÿØ ÿ®ŸàŸÑ', description: 'ÿ±ŸäÿØ ÿ®ŸàŸÑ 250ŸÖŸÑ' }
                },
                ingredients: [],
                extras: []
            },
            {
                id: 'd12',
                category: 'icecekler',
                price: 40,
                image: this.getAutoImagePath('d12', 'Litrelik ƒ∞√ßecek', 'Icecek'),
                translations: {
                    tr: { name: 'Litrelik ƒ∞√ßecek', description: 'Litrelik ƒ∞√ßecek' },
                    en: { name: 'Liter Drink', description: 'Liter Drink' },
                    de: { name: 'Litergetr√§nk', description: 'Litergetr√§nk' },
                    ru: { name: '–õ–∏—Ç—Ä–æ–≤—ã–π –Ω–∞–ø–∏—Ç–æ–∫', description: '–õ–∏—Ç—Ä–æ–≤—ã–π –Ω–∞–ø–∏—Ç–æ–∫' },
                    fr: { name: 'Boisson d\'un Litre', description: 'Boisson d\'un Litre' },
                    ar: { name: 'ŸÖÿ¥ÿ±Ÿàÿ® ŸÑÿ™ÿ±', description: 'ŸÖÿ¥ÿ±Ÿàÿ® ŸÑÿ™ÿ±' }
                },
                ingredients: [],
                extras: []
            },
            {
                id: 'd13',
                category: 'icecekler',
                price: 60,
                image: this.getAutoImagePath('d13', '4\'l√º Cam ƒ∞√ßecek', 'Icecek'),
                translations: {
                    tr: { name: '4\'l√º Cam ƒ∞√ßecek', description: '4\'l√º Cam ƒ∞√ßecek' },
                    en: { name: '4 Glass Drinks', description: '4 Glass Drinks' },
                    de: { name: '4 Glasgetr√§nke', description: '4 Glasgetr√§nke' },
                    ru: { name: '4 —Å—Ç–∞–∫–∞–Ω–∞ –Ω–∞–ø–∏—Ç–∫–æ–≤', description: '4 —Å—Ç–∞–∫–∞–Ω–∞ –Ω–∞–ø–∏—Ç–∫–æ–≤' },
                    fr: { name: '4 Boissons en Verre', description: '4 Boissons en Verre' },
                    ar: { name: '4 ŸÖÿ¥ÿ±Ÿàÿ®ÿßÿ™ ÿ≤ÿ¨ÿßÿ¨Ÿäÿ©', description: '4 ŸÖÿ¥ÿ±Ÿàÿ®ÿßÿ™ ÿ≤ÿ¨ÿßÿ¨Ÿäÿ©' }
                },
                ingredients: [],
                extras: []
            },
            // Aperatifler kategorisi - JSON'dan g√∂m√ºl√º veriler
            {
                id: 'a1',
                category: 'aperatifler',
                price: 40,
                image: this.getAutoImagePath('a1', '√áƒ±tƒ±r', 'Aperatifler'),
                translations: {
                    tr: { name: '√áƒ±tƒ±r', description: '√áƒ±tƒ±r Patates' },
                    en: { name: 'Crispy', description: 'Crispy Potatoes' },
                    de: { name: 'Knusprig', description: 'Knusprige Kartoffeln' },
                    ru: { name: '–•—Ä—É—Å—Ç—è—â–∏–π', description: '–•—Ä—É—Å—Ç—è—â–∏–π –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å' },
                    fr: { name: 'Croustillant', description: 'Pommes de Terre Croustillantes' },
                    ar: { name: 'ŸÖŸÇÿ±ŸÖÿ¥', description: 'ÿ®ÿ∑ÿßÿ∑ÿ≥ ŸÖŸÇÿ±ŸÖÿ¥ÿ©' }
                },
                ingredients: ['Patates', 'Tuz', 'Yaƒü'],
                extras: []
            },
            {
                id: 'a2',
                category: 'aperatifler',
                price: 35,
                image: this.getAutoImagePath('a2', 'Elma Dilim Patates', 'Aperatifler'),
                translations: {
                    tr: { name: 'Elma Dilim Patates', description: 'Elma Dilim Patates' },
                    en: { name: 'Apple Slice Potatoes', description: 'Apple Slice Potatoes' },
                    de: { name: 'Apfelscheiben Kartoffeln', description: 'Apfelscheiben Kartoffeln' },
                    ru: { name: '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å –ª–æ–º—Ç–∏–∫–∞–º–∏', description: '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å –ª–æ–º—Ç–∏–∫–∞–º–∏' },
                    fr: { name: 'Pommes de Terre en Tranches', description: 'Pommes de Terre en Tranches' },
                    ar: { name: 'ÿ®ÿ∑ÿßÿ∑ÿ≥ ÿ¥ÿ±ÿßÿ¶ÿ≠', description: 'ÿ®ÿ∑ÿßÿ∑ÿ≥ ÿ¥ÿ±ÿßÿ¶ÿ≠' }
                },
                ingredients: ['Patates', 'Tuz', 'Yaƒü'],
                extras: []
            },
            {
                id: 'a3',
                category: 'aperatifler',
                price: 45,
                image: this.getAutoImagePath('a3', 'Parmak Patates', 'Aperatifler'),
                translations: {
                    tr: { name: 'Parmak Patates', description: 'Parmak Patates' },
                    en: { name: 'Finger Potatoes', description: 'Finger Potatoes' },
                    de: { name: 'Fingerkartoffeln', description: 'Fingerkartoffeln' },
                    ru: { name: '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å –ø–∞–ª—å—á–∏–∫–∏', description: '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å –ø–∞–ª—å—á–∏–∫–∏' },
                    fr: { name: 'Pommes de Terre en B√¢tonnets', description: 'Pommes de Terre en B√¢tonnets' },
                    ar: { name: 'ÿ®ÿ∑ÿßÿ∑ÿ≥ ÿ£ÿµÿßÿ®ÿπ', description: 'ÿ®ÿ∑ÿßÿ∑ÿ≥ ÿ£ÿµÿßÿ®ÿπ' }
                },
                ingredients: ['Patates', 'Tuz', 'Yaƒü'],
                extras: []
            },
            // K√∂fte Spesiyel kategorisi - JSON'dan g√∂m√ºl√º veriler
            {
                id: 'k1',
                category: 'kofte-spesiyel',
                price: 120,
                image: this.getAutoImagePath('k1', 'Ekmek Arasƒ± K√∂fte', 'Kofte-Spesiyel'),
                translations: {
                    tr: { name: 'Ekmek Arasƒ± K√∂fte', description: 'Ekmek Arasƒ± K√∂fte' },
                    en: { name: 'Bread with Meatball', description: 'Bread with Meatball' },
                    de: { name: 'Brot mit Fleischb√§llchen', description: 'Brot mit Fleischb√§llchen' },
                    ru: { name: '–•–ª–µ–± —Å —Ñ—Ä–∏–∫–∞–¥–µ–ª—å–∫–∞–º–∏', description: '–•–ª–µ–± —Å —Ñ—Ä–∏–∫–∞–¥–µ–ª—å–∫–∞–º–∏' },
                    fr: { name: 'Pain aux Boulettes', description: 'Pain aux Boulettes' },
                    ar: { name: 'ÿÆÿ®ÿ≤ ŸÖÿπ ŸÉŸÅÿ™ÿ©', description: 'ÿÆÿ®ÿ≤ ŸÖÿπ ŸÉŸÅÿ™ÿ©' }
                },
                ingredients: ['K√∂fte', 'Ekmek', 'Soƒüan', 'Domates'],
                extras: []
            },
            {
                id: 'k2',
                category: 'kofte-spesiyel',
                price: 140,
                image: this.getAutoImagePath('k2', 'Ekmek Arasƒ± Ka≈üarlƒ± K√∂fte', 'Kofte-Spesiyel'),
                translations: {
                    tr: { name: 'Ekmek Arasƒ± Ka≈üarlƒ± K√∂fte', description: 'Ekmek Arasƒ± Ka≈üarlƒ± K√∂fte' },
                    en: { name: 'Bread with Cheesy Meatball', description: 'Bread with Cheesy Meatball' },
                    de: { name: 'Brot mit K√§se-Fleischb√§llchen', description: 'Brot mit K√§se-Fleischb√§llchen' },
                    ru: { name: '–•–ª–µ–± —Å —Å—ã—Ä–Ω—ã–º–∏ —Ñ—Ä–∏–∫–∞–¥–µ–ª—å–∫–∞–º–∏', description: '–•–ª–µ–± —Å —Å—ã—Ä–Ω—ã–º–∏ —Ñ—Ä–∏–∫–∞–¥–µ–ª—å–∫–∞–º–∏' },
                    fr: { name: 'Pain aux Boulettes au Fromage', description: 'Pain aux Boulettes au Fromage' },
                    ar: { name: 'ÿÆÿ®ÿ≤ ŸÖÿπ ŸÉŸÅÿ™ÿ© ÿ®ÿßŸÑÿ¨ÿ®ŸÜ', description: 'ÿÆÿ®ÿ≤ ŸÖÿπ ŸÉŸÅÿ™ÿ© ÿ®ÿßŸÑÿ¨ÿ®ŸÜ' }
                },
                ingredients: ['K√∂fte', 'Ka≈üar Peyniri', 'Ekmek', 'Soƒüan'],
                extras: []
            },
            {
                id: 'k3',
                category: 'kofte-spesiyel',
                price: 180,
                image: this.getAutoImagePath('k3', '≈ûefin ƒ∞zgarasƒ±', 'Kofte-Spesiyel'),
                translations: {
                    tr: { name: '≈ûefin ƒ∞zgarasƒ±', description: '≈ûefin ƒ∞zgarasƒ±' },
                    en: { name: 'Chef\'s Grill', description: 'Chef\'s Grill' },
                    de: { name: 'Chef-Grill', description: 'Chef-Grill' },
                    ru: { name: '–ì—Ä–∏–ª—å —à–µ—Ñ–∞', description: '–ì—Ä–∏–ª—å —à–µ—Ñ–∞' },
                    fr: { name: 'Grill du Chef', description: 'Grill du Chef' },
                    ar: { name: 'ÿ¥Ÿàÿßÿ° ÿßŸÑÿ¥ŸäŸÅ', description: 'ÿ¥Ÿàÿßÿ° ÿßŸÑÿ¥ŸäŸÅ' }
                },
                ingredients: ['K√∂fte', 'Izgara', 'Pilav', 'Salata', 'Soƒüan'],
                extras: []
            },
            {
                id: 'ekmek-arasi-kofte',
                category: 'kofte-spesiyel',
                price: 120,
                image: './images/kasarli-kofte.jpg',
                translations: {
                    tr: { name: 'Ekmek Arasƒ± K√∂fte', description: 'Ekmek Arasƒ± K√∂fte' },
                    en: { name: 'Bread with Meatball', description: 'Bread with Meatball' },
                    de: { name: 'Brot mit Fleischb√§llchen', description: 'Brot mit Fleischb√§llchen' },
                    ru: { name: '–•–ª–µ–± —Å —Ñ—Ä–∏–∫–∞–¥–µ–ª—å–∫–∞–º–∏', description: '–•–ª–µ–± —Å —Ñ—Ä–∏–∫–∞–¥–µ–ª—å–∫–∞–º–∏' },
                    fr: { name: 'Pain aux Boulettes', description: 'Pain aux Boulettes' },
                    ar: { name: 'ÿÆÿ®ÿ≤ ŸÖÿπ ŸÉŸÅÿ™ÿ©', description: 'ÿÆÿ®ÿ≤ ŸÖÿπ ŸÉŸÅÿ™ÿ©' }
                },
                ingredients: ['K√∂fte', 'Ekmek', 'Soƒüan', 'Domates'],
                extras: []
            },
            // Soƒüuk Sandvi√ß kategorisi - JSON'dan g√∂m√ºl√º veriler
            {
                id: 'ss1',
                category: 'soguk-sandvic',
                price: 220,
                image: './pic/Ayvalik-Tostu/soguk-sandvic.jpg',
                translations: {
                    tr: { name: 'Soƒüuk Sandvi√ß', description: '2 Ana √úr√ºn ve 4 Yan √úr√ºn Se√ßin' },
                    en: { name: 'Cold Sandwich', description: 'Select 2 Main and 4 Side Items' },
                    de: { name: 'Kaltes Sandwich', description: 'W√§hlen Sie 2 Haupt- und 4 Beilagen' },
                    ru: { name: '–•–æ–ª–æ–¥–Ω—ã–π —Å—ç–Ω–¥–≤–∏—á', description: '–í—ã–±–µ—Ä–∏—Ç–µ 2 –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏ 4 –≥–∞—Ä–Ω–∏—Ä–∞' },
                    fr: { name: 'Sandwich Froid', description: 'S√©lectionnez 2 principaux et 4 accompagnements' },
                    ar: { name: 'ÿ≥ÿßŸÜÿØŸàŸäÿ™ÿ¥ ÿ®ÿßÿ±ÿØ', description: 'ÿßÿÆÿ™ÿ± ÿπŸÜÿµÿ±ŸäŸÜ ÿ±ÿ¶Ÿäÿ≥ŸäŸäŸÜ Ÿà4 ÿ¨ŸàÿßŸÜÿ®' }
                },
                ingredients: [],
                extras: [
                    {
                        type: 'radio',
                        name: 'Servis',
                        translations: { tr: 'Servis', en: 'Serving', de: 'Servieren', ru: '–ü–æ–¥–∞—á–∞', fr: 'Service', ar: 'ÿ™ŸÇÿØŸäŸÖ' },
                        options: [
                            { id: 'ss1_s1', name: 'Tek', translations: { tr: 'Tek', en: 'Single', de: 'Einzeln', ru: '–û–¥–∏–Ω–æ—á–Ω—ã–π', fr: 'Seul', ar: 'ŸÅÿ±ÿßÿØŸâ' }, priceDelta: 0 },
                            { id: 'ss1_s2', name: 'Men√º (Cips + ƒ∞√ßecek)', translations: { tr: 'Men√º (Cips + ƒ∞√ßecek)', en: 'Menu (Chips + Drink)', de: 'Men√º (Chips + Getr√§nk)', ru: '–ú–µ–Ω—é (–ß–∏–ø—Å—ã + –ù–∞–ø–∏—Ç–æ–∫)', fr: 'Menu (Chips + Boisson)', ar: 'ŸÇÿßÿ¶ŸÖÿ© (ÿ¥Ÿäÿ®ÿ≥ + ŸÖÿ¥ÿ±Ÿàÿ®)' }, priceDelta: 80 }
                        ]
                    },
                    {
                        type: 'checkbox',
                        name: 'Ana √úr√ºnler (2 se√ßim)',
                        translations: { tr: 'Ana √úr√ºnler (2 se√ßim)', en: 'Main Products (choose 2)', de: 'Hauptprodukte (2 w√§hlen)', ru: '–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã (–≤—ã–±—Ä–∞—Ç—å 2)', fr: 'Produits principaux (choisir 2)', ar: 'ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (ÿßÿÆÿ™Ÿäÿßÿ±ÿßŸÜ)' },
                        options: [
                            { id: 'm1', name: 'Ton Balƒ±ƒüƒ±', translations: { tr: 'Ton Balƒ±ƒüƒ±', en: 'Tuna', de: 'Thunfisch', ru: '–¢—É–Ω–µ—Ü', fr: 'Thon', ar: 'ÿ™ŸàŸÜÿ©' }, priceDelta: 0 },
                            { id: 'm2', name: 'Beyaz Peynir', translations: { tr: 'Beyaz Peynir', en: 'White Cheese', de: 'Wei√ük√§se', ru: '–ë—Ä—ã–Ω–∑–∞', fr: 'Fromage Blanc', ar: 'ÿ¨ÿ®ŸÜÿ© ÿ®Ÿäÿ∂ÿßÿ°' }, priceDelta: 0 },
                            { id: 'm3', name: 'Ezine', translations: { tr: 'Ezine', en: 'Ezine Cheese', de: 'Ezine K√§se', ru: '–°—ã—Ä –≠–∑–∏–Ω–µ', fr: 'Fromage Ezine', ar: 'ÿ¨ÿ®ŸÜ ÿ•ÿ≤ŸäŸÜŸá' }, priceDelta: 0 },
                            { id: 'm4', name: 'Ka≈üar', translations: { tr: 'Ka≈üar', en: 'Kashar', de: 'Kasar', ru: '–ö–∞—à–∞—Ä', fr: 'Kashar', ar: 'ŸÉÿßÿ¥ÿßÿ±' }, priceDelta: 0 },
                            { id: 'm5', name: 'Salam', translations: { tr: 'Salam', en: 'Salami', de: 'Salami', ru: '–°–∞–ª—è–º–∏', fr: 'Salami', ar: 'ÿ≥ÿßŸÑŸÖŸâ' }, priceDelta: 0 },
                            { id: 'm6', name: 'Jambon', translations: { tr: 'Jambon', en: 'Ham', de: 'Schinken', ru: '–í–µ—Ç—á–∏–Ω–∞', fr: 'Jambon', ar: 'ŸÑÿ≠ŸÖ' }, priceDelta: 0 }
                        ]
                    },
                    {
                        type: 'checkbox',
                        name: 'Yan √úr√ºnler (4 se√ßim)',
                        translations: { tr: 'Yan √úr√ºnler (4 se√ßim)', en: 'Side Products (choose 4)', de: 'Beilagen (4 w√§hlen)', ru: '–ì–∞—Ä–Ω–∏—Ä—ã (–≤—ã–±—Ä–∞—Ç—å 4)', fr: 'Accompagnements (choisir 4)', ar: 'ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿßŸÑÿ¨ÿßŸÜÿ®Ÿäÿ© (4 ÿßÿÆÿ™Ÿäÿßÿ±ÿßÿ™)' },
                        options: [
                            { id: 'y1', name: 'Siyah Zeytin', translations: { tr: 'Siyah Zeytin', en: 'Black Olive', de: 'Schwarze Olive', ru: '–ß—ë—Ä–Ω–∞—è –æ–ª–∏–≤–∫–∞', fr: 'Olive noire', ar: 'ÿ≤Ÿäÿ™ŸàŸÜ ÿ£ÿ≥ŸàÿØ' }, priceDelta: 0 },
                            { id: 'y2', name: 'Mƒ±sƒ±r', translations: { tr: 'Mƒ±sƒ±r', en: 'Corn', de: 'Mais', ru: '–ö—É–∫—É—Ä—É–∑–∞', fr: 'Ma√Øs', ar: 'ÿ∞ÿ±ÿ©' }, priceDelta: 0 },
                            { id: 'y3', name: 'Domates', translations: { tr: 'Domates', en: 'Tomato', de: 'Tomate', ru: '–ü–æ–º–∏–¥–æ—Ä', fr: 'Tomate', ar: 'ÿ∑ŸÖÿßÿ∑ŸÖ' }, priceDelta: 0 },
                            { id: 'y4', name: 'Tur≈üu', translations: { tr: 'Tur≈üu', en: 'Pickles', de: 'Essiggurke', ru: '–ú–∞—Ä–∏–Ω–∞–¥', fr: 'Cornichon', ar: 'ŸÖÿÆŸÑŸÑ' }, priceDelta: 0 },
                            { id: 'y5', name: 'Jalepeno Biber', translations: { tr: 'Jalepeno Biber', en: 'Jalape√±o', de: 'Jalape√±o', ru: '–•–∞–ª–∞–ø–µ–Ω—å–æ', fr: 'Jalape√±o', ar: 'ŸáÿßŸÑÿ®ŸäŸÜŸà' }, priceDelta: 0 },
                            { id: 'y6', name: 'Ye≈üil Biber', translations: { tr: 'Ye≈üil Biber', en: 'Green Pepper', de: 'Gr√ºne Paprika', ru: '–ó–µ–ª—ë–Ω—ã–π –ø–µ—Ä–µ—Ü', fr: 'Poivron vert', ar: 'ŸÅŸÑŸÅŸÑ ÿ£ÿÆÿ∂ÿ±' }, priceDelta: 0 },
                            { id: 'y7', name: 'Rus Salatasƒ±', translations: { tr: 'Rus Salatasƒ±', en: 'Russian Salad', de: 'Russischer Salat', ru: '–û–ª–∏–≤—å–µ', fr: 'Salade Russe', ar: 'ÿ≥ŸÑÿ∑ÿ© ÿ±Ÿàÿ≥Ÿäÿ©' }, priceDelta: 0 }
                        ]
                    }
                ]
            },
            // (ss2-ss8) kaldƒ±rƒ±ldƒ±: Soƒüuk Sandvi√ß tek √ºr√ºn olarak g√∂sterilecek
            
            
            
            
            
            
            {
                id: 'ekmek-arasi-kasarli-kofte',
                category: 'kofte-spesiyel',
                price: 140,
                image: './images/kasarli-kofte.jpg',
                translations: {
                    tr: { name: 'Ekmek Arasƒ± Ka≈üarlƒ± K√∂fte', description: 'Ekmek Arasƒ± Ka≈üarlƒ± K√∂fte' },
                    en: { name: 'Bread with Cheesy Meatball', description: 'Bread with Cheesy Meatball' },
                    de: { name: 'Brot mit K√§se-Fleischb√§llchen', description: 'Brot mit K√§se-Fleischb√§llchen' },
                    ru: { name: '–•–ª–µ–± —Å —Å—ã—Ä–Ω—ã–º–∏ —Ñ—Ä–∏–∫–∞–¥–µ–ª—å–∫–∞–º–∏', description: '–•–ª–µ–± —Å —Å—ã—Ä–Ω—ã–º–∏ —Ñ—Ä–∏–∫–∞–¥–µ–ª—å–∫–∞–º–∏' },
                    fr: { name: 'Pain aux Boulettes au Fromage', description: 'Pain aux Boulettes au Fromage' },
                    ar: { name: 'ÿÆÿ®ÿ≤ ŸÖÿπ ŸÉŸÅÿ™ÿ© ÿ®ÿßŸÑÿ¨ÿ®ŸÜ', description: 'ÿÆÿ®ÿ≤ ŸÖÿπ ŸÉŸÅÿ™ÿ© ÿ®ÿßŸÑÿ¨ÿ®ŸÜ' }
                },
                ingredients: ['K√∂fte', 'Ka≈üar Peyniri', 'Ekmek', 'Soƒüan'],
                extras: []
            },
            // Makarnalar kategorisi - JSON'dan g√∂m√ºl√º veriler
            {
                id: 'm1',
                category: 'makarnalar',
                price: 150,
                image: this.getAutoImagePath('m1', 'Arabiata', 'Makarnalar'),
                translations: {
                    tr: { name: 'Arabiata', description: 'Arabiata Makarna' },
                    en: { name: 'Arrabbiata', description: 'Arrabbiata Pasta' },
                    de: { name: 'Arrabbiata', description: 'Arrabbiata Pasta' },
                    ru: { name: '–ê—Ä—Ä–∞–±–∏–∞—Ç–∞', description: '–ü–∞—Å—Ç–∞ –ê—Ä—Ä–∞–±–∏–∞—Ç–∞' },
                    fr: { name: 'Arrabbiata', description: 'P√¢tes Arrabbiata' },
                    ar: { name: 'ÿ£ÿ±ÿßÿ®Ÿäÿßÿ™ÿß', description: 'ŸÖÿπŸÉÿ±ŸàŸÜÿ© ÿ£ÿ±ÿßÿ®Ÿäÿßÿ™ÿß' }
                },
                ingredients: ['Makarna', 'Domates Sosu', 'Sarƒ±msak', 'Biber'],
                extras: []
            },
            {
                id: 'm2',
                category: 'makarnalar',
                price: 180,
                image: this.getAutoImagePath('m2', 'T√ºrk Usul√º 4 Peynirli', 'Makarnalar'),
                translations: {
                    tr: { name: 'T√ºrk Usul√º 4 Peynirli', description: 'T√ºrk Usul√º 4 Peynirli Makarna' },
                    en: { name: 'Turkish Style 4 Cheese', description: 'Turkish Style 4 Cheese Pasta' },
                    de: { name: 'T√ºrkischer Stil 4 K√§se', description: 'T√ºrkischer Stil 4 K√§se Pasta' },
                    ru: { name: '–¢—É—Ä–µ—Ü–∫–∏–π —Å—Ç–∏–ª—å 4 —Å—ã—Ä–∞', description: '–ü–∞—Å—Ç–∞ —Ç—É—Ä–µ—Ü–∫–∏–π —Å—Ç–∏–ª—å 4 —Å—ã—Ä–∞' },
                    fr: { name: 'Style Turc 4 Fromages', description: 'P√¢tes Style Turc 4 Fromages' },
                    ar: { name: 'ÿ£ÿ≥ŸÑŸàÿ® ÿ™ÿ±ŸÉŸä 4 ÿ£ÿ¨ÿ®ÿßŸÜ', description: 'ŸÖÿπŸÉÿ±ŸàŸÜÿ© ÿ£ÿ≥ŸÑŸàÿ® ÿ™ÿ±ŸÉŸä 4 ÿ£ÿ¨ÿ®ÿßŸÜ' }
                },
                ingredients: ['Makarna', '4 √áe≈üit Peynir', 'Krema', 'Baharat'],
                extras: []
            },
            {
                id: 'm3',
                category: 'makarnalar',
                price: 160,
                image: this.getAutoImagePath('m3', 'Bolonez', 'Makarnalar'),
                translations: {
                    tr: { name: 'Bolonez', description: 'Bolonez Makarna' },
                    en: { name: 'Bolognese', description: 'Bolognese Pasta' },
                    de: { name: 'Bolognese', description: 'Bolognese Pasta' },
                    ru: { name: '–ë–æ–ª–æ–Ω—å–µ–∑–µ', description: '–ü–∞—Å—Ç–∞ –ë–æ–ª–æ–Ω—å–µ–∑–µ' },
                    fr: { name: 'Bolognaise', description: 'P√¢tes Bolognaise' },
                    ar: { name: 'ÿ®ŸàŸÑŸàŸÜŸäÿ≤', description: 'ŸÖÿπŸÉÿ±ŸàŸÜÿ© ÿ®ŸàŸÑŸàŸÜŸäÿ≤' }
                },
                ingredients: ['Makarna', 'Dana Kƒ±yma', 'Domates Sosu', 'Soƒüan', 'Sarƒ±msak'],
                extras: []
            },
            {
                id: 'm4',
                category: 'makarnalar',
                price: 170,
                image: this.getAutoImagePath('m4', 'Alfredo', 'Makarnalar'),
                translations: {
                    tr: { name: 'Alfredo', description: 'Alfredo Makarna' },
                    en: { name: 'Alfredo', description: 'Alfredo Pasta' },
                    de: { name: 'Alfredo', description: 'Alfredo Pasta' },
                    ru: { name: '–ê–ª—å—Ñ—Ä–µ–¥–æ', description: '–ü–∞—Å—Ç–∞ –ê–ª—å—Ñ—Ä–µ–¥–æ' },
                    fr: { name: 'Alfredo', description: 'P√¢tes Alfredo' },
                    ar: { name: 'ÿ£ŸÑŸÅÿ±ŸäÿØŸà', description: 'ŸÖÿπŸÉÿ±ŸàŸÜÿ© ÿ£ŸÑŸÅÿ±ŸäÿØŸà' }
                },
                ingredients: ['Makarna', 'Krema', 'Parmesan Peyniri', 'Sarƒ±msak'],
                extras: []
            },
            {
                id: 'm5',
                category: 'makarnalar',
                price: 140,
                image: this.getAutoImagePath('m5', 'Pesto', 'Makarnalar'),
                translations: {
                    tr: { name: 'Pesto', description: 'Pesto Makarna' },
                    en: { name: 'Pesto', description: 'Pesto Pasta' },
                    de: { name: 'Pesto', description: 'Pesto Pasta' },
                    ru: { name: '–ü–µ—Å—Ç–æ', description: '–ü–∞—Å—Ç–∞ –ü–µ—Å—Ç–æ' },
                    fr: { name: 'Pesto', description: 'P√¢tes Pesto' },
                    ar: { name: 'ÿ®Ÿäÿ≥ÿ™Ÿà', description: 'ŸÖÿπŸÉÿ±ŸàŸÜÿ© ÿ®Ÿäÿ≥ÿ™Ÿà' }
                },
                ingredients: ['Makarna', 'Pesto Sosu', 'Fesleƒüen', 'Parmesan Peyniri'],
                extras: []
            },
            {
                id: 'm6',
                category: 'makarnalar',
                price: 200,
                image: this.getAutoImagePath('m6', 'Ton Balƒ±klƒ±', 'Makarnalar'),
                translations: {
                    tr: { name: 'Ton Balƒ±klƒ±', description: 'Ton Balƒ±klƒ± Makarna' },
                    en: { name: 'Tuna', description: 'Tuna Pasta' },
                    de: { name: 'Thunfisch', description: 'Thunfisch Pasta' },
                    ru: { name: '–° —Ç—É–Ω—Ü–æ–º', description: '–ü–∞—Å—Ç–∞ —Å —Ç—É–Ω—Ü–æ–º' },
                    fr: { name: 'Au Thon', description: 'P√¢tes au Thon' },
                    ar: { name: 'ÿ®ÿßŸÑÿ™ŸàŸÜÿ©', description: 'ŸÖÿπŸÉÿ±ŸàŸÜÿ© ÿ®ÿßŸÑÿ™ŸàŸÜÿ©' }
                },
                ingredients: ['Makarna', 'Ton Balƒ±ƒüƒ±', 'Domates', 'Soƒüan', 'Sarƒ±msak'],
                extras: []
            },
            {
                id: 'm7',
                category: 'makarnalar',
                price: 180,
                image: this.getAutoImagePath('m7', 'Napoliten', 'Makarnalar'),
                translations: {
                    tr: { name: 'Napoliten', description: 'Napoliten Makarna' },
                    en: { name: 'Neapolitan', description: 'Neapolitan Pasta' },
                    de: { name: 'Neapolitanisch', description: 'Neapolitanische Pasta' },
                    ru: { name: '–ù–µ–∞–ø–æ–ª–∏—Ç–∞–Ω—Å–∫–∏–π', description: '–ù–µ–∞–ø–æ–ª–∏—Ç–∞–Ω—Å–∫–∞—è –ø–∞—Å—Ç–∞' },
                    fr: { name: 'N√©apolitain', description: 'P√¢tes N√©apolitaines' },
                    ar: { name: 'ŸÜÿßÿ®ŸàŸÑŸä', description: 'ŸÖÿπŸÉÿ±ŸàŸÜÿ© ŸÜÿßÿ®ŸàŸÑŸä' }
                },
                ingredients: ['Makarna', 'Domates Sosu', 'Mozzarella', 'Fesleƒüen'],
                extras: []
            },
            {
                id: 'm8',
                category: 'makarnalar',
                price: 120,
                image: this.getAutoImagePath('m8', 'Mantƒ±', 'Makarnalar'),
                translations: {
                    tr: { name: 'Mantƒ±', description: 'Mantƒ±' },
                    en: { name: 'Manti', description: 'Manti' },
                    de: { name: 'Manti', description: 'Manti' },
                    ru: { name: '–ú–∞–Ω—Ç—ã', description: '–ú–∞–Ω—Ç—ã' },
                    fr: { name: 'Manti', description: 'Manti' },
                    ar: { name: 'ŸÖÿßŸÜÿ™Ÿä', description: 'ŸÖÿßŸÜÿ™Ÿä' }
                },
                ingredients: ['Hamur', 'Dana Kƒ±yma', 'Soƒüan', 'Yoƒüurt', 'Sarƒ±msak'],
                extras: []
            },
            {
                id: 'arabiata',
                category: 'makarnalar',
                price: 150,
                image: './images/arabiata.jpg',
                translations: {
                    tr: { name: 'Arabiata', description: 'Arabiata Makarna' },
                    en: { name: 'Arrabbiata', description: 'Arrabbiata Pasta' },
                    de: { name: 'Arrabbiata', description: 'Arrabbiata Pasta' },
                    ru: { name: '–ê—Ä—Ä–∞–±–∏–∞—Ç–∞', description: '–ü–∞—Å—Ç–∞ –ê—Ä—Ä–∞–±–∏–∞—Ç–∞' },
                    fr: { name: 'Arrabbiata', description: 'P√¢tes Arrabbiata' },
                    ar: { name: 'ÿ£ÿ±ÿßÿ®Ÿäÿßÿ™ÿß', description: 'ŸÖÿπŸÉÿ±ŸàŸÜÿ© ÿ£ÿ±ÿßÿ®Ÿäÿßÿ™ÿß' }
                },
                ingredients: ['Makarna', 'Domates Sosu', 'Sarƒ±msak', 'Biber'],
                extras: []
            },
            {
                id: 'turk-usulu-4-peynirli',
                category: 'makarnalar',
                price: 180,
                image: './images/turkusulu.jpg',
                translations: {
                    tr: { name: 'T√ºrk Usul√º 4 Peynirli', description: 'T√ºrk Usul√º 4 Peynirli Makarna' },
                    en: { name: 'Turkish Style 4 Cheese', description: 'Turkish Style 4 Cheese Pasta' },
                    de: { name: 'T√ºrkischer Stil 4 K√§se', description: 'T√ºrkischer Stil 4 K√§se Pasta' },
                    ru: { name: '–¢—É—Ä–µ—Ü–∫–∏–π —Å—Ç–∏–ª—å 4 —Å—ã—Ä–∞', description: '–ü–∞—Å—Ç–∞ —Ç—É—Ä–µ—Ü–∫–∏–π —Å—Ç–∏–ª—å 4 —Å—ã—Ä–∞' },
                    fr: { name: 'Style Turc 4 Fromages', description: 'P√¢tes Style Turc 4 Fromages' },
                    ar: { name: 'ÿ£ÿ≥ŸÑŸàÿ® ÿ™ÿ±ŸÉŸä 4 ÿ£ÿ¨ÿ®ÿßŸÜ', description: 'ŸÖÿπŸÉÿ±ŸàŸÜÿ© ÿ£ÿ≥ŸÑŸàÿ® ÿ™ÿ±ŸÉŸä 4 ÿ£ÿ¨ÿ®ÿßŸÜ' }
                },
                ingredients: ['Makarna', '4 √áe≈üit Peynir', 'Krema', 'Baharat'],
                extras: []
            },
            // Pizzalar kategorisi - JSON'dan g√∂m√ºl√º veriler (devam)
            {
                id: 'p4',
                category: 'pizzalar',
                price: 300,
                image: './pic/Pizzalar/4-peynirli-yicem.jpg',
                translations: {
                    tr: { name: '4 Peynirli Yicem', description: 'Mozarella Peyniri, Ezine Peyniri, Taze Ka≈üar, Bergama Tulumu, Pizza Sosu, Fesleƒüen, Cherry Domates' },
                    en: { name: '4 Cheese Yicem', description: '4 Cheese Yicem Pizza' },
                    de: { name: '4 K√§se Yicem', description: '4 K√§se Yicem Pizza' },
                    ru: { name: '–ô–∏—Ü–µ–º 4 —Å—ã—Ä–∞', description: '–ü–∏—Ü—Ü–∞ –ô–∏—Ü–µ–º 4 —Å—ã—Ä–∞' },
                    fr: { name: 'Yicem 4 Fromages', description: 'Pizza Yicem 4 Fromages' },
                    ar: { name: 'Ÿäÿ¨ŸÖ 4 ÿ£ÿ¨ÿ®ÿßŸÜ', description: 'ÿ®Ÿäÿ™ÿ≤ÿß Ÿäÿ¨ŸÖ 4 ÿ£ÿ¨ÿ®ÿßŸÜ' }
                },
                ingredients: ['Pizza Sosu', '4 √áe≈üit Peynir', 'Fesleƒüen'],
                extras: [
                    {
                        type: 'radio',
                        name: 'Boyut',
                        translations: { tr: 'Boyut', en: 'Size', de: 'Gr√∂√üe', ru: '–†–∞–∑–º–µ—Ä', fr: 'Taille', ar: 'ÿßŸÑÿ≠ÿ¨ŸÖ' },
                        options: [
                            { id: 'o13', name: 'Small (1 Ki≈üilik)', translations: { tr: 'Small (1 Ki≈üilik)', en: 'Small (1 Person)', de: 'Klein (1 Person)', ru: '–ú–∞–ª–µ–Ω—å–∫–∞—è (1 —á–µ–ª–æ–≤–µ–∫)', fr: 'Petit (1 personne)', ar: 'ÿµÿ∫Ÿäÿ± (ÿ¥ÿÆÿµ Ÿàÿßÿ≠ÿØ)' }, priceDelta: 0 },
                            { id: 'o14', name: 'Medium (1-2 Ki≈üilik)', translations: { tr: 'Medium (1-2 Ki≈üilik)', en: 'Medium (1-2 People)', de: 'Mittel (1-2 Personen)', ru: '–°—Ä–µ–¥–Ω—è—è (1-2 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Moyen (1-2 personnes)', ar: 'ŸÖÿ™Ÿàÿ≥ÿ∑ (1-2 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 60 },
                            { id: 'o15', name: 'Large (2-3 Ki≈üilik)', translations: { tr: 'Large (2-3 Ki≈üilik)', en: 'Large (2-3 People)', de: 'Gro√ü (2-3 Personen)', ru: '–ë–æ–ª—å—à–∞—è (2-3 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Grand (2-3 personnes)', ar: 'ŸÉÿ®Ÿäÿ± (2-3 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 120 },
                            { id: 'o16', name: 'XLarge (3-4 Ki≈üilik)', translations: { tr: 'XLarge (3-4 Ki≈üilik)', en: 'XLarge (3-4 People)', de: 'Extra Gro√ü (3-4 Personen)', ru: '–û—á–µ–Ω—å –±–æ–ª—å—à–∞—è (3-4 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Tr√®s grand (3-4 personnes)', ar: 'ŸÉÿ®Ÿäÿ± ÿ¨ÿØÿßŸã (3-4 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 180 }
                        ]
                    }
                ]
            },
            {
                id: 'p5',
                category: 'pizzalar',
                price: 250,
                image: './pic/Pizzalar/brokoli-yicem.jpg',
                translations: {
                    tr: { name: 'Brokoli & Beyaz Peynirli Yicem', description: 'Pizza Sosu, Brokoli, Beyaz Peynir, Fesleƒüen' },
                    en: { name: 'Broccoli & White Cheese Yicem', description: 'Pizza Sauce, Broccoli, White Cheese, Basil' },
                    de: { name: 'Brokkoli Yicem', description: 'Brokkoli Yicem Pizza' },
                    ru: { name: '–ô–∏—Ü–µ–º —Å –±—Ä–æ–∫–∫–æ–ª–∏', description: '–ü–∏—Ü—Ü–∞ –ô–∏—Ü–µ–º —Å –±—Ä–æ–∫–∫–æ–ª–∏' },
                    fr: { name: 'Yicem aux Brocolis', description: 'Pizza Yicem aux Brocolis' },
                    ar: { name: 'Ÿäÿ¨ŸÖ ÿ®ÿßŸÑÿ®ÿ±ŸàŸÉŸÑŸä', description: 'ÿ®Ÿäÿ™ÿ≤ÿß Ÿäÿ¨ŸÖ ÿ®ÿßŸÑÿ®ÿ±ŸàŸÉŸÑŸä' }
                },
                ingredients: ['Pizza Sosu', 'Brokoli', 'Peynir', 'Fesleƒüen'],
                extras: [
                    {
                        type: 'radio',
                        name: 'Boyut',
                        translations: { tr: 'Boyut', en: 'Size', de: 'Gr√∂√üe', ru: '–†–∞–∑–º–µ—Ä', fr: 'Taille', ar: 'ÿßŸÑÿ≠ÿ¨ŸÖ' },
                        options: [
                            { id: 'o17', name: 'Small (1 Ki≈üilik)', translations: { tr: 'Small (1 Ki≈üilik)', en: 'Small (1 Person)', de: 'Klein (1 Person)', ru: '–ú–∞–ª–µ–Ω—å–∫–∞—è (1 —á–µ–ª–æ–≤–µ–∫)', fr: 'Petit (1 personne)', ar: 'ÿµÿ∫Ÿäÿ± (ÿ¥ÿÆÿµ Ÿàÿßÿ≠ÿØ)' }, priceDelta: 0 },
                            { id: 'o18', name: 'Medium (1-2 Ki≈üilik)', translations: { tr: 'Medium (1-2 Ki≈üilik)', en: 'Medium (1-2 People)', de: 'Mittel (1-2 Personen)', ru: '–°—Ä–µ–¥–Ω—è—è (1-2 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Moyen (1-2 personnes)', ar: 'ŸÖÿ™Ÿàÿ≥ÿ∑ (1-2 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 60 },
                            { id: 'o19', name: 'Large (2-3 Ki≈üilik)', translations: { tr: 'Large (2-3 Ki≈üilik)', en: 'Large (2-3 People)', de: 'Gro√ü (2-3 Personen)', ru: '–ë–æ–ª—å—à–∞—è (2-3 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Grand (2-3 personnes)', ar: 'ŸÉÿ®Ÿäÿ± (2-3 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 120 },
                            { id: 'o20', name: 'XLarge (3-4 Ki≈üilik)', translations: { tr: 'XLarge (3-4 Ki≈üilik)', en: 'XLarge (3-4 People)', de: 'Extra Gro√ü (3-4 Personen)', ru: '–û—á–µ–Ω—å –±–æ–ª—å—à–∞—è (3-4 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Tr√®s grand (3-4 personnes)', ar: 'ŸÉÿ®Ÿäÿ± ÿ¨ÿØÿßŸã (3-4 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 180 }
                        ]
                    }
                ]
            },
            {
                id: 'p6',
                category: 'pizzalar',
                price: 240,
                image: './pic/Pizzalar/diavola-yicem.jpg',
                translations: {
                    tr: { name: 'Diavola Yicem', description: 'Diavola Yicem Pizza' },
                    en: { name: 'Diavola Yicem', description: 'Diavola Yicem Pizza' },
                    de: { name: 'Diavola Yicem', description: 'Diavola Yicem Pizza' },
                    ru: { name: '–ô–∏—Ü–µ–º –î–∏–∞–≤–æ–ª–∞', description: '–ü–∏—Ü—Ü–∞ –ô–∏—Ü–µ–º –î–∏–∞–≤–æ–ª–∞' },
                    fr: { name: 'Yicem Diavola', description: 'Pizza Yicem Diavola' },
                    ar: { name: 'Ÿäÿ¨ŸÖ ÿØŸäÿßŸÅŸàŸÑÿß', description: 'ÿ®Ÿäÿ™ÿ≤ÿß Ÿäÿ¨ŸÖ ÿØŸäÿßŸÅŸàŸÑÿß' }
                },
                ingredients: ['Pizza Sosu', 'Sucuk', 'Biber', 'Sarƒ±msak', 'Acƒ± Sos'],
                extras: [
                    {
                        type: 'radio',
                        name: 'Boyut',
                        translations: { tr: 'Boyut', en: 'Size', de: 'Gr√∂√üe', ru: '–†–∞–∑–º–µ—Ä', fr: 'Taille', ar: 'ÿßŸÑÿ≠ÿ¨ŸÖ' },
                        options: [
                            { id: 'o21', name: 'Small (1 Ki≈üilik)', translations: { tr: 'Small (1 Ki≈üilik)', en: 'Small (1 Person)', de: 'Klein (1 Person)', ru: '–ú–∞–ª–µ–Ω—å–∫–∞—è (1 —á–µ–ª–æ–≤–µ–∫)', fr: 'Petit (1 personne)', ar: 'ÿµÿ∫Ÿäÿ± (ÿ¥ÿÆÿµ Ÿàÿßÿ≠ÿØ)' }, priceDelta: 0 },
                            { id: 'o22', name: 'Medium (1-2 Ki≈üilik)', translations: { tr: 'Medium (1-2 Ki≈üilik)', en: 'Medium (1-2 People)', de: 'Mittel (1-2 Personen)', ru: '–°—Ä–µ–¥–Ω—è—è (1-2 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Moyen (1-2 personnes)', ar: 'ŸÖÿ™Ÿàÿ≥ÿ∑ (1-2 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 60 },
                            { id: 'o23', name: 'Large (2-3 Ki≈üilik)', translations: { tr: 'Large (2-3 Ki≈üilik)', en: 'Large (2-3 People)', de: 'Gro√ü (2-3 Personen)', ru: '–ë–æ–ª—å—à–∞—è (2-3 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Grand (2-3 personnes)', ar: 'ŸÉÿ®Ÿäÿ± (2-3 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 120 },
                            { id: 'o24', name: 'XLarge (3-4 Ki≈üilik)', translations: { tr: 'XLarge (3-4 Ki≈üilik)', en: 'XLarge (3-4 People)', de: 'Extra Gro√ü (3-4 Personen)', ru: '–û—á–µ–Ω—å –±–æ–ª—å—à–∞—è (3-4 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Tr√®s grand (3-4 personnes)', ar: 'ŸÉÿ®Ÿäÿ± ÿ¨ÿØÿßŸã (3-4 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 180 }
                        ]
                    }
                ]
            },
            {
                id: 'p7',
                category: 'pizzalar',
                price: 250,
                image: './pic/Pizzalar/ƒ±spanak-tulum-yicem.jpg',
                translations: {
                    tr: { name: 'Ispanak Tulum Yicem', description: 'Ispanak Tulum Yicem Pizza' },
                    en: { name: 'Spinach Tulum Yicem', description: 'Spinach Tulum Yicem Pizza' },
                    de: { name: 'Spinat Tulum Yicem', description: 'Spinat Tulum Yicem Pizza' },
                    ru: { name: '–ô–∏—Ü–µ–º —Å–æ —à–ø–∏–Ω–∞—Ç–æ–º –∏ —Ç—É–ª—É–º–æ–º', description: '–ü–∏—Ü—Ü–∞ –ô–∏—Ü–µ–º —Å–æ —à–ø–∏–Ω–∞—Ç–æ–º –∏ —Ç—É–ª—É–º–æ–º' },
                    fr: { name: 'Yicem aux √âpinards et Tulum', description: 'Pizza Yicem aux √âpinards et Tulum' },
                    ar: { name: 'Ÿäÿ¨ŸÖ ÿ®ÿßŸÑÿ≥ÿ®ÿßŸÜÿÆ ŸàÿßŸÑÿ™ŸàŸÑŸàŸÖ', description: 'ÿ®Ÿäÿ™ÿ≤ÿß Ÿäÿ¨ŸÖ ÿ®ÿßŸÑÿ≥ÿ®ÿßŸÜÿÆ ŸàÿßŸÑÿ™ŸàŸÑŸàŸÖ' }
                },
                ingredients: ['Pizza Sosu', 'Ispanak', 'Tulum Peyniri', 'Fesleƒüen'],
                extras: [
                    {
                        type: 'radio',
                        name: 'Boyut',
                        translations: { tr: 'Boyut', en: 'Size', de: 'Gr√∂√üe', ru: '–†–∞–∑–º–µ—Ä', fr: 'Taille', ar: 'ÿßŸÑÿ≠ÿ¨ŸÖ' },
                        options: [
                            { id: 'o25', name: 'Small (1 Ki≈üilik)', translations: { tr: 'Small (1 Ki≈üilik)', en: 'Small (1 Person)', de: 'Klein (1 Person)', ru: '–ú–∞–ª–µ–Ω—å–∫–∞—è (1 —á–µ–ª–æ–≤–µ–∫)', fr: 'Petit (1 personne)', ar: 'ÿµÿ∫Ÿäÿ± (ÿ¥ÿÆÿµ Ÿàÿßÿ≠ÿØ)' }, priceDelta: 0 },
                            { id: 'o26', name: 'Medium (1-2 Ki≈üilik)', translations: { tr: 'Medium (1-2 Ki≈üilik)', en: 'Medium (1-2 People)', de: 'Mittel (1-2 Personen)', ru: '–°—Ä–µ–¥–Ω—è—è (1-2 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Moyen (1-2 personnes)', ar: 'ŸÖÿ™Ÿàÿ≥ÿ∑ (1-2 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 60 },
                            { id: 'o27', name: 'Large (2-3 Ki≈üilik)', translations: { tr: 'Large (2-3 Ki≈üilik)', en: 'Large (2-3 People)', de: 'Gro√ü (2-3 Personen)', ru: '–ë–æ–ª—å—à–∞—è (2-3 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Grand (2-3 personnes)', ar: 'ŸÉÿ®Ÿäÿ± (2-3 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 120 },
                            { id: 'o28', name: 'XLarge (3-4 Ki≈üilik)', translations: { tr: 'XLarge (3-4 Ki≈üilik)', en: 'XLarge (3-4 People)', de: 'Extra Gro√ü (3-4 Personen)', ru: '–û—á–µ–Ω—å –±–æ–ª—å—à–∞—è (3-4 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Tr√®s grand (3-4 personnes)', ar: 'ŸÉÿ®Ÿäÿ± ÿ¨ÿØÿßŸã (3-4 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 180 }
                        ]
                    }
                ]
            },
            {
                id: 'p8',
                category: 'pizzalar',
                price: 190,
                image: './pic/Pizzalar/klasik-yicem.jpg',
                translations: {
                    tr: { name: 'Klasik Vejeteryan', description: 'Klasik Yicem Pizza' },
                    en: { name: 'Classic Yicem', description: 'Classic Yicem Pizza' },
                    de: { name: 'Klassischer Yicem', description: 'Klassischer Yicem Pizza' },
                    ru: { name: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ô–∏—Ü–µ–º', description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ø–∏—Ü—Ü–∞ –ô–∏—Ü–µ–º' },
                    fr: { name: 'Yicem Classique', description: 'Pizza Yicem Classique' },
                    ar: { name: 'Ÿäÿ¨ŸÖ ŸÉŸÑÿßÿ≥ŸäŸÉŸä', description: 'ÿ®Ÿäÿ™ÿ≤ÿß Ÿäÿ¨ŸÖ ŸÉŸÑÿßÿ≥ŸäŸÉŸä' }
                },
                ingredients: ['Pizza Sosu', 'Mozzarella', 'Fesleƒüen', 'Cherry Domates'],
                extras: [
                    {
                        type: 'radio',
                        name: 'Boyut',
                        translations: { tr: 'Boyut', en: 'Size', de: 'Gr√∂√üe', ru: '–†–∞–∑–º–µ—Ä', fr: 'Taille', ar: 'ÿßŸÑÿ≠ÿ¨ŸÖ' },
                        options: [
                            { id: 'o29', name: 'Small (1 Ki≈üilik)', translations: { tr: 'Small (1 Ki≈üilik)', en: 'Small (1 Person)', de: 'Klein (1 Person)', ru: '–ú–∞–ª–µ–Ω—å–∫–∞—è (1 —á–µ–ª–æ–≤–µ–∫)', fr: 'Petit (1 personne)', ar: 'ÿµÿ∫Ÿäÿ± (ÿ¥ÿÆÿµ Ÿàÿßÿ≠ÿØ)' }, priceDelta: 0 },
                            { id: 'o30', name: 'Medium (1-2 Ki≈üilik)', translations: { tr: 'Medium (1-2 Ki≈üilik)', en: 'Medium (1-2 People)', de: 'Mittel (1-2 Personen)', ru: '–°—Ä–µ–¥–Ω—è—è (1-2 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Moyen (1-2 personnes)', ar: 'ŸÖÿ™Ÿàÿ≥ÿ∑ (1-2 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 60 },
                            { id: 'o31', name: 'Large (2-3 Ki≈üilik)', translations: { tr: 'Large (2-3 Ki≈üilik)', en: 'Large (2-3 People)', de: 'Gro√ü (2-3 Personen)', ru: '–ë–æ–ª—å—à–∞—è (2-3 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Grand (2-3 personnes)', ar: 'ŸÉÿ®Ÿäÿ± (2-3 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 120 },
                            { id: 'o32', name: 'XLarge (3-4 Ki≈üilik)', translations: { tr: 'XLarge (3-4 Ki≈üilik)', en: 'XLarge (3-4 People)', de: 'Extra Gro√ü (3-4 Personen)', ru: '–û—á–µ–Ω—å –±–æ–ª—å—à–∞—è (3-4 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Tr√®s grand (3-4 personnes)', ar: 'ŸÉÿ®Ÿäÿ± ÿ¨ÿØÿßŸã (3-4 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 180 }
                        ]
                    }
                ]
            },
            {
                id: 'p9',
                category: 'pizzalar',
                price: 240,
                image: './pic/Pizzalar/sosisli-yicem.jpg',
                translations: {
                    tr: { name: 'Sosisli Yicem', description: 'Sosisli Yicem Pizza' },
                    en: { name: 'Sausage Yicem', description: 'Sausage Yicem Pizza' },
                    de: { name: 'Wurst Yicem', description: 'Wurst Yicem Pizza' },
                    ru: { name: '–ô–∏—Ü–µ–º —Å –∫–æ–ª–±–∞—Å–æ–π', description: '–ü–∏—Ü—Ü–∞ –ô–∏—Ü–µ–º —Å –∫–æ–ª–±–∞—Å–æ–π' },
                    fr: { name: 'Yicem aux Saucisses', description: 'Pizza Yicem aux Saucisses' },
                    ar: { name: 'Ÿäÿ¨ŸÖ ÿ®ÿßŸÑÿ≥ÿ¨ŸÇ', description: 'ÿ®Ÿäÿ™ÿ≤ÿß Ÿäÿ¨ŸÖ ÿ®ÿßŸÑÿ≥ÿ¨ŸÇ' }
                },
                ingredients: ['Pizza Sosu', 'Sosis', 'Peynir', 'Mantar', 'Zeytin'],
                extras: [
                    {
                        type: 'radio',
                        name: 'Boyut',
                        translations: { tr: 'Boyut', en: 'Size', de: 'Gr√∂√üe', ru: '–†–∞–∑–º–µ—Ä', fr: 'Taille', ar: 'ÿßŸÑÿ≠ÿ¨ŸÖ' },
                        options: [
                            { id: 'o33', name: 'Small (1 Ki≈üilik)', translations: { tr: 'Small (1 Ki≈üilik)', en: 'Small (1 Person)', de: 'Klein (1 Person)', ru: '–ú–∞–ª–µ–Ω—å–∫–∞—è (1 —á–µ–ª–æ–≤–µ–∫)', fr: 'Petit (1 personne)', ar: 'ÿµÿ∫Ÿäÿ± (ÿ¥ÿÆÿµ Ÿàÿßÿ≠ÿØ)' }, priceDelta: 0 },
                            { id: 'o34', name: 'Medium (1-2 Ki≈üilik)', translations: { tr: 'Medium (1-2 Ki≈üilik)', en: 'Medium (1-2 People)', de: 'Mittel (1-2 Personen)', ru: '–°—Ä–µ–¥–Ω—è—è (1-2 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Moyen (1-2 personnes)', ar: 'ŸÖÿ™Ÿàÿ≥ÿ∑ (1-2 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 60 },
                            { id: 'o35', name: 'Large (2-3 Ki≈üilik)', translations: { tr: 'Large (2-3 Ki≈üilik)', en: 'Large (2-3 People)', de: 'Gro√ü (2-3 Personen)', ru: '–ë–æ–ª—å—à–∞—è (2-3 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Grand (2-3 personnes)', ar: 'ŸÉÿ®Ÿäÿ± (2-3 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 120 },
                            { id: 'o36', name: 'XLarge (3-4 Ki≈üilik)', translations: { tr: 'XLarge (3-4 Ki≈üilik)', en: 'XLarge (3-4 People)', de: 'Extra Gro√ü (3-4 Personen)', ru: '–û—á–µ–Ω—å –±–æ–ª—å—à–∞—è (3-4 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Tr√®s grand (3-4 personnes)', ar: 'ŸÉÿ®Ÿäÿ± ÿ¨ÿØÿßŸã (3-4 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 180 }
                        ]
                    }
                ]
            },
            {
                id: 'p10',
                category: 'pizzalar',
                price: 240,
                image: './pic/Pizzalar/sucuklu-yicem.jpg',
                translations: {
                    tr: { name: 'Sucuklu Yicem', description: 'Sucuklu Yicem Pizza' },
                    en: { name: 'Sausage Yicem', description: 'Sausage Yicem Pizza' },
                    de: { name: 'Wurst Yicem', description: 'Wurst Yicem Pizza' },
                    ru: { name: '–ô–∏—Ü–µ–º —Å —Å—É–¥–∂—É–∫–æ–º', description: '–ü–∏—Ü—Ü–∞ –ô–∏—Ü–µ–º —Å —Å—É–¥–∂—É–∫–æ–º' },
                    fr: { name: 'Yicem aux Saucisses', description: 'Pizza Yicem aux Saucisses' },
                    ar: { name: 'Ÿäÿ¨ŸÖ ÿ®ÿßŸÑÿ≥ÿ¨ŸÇ', description: 'ÿ®Ÿäÿ™ÿ≤ÿß Ÿäÿ¨ŸÖ ÿ®ÿßŸÑÿ≥ÿ¨ŸÇ' }
                },
                ingredients: ['Pizza Sosu', 'Sucuk', 'Peynir', 'Mantar', 'Zeytin'],
                extras: [
                    {
                        type: 'radio',
                        name: 'Boyut',
                        translations: { tr: 'Boyut', en: 'Size', de: 'Gr√∂√üe', ru: '–†–∞–∑–º–µ—Ä', fr: 'Taille', ar: 'ÿßŸÑÿ≠ÿ¨ŸÖ' },
                        options: [
                            { id: 'o37', name: 'Small (1 Ki≈üilik)', translations: { tr: 'Small (1 Ki≈üilik)', en: 'Small (1 Person)', de: 'Klein (1 Person)', ru: '–ú–∞–ª–µ–Ω—å–∫–∞—è (1 —á–µ–ª–æ–≤–µ–∫)', fr: 'Petit (1 personne)', ar: 'ÿµÿ∫Ÿäÿ± (ÿ¥ÿÆÿµ Ÿàÿßÿ≠ÿØ)' }, priceDelta: 0 },
                            { id: 'o38', name: 'Medium (1-2 Ki≈üilik)', translations: { tr: 'Medium (1-2 Ki≈üilik)', en: 'Medium (1-2 People)', de: 'Mittel (1-2 Personen)', ru: '–°—Ä–µ–¥–Ω—è—è (1-2 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Moyen (1-2 personnes)', ar: 'ŸÖÿ™Ÿàÿ≥ÿ∑ (1-2 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 60 },
                            { id: 'o39', name: 'Large (2-3 Ki≈üilik)', translations: { tr: 'Large (2-3 Ki≈üilik)', en: 'Large (2-3 People)', de: 'Gro√ü (2-3 Personen)', ru: '–ë–æ–ª—å—à–∞—è (2-3 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Grand (2-3 personnes)', ar: 'ŸÉÿ®Ÿäÿ± (2-3 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 120 },
                            { id: 'o40', name: 'XLarge (3-4 Ki≈üilik)', translations: { tr: 'XLarge (3-4 Ki≈üilik)', en: 'XLarge (3-4 People)', de: 'Extra Gro√ü (3-4 Personen)', ru: '–û—á–µ–Ω—å –±–æ–ª—å—à–∞—è (3-4 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Tr√®s grand (3-4 personnes)', ar: 'ŸÉÿ®Ÿäÿ± ÿ¨ÿØÿßŸã (3-4 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 180 }
                        ]
                    }
                ]
            },
            {
                id: 'p11',
                category: 'pizzalar',
                price: 240,
                image: './pic/Pizzalar/tavuklu-yicem.jpg',
                translations: {
                    tr: { name: 'Tavuklu Yicem', description: 'Tavuklu Yicem Pizza' },
                    en: { name: 'Chicken Yicem', description: 'Chicken Yicem Pizza' },
                    de: { name: 'H√§hnchen Yicem', description: 'H√§hnchen Yicem Pizza' },
                    ru: { name: '–ô–∏—Ü–µ–º —Å –∫—É—Ä–∏—Ü–µ–π', description: '–ü–∏—Ü—Ü–∞ –ô–∏—Ü–µ–º —Å –∫—É—Ä–∏—Ü–µ–π' },
                    fr: { name: 'Yicem au Poulet', description: 'Pizza Yicem au Poulet' },
                    ar: { name: 'Ÿäÿ¨ŸÖ ÿ®ÿßŸÑÿØÿ¨ÿßÿ¨', description: 'ÿ®Ÿäÿ™ÿ≤ÿß Ÿäÿ¨ŸÖ ÿ®ÿßŸÑÿØÿ¨ÿßÿ¨' }
                },
                ingredients: ['Pizza Sosu', 'Tavuk', 'Peynir', 'Mantar', 'Zeytin'],
                extras: [
                    {
                        type: 'radio',
                        name: 'Boyut',
                        translations: { tr: 'Boyut', en: 'Size', de: 'Gr√∂√üe', ru: '–†–∞–∑–º–µ—Ä', fr: 'Taille', ar: 'ÿßŸÑÿ≠ÿ¨ŸÖ' },
                        options: [
                            { id: 'o41', name: 'Small (1 Ki≈üilik)', translations: { tr: 'Small (1 Ki≈üilik)', en: 'Small (1 Person)', de: 'Klein (1 Person)', ru: '–ú–∞–ª–µ–Ω—å–∫–∞—è (1 —á–µ–ª–æ–≤–µ–∫)', fr: 'Petit (1 personne)', ar: 'ÿµÿ∫Ÿäÿ± (ÿ¥ÿÆÿµ Ÿàÿßÿ≠ÿØ)' }, priceDelta: 0 },
                            { id: 'o42', name: 'Medium (1-2 Ki≈üilik)', translations: { tr: 'Medium (1-2 Ki≈üilik)', en: 'Medium (1-2 People)', de: 'Mittel (1-2 Personen)', ru: '–°—Ä–µ–¥–Ω—è—è (1-2 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Moyen (1-2 personnes)', ar: 'ŸÖÿ™Ÿàÿ≥ÿ∑ (1-2 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 60 },
                            { id: 'o43', name: 'Large (2-3 Ki≈üilik)', translations: { tr: 'Large (2-3 Ki≈üilik)', en: 'Large (2-3 People)', de: 'Gro√ü (2-3 Personen)', ru: '–ë–æ–ª—å—à–∞—è (2-3 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Grand (2-3 personnes)', ar: 'ŸÉÿ®Ÿäÿ± (2-3 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 120 },
                            { id: 'o44', name: 'XLarge (3-4 Ki≈üilik)', translations: { tr: 'XLarge (3-4 Ki≈üilik)', en: 'XLarge (3-4 People)', de: 'Extra Gro√ü (3-4 Personen)', ru: '–û—á–µ–Ω—å –±–æ–ª—å—à–∞—è (3-4 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Tr√®s grand (3-4 personnes)', ar: 'ŸÉÿ®Ÿäÿ± ÿ¨ÿØÿßŸã (3-4 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 180 }
                        ]
                    }
                ]
            },
            {
                id: 'p12',
                category: 'pizzalar',
                price: 260,
                image: './pic/Pizzalar/tonno-yicem.jpg',
                translations: {
                    tr: { name: 'Tonno Yicem', description: 'Tonno Yicem Pizza' },
                    en: { name: 'Tuna Yicem', description: 'Tuna Yicem Pizza' },
                    de: { name: 'Thunfisch Yicem', description: 'Thunfisch Yicem Pizza' },
                    ru: { name: '–ô–∏—Ü–µ–º —Å —Ç—É–Ω—Ü–æ–º', description: '–ü–∏—Ü—Ü–∞ –ô–∏—Ü–µ–º —Å —Ç—É–Ω—Ü–æ–º' },
                    fr: { name: 'Yicem au Thon', description: 'Pizza Yicem au Thon' },
                    ar: { name: 'Ÿäÿ¨ŸÖ ÿ®ÿßŸÑÿ™ŸàŸÜÿ©', description: 'ÿ®Ÿäÿ™ÿ≤ÿß Ÿäÿ¨ŸÖ ÿ®ÿßŸÑÿ™ŸàŸÜÿ©' }
                },
                ingredients: ['Pizza Sosu', 'Ton Balƒ±ƒüƒ±', 'Peynir', 'Soƒüan', 'Zeytin'],
                extras: [
                    {
                        type: 'radio',
                        name: 'Boyut',
                        translations: { tr: 'Boyut', en: 'Size', de: 'Gr√∂√üe', ru: '–†–∞–∑–º–µ—Ä', fr: 'Taille', ar: 'ÿßŸÑÿ≠ÿ¨ŸÖ' },
                        options: [
                            { id: 'o45', name: 'Small (1 Ki≈üilik)', translations: { tr: 'Small (1 Ki≈üilik)', en: 'Small (1 Person)', de: 'Klein (1 Person)', ru: '–ú–∞–ª–µ–Ω—å–∫–∞—è (1 —á–µ–ª–æ–≤–µ–∫)', fr: 'Petit (1 personne)', ar: 'ÿµÿ∫Ÿäÿ± (ÿ¥ÿÆÿµ Ÿàÿßÿ≠ÿØ)' }, priceDelta: 0 },
                            { id: 'o46', name: 'Medium (1-2 Ki≈üilik)', translations: { tr: 'Medium (1-2 Ki≈üilik)', en: 'Medium (1-2 People)', de: 'Mittel (1-2 Personen)', ru: '–°—Ä–µ–¥–Ω—è—è (1-2 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Moyen (1-2 personnes)', ar: 'ŸÖÿ™Ÿàÿ≥ÿ∑ (1-2 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 60 },
                            { id: 'o47', name: 'Large (2-3 Ki≈üilik)', translations: { tr: 'Large (2-3 Ki≈üilik)', en: 'Large (2-3 People)', de: 'Gro√ü (2-3 Personen)', ru: '–ë–æ–ª—å—à–∞—è (2-3 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Grand (2-3 personnes)', ar: 'ŸÉÿ®Ÿäÿ± (2-3 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 120 },
                            { id: 'o48', name: 'XLarge (3-4 Ki≈üilik)', translations: { tr: 'XLarge (3-4 Ki≈üilik)', en: 'XLarge (3-4 People)', de: 'Extra Gro√ü (3-4 Personen)', ru: '–û—á–µ–Ω—å –±–æ–ª—å—à–∞—è (3-4 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Tr√®s grand (3-4 personnes)', ar: 'ŸÉÿ®Ÿäÿ± ÿ¨ÿØÿßŸã (3-4 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 180 }
                        ]
                    }
                ]
            },
            {
                id: 'yicem-donerli',
                category: 'pizzalar',
                price: 300,
                image: './pic/Pizzalar/donerli-yicem.jpg',
                translations: {
                    tr: { name: 'D√∂nerli Yicem', description: 'Yicem D√∂nerli Pizza' },
                    en: { name: 'Donerli Yicem', description: 'Yicem D√∂nerli Pizza' },
                    de: { name: 'Donerli Yicem', description: 'Yicem D√∂nerli Pizza' },
                    ru: { name: '–î—ë–Ω–µ—Ä–ª–∏ –ô–∏—Ü–µ–º', description: '–ü–∏—Ü—Ü–∞ –ô–∏—Ü–µ–º –î—ë–Ω–µ—Ä–ª–∏' },
                    fr: { name: 'Yicem au D√∂ner', description: 'Pizza Yicem au D√∂ner' },
                    ar: { name: 'Ÿäÿ¨ŸÖ ÿØŸàŸÜÿ±ŸÑŸä', description: 'ÿ®Ÿäÿ™ÿ≤ÿß Ÿäÿ¨ŸÖ ÿØŸàŸÜÿ±ŸÑŸä' }
                },
                ingredients: ['D√∂ner', 'Peynir', 'Domates', 'Soƒüan'],
                extras: [
                    {
                        type: 'radio',
                        name: 'Boyut',
                        translations: { tr: 'Boyut', en: 'Size', de: 'Gr√∂√üe', ru: '–†–∞–∑–º–µ—Ä', fr: 'Taille', ar: 'ÿßŸÑÿ≠ÿ¨ŸÖ' },
                        options: [
                            { id: 'o49', name: 'Small (1 Ki≈üilik)', translations: { tr: 'Small (1 Ki≈üilik)', en: 'Small (1 Person)', de: 'Klein (1 Person)', ru: '–ú–∞–ª–µ–Ω—å–∫–∞—è (1 —á–µ–ª–æ–≤–µ–∫)', fr: 'Petit (1 personne)', ar: 'ÿµÿ∫Ÿäÿ± (ÿ¥ÿÆÿµ Ÿàÿßÿ≠ÿØ)' }, priceDelta: 0 },
                            { id: 'o50', name: 'Medium (1-2 Ki≈üilik)', translations: { tr: 'Medium (1-2 Ki≈üilik)', en: 'Medium (1-2 People)', de: 'Mittel (1-2 Personen)', ru: '–°—Ä–µ–¥–Ω—è—è (1-2 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Moyen (1-2 personnes)', ar: 'ŸÖÿ™Ÿàÿ≥ÿ∑ (1-2 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 60 },
                            { id: 'o51', name: 'Large (2-3 Ki≈üilik)', translations: { tr: 'Large (2-3 Ki≈üilik)', en: 'Large (2-3 People)', de: 'Gro√ü (2-3 Personen)', ru: '–ë–æ–ª—å—à–∞—è (2-3 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Grand (2-3 personnes)', ar: 'ŸÉÿ®Ÿäÿ± (2-3 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 120 },
                            { id: 'o52', name: 'XLarge (3-4 Ki≈üilik)', translations: { tr: 'XLarge (3-4 Ki≈üilik)', en: 'XLarge (3-4 People)', de: 'Extra Gro√ü (3-4 Personen)', ru: '–û—á–µ–Ω—å –±–æ–ª—å—à–∞—è (3-4 —á–µ–ª–æ–≤–µ–∫–∞)', fr: 'Tr√®s grand (3-4 personnes)', ar: 'ŸÉÿ®Ÿäÿ± ÿ¨ÿØÿßŸã (3-4 ÿ£ÿ¥ÿÆÿßÿµ)' }, priceDelta: 180 }
                        ]
                    }
                ]
            },
            // Tavuk D√∂ner kategorisi - JSON'dan g√∂m√ºl√º veriler
            {
                id: 'td1',
                category: 'tavuk-doner',
                price: 250,
                image: './pic/Tavuk-Doner/tavuk-doner-beyti.jpg',
                translations: {
                    tr: { name: 'Tavuk D√∂ner Beyti', description: 'Tavuk D√∂ner Beyti' },
                    en: { name: 'Chicken D√∂ner Beyti', description: 'Chicken D√∂ner Beyti' },
                    de: { name: 'H√§hnchen D√∂ner Beyti', description: 'H√§hnchen D√∂ner Beyti' },
                    ru: { name: '–ö—É—Ä–∏–Ω—ã–π –¥—ë–Ω–µ—Ä –±–µ–π—Ç–∏', description: '–ö—É—Ä–∏–Ω—ã–π –¥—ë–Ω–µ—Ä –±–µ–π—Ç–∏' },
                    fr: { name: 'D√∂ner de Poulet Beyti', description: 'D√∂ner de Poulet Beyti' },
                    ar: { name: 'ÿØŸàŸÜÿ± ÿØÿ¨ÿßÿ¨ ÿ®ŸäŸäÿ™Ÿä', description: 'ÿØŸàŸÜÿ± ÿØÿ¨ÿßÿ¨ ÿ®ŸäŸäÿ™Ÿä' }
                },
                
                extras: []
            },
            {
                id: 'td2',
                category: 'tavuk-doner',
                price: 180,
                image: './pic/Tavuk-Doner/tavuk-doner-porsiyon.jpg',
                translations: {
                    tr: { name: 'Tavuk D√∂ner Porsiyon (100gr)', description: 'Tavuk D√∂ner Porsiyon' },
                    en: { name: 'Chicken D√∂ner Portion', description: 'Chicken D√∂ner Portion' },
                    de: { name: 'H√§hnchen D√∂ner Portion', description: 'H√§hnchen D√∂ner Portion' },
                    ru: { name: '–ü–æ—Ä—Ü–∏—è –∫—É—Ä–∏–Ω–æ–≥–æ –¥—ë–Ω–µ—Ä–∞', description: '–ü–æ—Ä—Ü–∏—è –∫—É—Ä–∏–Ω–æ–≥–æ –¥—ë–Ω–µ—Ä–∞' },
                    fr: { name: 'Portion D√∂ner de Poulet', description: 'Portion D√∂ner de Poulet' },
                    ar: { name: 'ÿ≠ÿµÿ© ÿØŸàŸÜÿ± ÿØÿ¨ÿßÿ¨', description: 'ÿ≠ÿµÿ© ÿØŸàŸÜÿ± ÿØÿ¨ÿßÿ¨' }
                },
                ingredients: ['Tavuk D√∂ner', 'Pilav', 'Salata', 'Soƒüan'],
                extras: []
            },
            {
                id: 'td3',
                category: 'tavuk-doner',
                price: 230,
                image: './pic/Tavuk-Doner/pilav-ustu-tavuk-doner.jpg',
                translations: {
                    tr: { name: 'Pilav √úst√º Tavuk D√∂ner', description: 'Pilav √úst√º Tavuk D√∂ner' },
                    en: { name: 'Chicken D√∂ner on Rice', description: 'Chicken D√∂ner on Rice' },
                    de: { name: 'H√§hnchen D√∂ner auf Reis', description: 'H√§hnchen D√∂ner auf Reis' },
                    ru: { name: '–ö—É—Ä–∏–Ω—ã–π –¥—ë–Ω–µ—Ä –Ω–∞ —Ä–∏—Å–µ', description: '–ö—É—Ä–∏–Ω—ã–π –¥—ë–Ω–µ—Ä –Ω–∞ —Ä–∏—Å–µ' },
                    fr: { name: 'D√∂ner de Poulet sur Riz', description: 'D√∂ner de Poulet sur Riz' },
                    ar: { name: 'ÿØŸàŸÜÿ± ÿØÿ¨ÿßÿ¨ ÿπŸÑŸâ ÿßŸÑÿ£ÿ±ÿ≤', description: 'ÿØŸàŸÜÿ± ÿØÿ¨ÿßÿ¨ ÿπŸÑŸâ ÿßŸÑÿ£ÿ±ÿ≤' }
                },
                ingredients: ['Tavuk D√∂ner', 'Pilav', 'Salata', 'Soƒüan'],
                extras: []
            },
            {
                id: 'td4',
                category: 'tavuk-doner',
                price: 120,
                image: './pic/Tavuk-Doner/3lu-tavuk-doner.jpg',
                translations: {
                    tr: { name: '3 Adet Tavuk D√∂ner', description: '3 Adet Tavuk D√∂ner' },
                    en: { name: '3 Pieces Chicken D√∂ner', description: '3 Pieces Chicken D√∂ner' },
                    de: { name: '3 St√ºck H√§hnchen D√∂ner', description: '3 St√ºck H√§hnchen D√∂ner' },
                    ru: { name: '3 –∫—É—Å–æ—á–∫–∞ –∫—É—Ä–∏–Ω–æ–≥–æ –¥—ë–Ω–µ—Ä–∞', description: '3 –∫—É—Å–æ—á–∫–∞ –∫—É—Ä–∏–Ω–æ–≥–æ –¥—ë–Ω–µ—Ä–∞' },
                    fr: { name: '3 Morceaux D√∂ner de Poulet', description: '3 Morceaux D√∂ner de Poulet' },
                    ar: { name: '3 ŸÇÿ∑ÿπ ÿØŸàŸÜÿ± ÿØÿ¨ÿßÿ¨', description: '3 ŸÇÿ∑ÿπ ÿØŸàŸÜÿ± ÿØÿ¨ÿßÿ¨' }
                },
                ingredients: {
                    tr: ['Tavuk D√∂ner', 'Marul', 'Domates'],
                    en: ['Chicken Doner', 'Lettuce', 'Tomato'],
                    de: ['H√§hnchen D√∂ner', 'Salat', 'Tomate'],
                    ru: ['–ö—É—Ä–∏–Ω—ã–π –¥–æ–Ω–µ—Ä', '–õ–∏—Å—Ç–æ–≤–æ–π —Å–∞–ª–∞—Ç', '–ü–æ–º–∏–¥–æ—Ä'],
                    fr: ['D√∂ner au poulet', 'Laitue', 'Tomate'],
                    ar: ['ÿØŸàŸÜÿ± ÿØÿ¨ÿßÿ¨', 'ÿÆÿµ', 'ÿ∑ŸÖÿßÿ∑ŸÖ']
                },
                extras: []
            },
            {
                id: 'td5',
                category: 'tavuk-doner',
                price: 180,
                image: './pic/Tavuk-Doner/5lƒ±-tavuk-doner.jpg',
                translations: {
                    tr: { name: '5 Adet Tavuk D√∂ner', description: '5 Adet Tavuk D√∂ner' },
                    en: { name: '5 Pieces Chicken D√∂ner', description: '5 Pieces Chicken D√∂ner' },
                    de: { name: '5 St√ºck H√§hnchen D√∂ner', description: '5 St√ºck H√§hnchen D√∂ner' },
                    ru: { name: '5 –∫—É—Å–æ—á–∫–æ–≤ –∫—É—Ä–∏–Ω–æ–≥–æ –¥—ë–Ω–µ—Ä–∞', description: '5 –∫—É—Å–æ—á–∫–æ–≤ –∫—É—Ä–∏–Ω–æ–≥–æ –¥—ë–Ω–µ—Ä–∞' },
                    fr: { name: '5 Morceaux D√∂ner de Poulet', description: '5 Morceaux D√∂ner de Poulet' },
                    ar: { name: '5 ŸÇÿ∑ÿπ ÿØŸàŸÜÿ± ÿØÿ¨ÿßÿ¨', description: '5 ŸÇÿ∑ÿπ ÿØŸàŸÜÿ± ÿØÿ¨ÿßÿ¨' }
                },
                ingredients: {
                    tr: ['Tavuk D√∂ner', 'Marul', 'Domates'],
                    en: ['Chicken Doner', 'Lettuce', 'Tomato'],
                    de: ['H√§hnchen D√∂ner', 'Salat', 'Tomate'],
                    ru: ['–ö—É—Ä–∏–Ω—ã–π –¥–æ–Ω–µ—Ä', '–õ–∏—Å—Ç–æ–≤–æ–π —Å–∞–ª–∞—Ç', '–ü–æ–º–∏–¥–æ—Ä'],
                    fr: ['D√∂ner au poulet', 'Laitue', 'Tomate'],
                    ar: ['ÿØŸàŸÜÿ± ÿØÿ¨ÿßÿ¨', 'ÿÆÿµ', 'ÿ∑ŸÖÿßÿ∑ŸÖ']
                },
                extras: []
            },
            {
                id: 'td6',
                category: 'tavuk-doner',
                price: 220,
                image: './pic/Tavuk-Doner/tavuk-iskender.jpg',
                translations: {
                    tr: { name: 'Tavuk ƒ∞skender', description: 'Tavuk ƒ∞skender' },
                    en: { name: 'Chicken ƒ∞skender', description: 'Chicken ƒ∞skender' },
                    de: { name: 'H√§hnchen ƒ∞skender', description: 'H√§hnchen ƒ∞skender' },
                    ru: { name: '–ö—É—Ä–∏–Ω—ã–π –ò—Å–∫–µ–Ω–¥–µ—Ä', description: '–ö—É—Ä–∏–Ω—ã–π –ò—Å–∫–µ–Ω–¥–µ—Ä' },
                    fr: { name: 'ƒ∞skender au Poulet', description: 'ƒ∞skender au Poulet' },
                    ar: { name: 'ÿ•ÿ≥ŸÉŸÜÿØÿ± ÿØÿ¨ÿßÿ¨', description: 'ÿ•ÿ≥ŸÉŸÜÿØÿ± ÿØÿ¨ÿßÿ¨' }
                },
                ingredients: ['Tavuk D√∂ner', 'Pilav', 'Salata', 'Soƒüan', 'Domates', 'Yoƒüurt'],
                extras: []
            },
            {
                id: 'tavuk-doner-beyti',
                category: 'tavuk-doner',
                price: 160,
                image: './images/tavuk-doner-beyti.jpg',
                translations: {
                    tr: { name: 'Tavuk D√∂ner Beyti', description: 'Tavuk D√∂ner Beyti' },
                    en: { name: 'Chicken D√∂ner Beyti', description: 'Chicken D√∂ner Beyti' },
                    de: { name: 'H√§hnchen D√∂ner Beyti', description: 'H√§hnchen D√∂ner Beyti' },
                    ru: { name: '–ö—É—Ä–∏–Ω—ã–π –¥—ë–Ω–µ—Ä –±–µ–π—Ç–∏', description: '–ö—É—Ä–∏–Ω—ã–π –¥—ë–Ω–µ—Ä –±–µ–π—Ç–∏' },
                    fr: { name: 'D√∂ner de Poulet Beyti', description: 'D√∂ner de Poulet Beyti' },
                    ar: { name: 'ÿØŸàŸÜÿ± ÿØÿ¨ÿßÿ¨ ÿ®ŸäŸäÿ™Ÿä', description: 'ÿØŸàŸÜÿ± ÿØÿ¨ÿßÿ¨ ÿ®ŸäŸäÿ™Ÿä' }
                },
                ingredients: ['Tavuk D√∂ner', 'Lavash', 'Soƒüan', 'Domates'],
                extras: []
            },
            // Et D√∂ner kategorisi - JSON'dan g√∂m√ºl√º veriler
            {
                id: 'ed1',
                category: 'et-doner',
                price: 200,
                image: this.getAutoImagePath('ed1', 'Et D√∂ner Porsiyon', 'Et-Doner'),
                translations: {
                    tr: { name: 'Et D√∂ner Porsiyon', description: 'Et D√∂ner Porsiyon' },
                    en: { name: 'Beef D√∂ner Portion', description: 'Beef D√∂ner Portion' },
                    de: { name: 'Rind D√∂ner Portion', description: 'Rind D√∂ner Portion' },
                    ru: { name: '–ü–æ—Ä—Ü–∏—è –≥–æ–≤—è–∂—å–µ–≥–æ –¥—ë–Ω–µ—Ä–∞', description: '–ü–æ—Ä—Ü–∏—è –≥–æ–≤—è–∂—å–µ–≥–æ –¥—ë–Ω–µ—Ä–∞' },
                    fr: { name: 'Portion D√∂ner de B≈ìuf', description: 'Portion D√∂ner de B≈ìuf' },
                    ar: { name: 'ÿ≠ÿµÿ© ÿØŸàŸÜÿ± ŸÑÿ≠ŸÖ', description: 'ÿ≠ÿµÿ© ÿØŸàŸÜÿ± ŸÑÿ≠ŸÖ' }
                },
                ingredients: ['Et D√∂ner', 'Pilav', 'Salata', 'Soƒüan'],
                extras: []
            },
            {
                id: 'ed2',
                category: 'et-doner',
                price: 220,
                image: this.getAutoImagePath('ed2', 'Pilav√ºst√º Et D√∂ner', 'Et-Doner'),
                translations: {
                    tr: { name: 'Pilav√ºst√º Et D√∂ner', description: 'Pilav√ºst√º Et D√∂ner' },
                    en: { name: 'Beef D√∂ner on Rice', description: 'Beef D√∂ner on Rice' },
                    de: { name: 'Rind D√∂ner auf Reis', description: 'Rind D√∂ner auf Reis' },
                    ru: { name: '–ì–æ–≤—è–∂–∏–π –¥—ë–Ω–µ—Ä –Ω–∞ —Ä–∏—Å–µ', description: '–ì–æ–≤—è–∂–∏–π –¥—ë–Ω–µ—Ä –Ω–∞ —Ä–∏—Å–µ' },
                    fr: { name: 'D√∂ner de B≈ìuf sur Riz', description: 'D√∂ner de B≈ìuf sur Riz' },
                    ar: { name: 'ÿØŸàŸÜÿ± ŸÑÿ≠ŸÖ ÿπŸÑŸâ ÿßŸÑÿ£ÿ±ÿ≤', description: 'ÿØŸàŸÜÿ± ŸÑÿ≠ŸÖ ÿπŸÑŸâ ÿßŸÑÿ£ÿ±ÿ≤' }
                },
                ingredients: ['Et D√∂ner', 'Pilav', 'Salata', 'Soƒüan'],
                extras: []
            },
            {
                id: 'ed3',
                category: 'et-doner',
                price: 150,
                image: this.getAutoImagePath('ed3', '3 Adet Et D√∂ner', 'Et-Doner'),
                translations: {
                    tr: { name: '3 Adet Et D√∂ner', description: '3 Adet Et D√∂ner' },
                    en: { name: '3 Pieces Beef D√∂ner', description: '3 Pieces Beef D√∂ner' },
                    de: { name: '3 St√ºck Rind D√∂ner', description: '3 St√ºck Rind D√∂ner' },
                    ru: { name: '3 –∫—É—Å–æ—á–∫–∞ –≥–æ–≤—è–∂—å–µ–≥–æ –¥—ë–Ω–µ—Ä–∞', description: '3 –∫—É—Å–æ—á–∫–∞ –≥–æ–≤—è–∂—å–µ–≥–æ –¥—ë–Ω–µ—Ä–∞' },
                    fr: { name: '3 Morceaux D√∂ner de B≈ìuf', description: '3 Morceaux D√∂ner de B≈ìuf' },
                    ar: { name: '3 ŸÇÿ∑ÿπ ÿØŸàŸÜÿ± ŸÑÿ≠ŸÖ', description: '3 ŸÇÿ∑ÿπ ÿØŸàŸÜÿ± ŸÑÿ≠ŸÖ' }
                },
                ingredients: ['Et D√∂ner', 'Lavash', 'Soƒüan', 'Domates'],
                extras: []
            },
            {
                id: 'ed4',
                category: 'et-doner',
                price: 220,
                image: this.getAutoImagePath('ed4', '5 Adet Et D√∂ner', 'Et-Doner'),
                translations: {
                    tr: { name: '5 Adet Et D√∂ner', description: '5 Adet Et D√∂ner' },
                    en: { name: '5 Pieces Beef D√∂ner', description: '5 Pieces Beef D√∂ner' },
                    de: { name: '5 St√ºck Rind D√∂ner', description: '5 St√ºck Rind D√∂ner' },
                    ru: { name: '5 –∫—É—Å–æ—á–∫–æ–≤ –≥–æ–≤—è–∂—å–µ–≥–æ –¥—ë–Ω–µ—Ä–∞', description: '5 –∫—É—Å–æ—á–∫–æ–≤ –≥–æ–≤—è–∂—å–µ–≥–æ –¥—ë–Ω–µ—Ä–∞' },
                    fr: { name: '5 Morceaux D√∂ner de B≈ìuf', description: '5 Morceaux D√∂ner de B≈ìuf' },
                    ar: { name: '5 ŸÇÿ∑ÿπ ÿØŸàŸÜÿ± ŸÑÿ≠ŸÖ', description: '5 ŸÇÿ∑ÿπ ÿØŸàŸÜÿ± ŸÑÿ≠ŸÖ' }
                },
                ingredients: ['Et D√∂ner', 'Lavash', 'Soƒüan', 'Domates'],
                extras: []
            },
            {
                id: 'ed5',
                category: 'et-doner',
                price: 240,
                image: this.getAutoImagePath('ed5', 'Et ƒ∞skender', 'Et-Doner'),
                translations: {
                    tr: { name: 'Et ƒ∞skender', description: 'Et ƒ∞skender' },
                    en: { name: 'Beef ƒ∞skender', description: 'Beef ƒ∞skender' },
                    de: { name: 'Rind ƒ∞skender', description: 'Rind ƒ∞skender' },
                    ru: { name: '–ì–æ–≤—è–∂–∏–π –ò—Å–∫–µ–Ω–¥–µ—Ä', description: '–ì–æ–≤—è–∂–∏–π –ò—Å–∫–µ–Ω–¥–µ—Ä' },
                    fr: { name: 'ƒ∞skender au B≈ìuf', description: 'ƒ∞skender au B≈ìuf' },
                    ar: { name: 'ÿ•ÿ≥ŸÉŸÜÿØÿ± ŸÑÿ≠ŸÖ', description: 'ÿ•ÿ≥ŸÉŸÜÿØÿ± ŸÑÿ≠ŸÖ' }
                },
                ingredients: ['Et D√∂ner', 'Pilav', 'Salata', 'Soƒüan', 'Domates', 'Yoƒüurt'],
                extras: []
            },
            {
                id: 'ed6',
                category: 'et-doner',
                price: 190,
                image: this.getAutoImagePath('ed6', 'Ka≈üarlƒ± Et D√∂ner', 'Et-Doner'),
                translations: {
                    tr: { name: 'Ka≈üarlƒ± Et D√∂ner', description: 'Ka≈üarlƒ± Et D√∂ner' },
                    en: { name: 'Cheesy Beef D√∂ner', description: 'Cheesy Beef D√∂ner' },
                    de: { name: 'K√§se-Rind D√∂ner', description: 'K√§se-Rind D√∂ner' },
                    ru: { name: '–ì–æ–≤—è–∂–∏–π –¥—ë–Ω–µ—Ä —Å —Å—ã—Ä–æ–º', description: '–ì–æ–≤—è–∂–∏–π –¥—ë–Ω–µ—Ä —Å —Å—ã—Ä–æ–º' },
                    fr: { name: 'D√∂ner de B≈ìuf au Fromage', description: 'D√∂ner de B≈ìuf au Fromage' },
                    ar: { name: 'ÿØŸàŸÜÿ± ŸÑÿ≠ŸÖ ÿ®ÿßŸÑÿ¨ÿ®ŸÜ', description: 'ÿØŸàŸÜÿ± ŸÑÿ≠ŸÖ ÿ®ÿßŸÑÿ¨ÿ®ŸÜ' }
                },
                ingredients: ['Et D√∂ner', 'Ka≈üar Peyniri', 'Lavash', 'Soƒüan', 'Domates'],
                extras: []
            },
            {
                id: 'ed7',
                category: 'et-doner',
                price: 210,
                image: this.getAutoImagePath('ed7', 'Soslu D√∂ner', 'Et-Doner'),
                translations: {
                    tr: { name: 'Soslu D√∂ner', description: 'Soslu D√∂ner' },
                    en: { name: 'Saucy D√∂ner', description: 'Saucy D√∂ner' },
                    de: { name: 'Saucen-D√∂ner', description: 'Saucen-D√∂ner' },
                    ru: { name: '–î—ë–Ω–µ—Ä —Å —Å–æ—É—Å–æ–º', description: '–î—ë–Ω–µ—Ä —Å —Å–æ—É—Å–æ–º' },
                    fr: { name: 'D√∂ner √† la Sauce', description: 'D√∂ner √† la Sauce' },
                    ar: { name: 'ÿØŸàŸÜÿ± ÿ®ÿßŸÑÿµŸÑÿµÿ©', description: 'ÿØŸàŸÜÿ± ÿ®ÿßŸÑÿµŸÑÿµÿ©' }
                },
                ingredients: ['Et D√∂ner', '√ñzel Sos', 'Lavash', 'Soƒüan', 'Domates'],
                extras: []
            },
            {
                id: 'ed8',
                category: 'et-doner',
                price: 180,
                image: this.getAutoImagePath('ed8', 'Ayvalƒ±k Et D√∂ner', 'Et-Doner'),
                translations: {
                    tr: { name: 'Ayvalƒ±k Et D√∂ner', description: 'Ayvalƒ±k Et D√∂ner' },
                    en: { name: 'Ayvalƒ±k Beef D√∂ner', description: 'Ayvalƒ±k Beef D√∂ner' },
                    de: { name: 'Ayvalƒ±k Rind D√∂ner', description: 'Ayvalƒ±k Rind D√∂ner' },
                    ru: { name: '–ê–π–≤–∞–ª—ã–∫ –≥–æ–≤—è–∂–∏–π –¥—ë–Ω–µ—Ä', description: '–ê–π–≤–∞–ª—ã–∫ –≥–æ–≤—è–∂–∏–π –¥—ë–Ω–µ—Ä' },
                    fr: { name: 'D√∂ner de B≈ìuf Ayvalƒ±k', description: 'D√∂ner de B≈ìuf Ayvalƒ±k' },
                    ar: { name: 'ÿØŸàŸÜÿ± ŸÑÿ≠ŸÖ ÿ£ŸäŸÅÿßŸÑŸäŸÉ', description: 'ÿØŸàŸÜÿ± ŸÑÿ≠ŸÖ ÿ£ŸäŸÅÿßŸÑŸäŸÉ' }
                },
                ingredients: ['Et D√∂ner', 'Lavash', 'Soƒüan', 'Domates', '√ñzel Baharat'],
                extras: []
            },
            {
                id: 'tavuk-doner-porsiyon',
                category: 'tavuk-doner',
                price: 180,
                image: './images/tavuk-doner-porsiyon.jpg',
                translations: {
                    tr: { name: 'Tavuk D√∂ner Porsiyon', description: 'Tavuk D√∂ner Porsiyon' },
                    en: { name: 'Chicken D√∂ner Portion', description: 'Chicken D√∂ner Portion' },
                    de: { name: 'H√§hnchen D√∂ner Portion', description: 'H√§hnchen D√∂ner Portion' },
                    ru: { name: '–ü–æ—Ä—Ü–∏—è –∫—É—Ä–∏–Ω–æ–≥–æ –¥—ë–Ω–µ—Ä–∞', description: '–ü–æ—Ä—Ü–∏—è –∫—É—Ä–∏–Ω–æ–≥–æ –¥—ë–Ω–µ—Ä–∞' },
                    fr: { name: 'Portion D√∂ner de Poulet', description: 'Portion D√∂ner de Poulet' },
                    ar: { name: 'ÿ≠ÿµÿ© ÿØŸàŸÜÿ± ÿØÿ¨ÿßÿ¨', description: 'ÿ≠ÿµÿ© ÿØŸàŸÜÿ± ÿØÿ¨ÿßÿ¨' }
                },
                ingredients: ['Tavuk D√∂ner', 'Pilav', 'Salata', 'Soƒüan'],
                extras: []
            },
            {
                id: 'pilavustu-tavuk-doner',
                category: 'tavuk-doner',
                price: 200,
                image: './images/pilav-ustu-tavuk-doner.jpg',
                translations: {
                    tr: { name: 'Pilav√ºst√º Tavuk D√∂ner', description: 'Pilav√ºst√º Tavuk D√∂ner' },
                    en: { name: 'Chicken D√∂ner on Rice', description: 'Chicken D√∂ner on Rice' },
                    de: { name: 'H√§hnchen D√∂ner auf Reis', description: 'H√§hnchen D√∂ner auf Reis' },
                    ru: { name: '–ö—É—Ä–∏–Ω—ã–π –¥—ë–Ω–µ—Ä –Ω–∞ —Ä–∏—Å–µ', description: '–ö—É—Ä–∏–Ω—ã–π –¥—ë–Ω–µ—Ä –Ω–∞ —Ä–∏—Å–µ' },
                    fr: { name: 'D√∂ner de Poulet sur Riz', description: 'D√∂ner de Poulet sur Riz' },
                    ar: { name: 'ÿØŸàŸÜÿ± ÿØÿ¨ÿßÿ¨ ÿπŸÑŸâ ÿßŸÑÿ£ÿ±ÿ≤', description: 'ÿØŸàŸÜÿ± ÿØÿ¨ÿßÿ¨ ÿπŸÑŸâ ÿßŸÑÿ£ÿ±ÿ≤' }
                },
                ingredients: ['Tavuk D√∂ner', 'Pilav', 'Salata', 'Soƒüan'],
                extras: []
            },
            {
                id: '3-adet-tavuk-doner',
                category: 'tavuk-doner',
                price: 120,
                image: './images/3lu-tavuk-doner.jpg',
                translations: {
                    tr: { name: '3 Adet Tavuk D√∂ner', description: '3 Adet Tavuk D√∂ner' },
                    en: { name: '3 Pieces Chicken D√∂ner', description: '3 Pieces Chicken D√∂ner' },
                    de: { name: '3 St√ºck H√§hnchen D√∂ner', description: '3 St√ºck H√§hnchen D√∂ner' },
                    ru: { name: '3 –∫—É—Å–æ—á–∫–∞ –∫—É—Ä–∏–Ω–æ–≥–æ –¥—ë–Ω–µ—Ä–∞', description: '3 –∫—É—Å–æ—á–∫–∞ –∫—É—Ä–∏–Ω–æ–≥–æ –¥—ë–Ω–µ—Ä–∞' },
                    fr: { name: '3 Morceaux D√∂ner de Poulet', description: '3 Morceaux D√∂ner de Poulet' },
                    ar: { name: '3 ŸÇÿ∑ÿπ ÿØŸàŸÜÿ± ÿØÿ¨ÿßÿ¨', description: '3 ŸÇÿ∑ÿπ ÿØŸàŸÜÿ± ÿØÿ¨ÿßÿ¨' }
                },
                ingredients: ['Tavuk D√∂ner', 'Lavash', 'Soƒüan', 'Domates'],
                extras: []
            },
            {
                id: '5-adet-tavuk-doner',
                category: 'tavuk-doner',
                price: 180,
                image: './images/5lƒ±-tavuk-doner.jpg',
                translations: {
                    tr: { name: '5 Adet Tavuk D√∂ner', description: '5 Adet Tavuk D√∂ner' },
                    en: { name: '5 Pieces Chicken D√∂ner', description: '5 Pieces Chicken D√∂ner' },
                    de: { name: '5 St√ºck H√§hnchen D√∂ner', description: '5 St√ºck H√§hnchen D√∂ner' },
                    ru: { name: '5 –∫—É—Å–æ—á–∫–æ–≤ –∫—É—Ä–∏–Ω–æ–≥–æ –¥—ë–Ω–µ—Ä–∞', description: '5 –∫—É—Å–æ—á–∫–æ–≤ –∫—É—Ä–∏–Ω–æ–≥–æ –¥—ë–Ω–µ—Ä–∞' },
                    fr: { name: '5 Morceaux D√∂ner de Poulet', description: '5 Morceaux D√∂ner de Poulet' },
                    ar: { name: '5 ŸÇÿ∑ÿπ ÿØŸàŸÜÿ± ÿØÿ¨ÿßÿ¨', description: '5 ŸÇÿ∑ÿπ ÿØŸàŸÜÿ± ÿØÿ¨ÿßÿ¨' }
                },
                ingredients: ['Tavuk D√∂ner', 'Lavash', 'Soƒüan', 'Domates'],
                extras: []
            },
            // Hamburger kategorisi - JSON'dan g√∂m√ºl√º veriler
            {
                id: 'h1',
                category: 'hamburger',
                price: 180,
                image: this.getAutoImagePath('h1', 'Hamburger', 'Hamburger'),
                translations: {
                    tr: { name: 'Hamburger', description: 'Klasik Hamburger' },
                    en: { name: 'Hamburger', description: 'Classic Hamburger' },
                    de: { name: 'Hamburger', description: 'Klassischer Hamburger' },
                    ru: { name: '–ì–∞–º–±—É—Ä–≥–µ—Ä', description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –≥–∞–º–±—É—Ä–≥–µ—Ä' },
                    fr: { name: 'Hamburger', description: 'Hamburger Classique' },
                    ar: { name: 'ŸáŸÖÿ®ÿ±ÿ∫ÿ±', description: 'ŸáŸÖÿ®ÿ±ÿ∫ÿ± ŸÉŸÑÿßÿ≥ŸäŸÉŸä' }
                },
                ingredients: ['Dana K√∂fte', 'Hamburger Ekmeƒüi', 'Marul', 'Domates', 'Soƒüan'],
                extras: []
            },
            {
                id: 'h2',
                category: 'hamburger',
                price: 200,
                image: this.getAutoImagePath('h2', 'Cheeseburger', 'Hamburger'),
                translations: {
                    tr: { name: 'Cheeseburger', description: 'Peynirli Hamburger' },
                    en: { name: 'Cheeseburger', description: 'Cheese Hamburger' },
                    de: { name: 'Cheeseburger', description: 'K√§se-Hamburger' },
                    ru: { name: '–ß–∏–∑–±—É—Ä–≥–µ—Ä', description: '–ì–∞–º–±—É—Ä–≥–µ—Ä —Å —Å—ã—Ä–æ–º' },
                    fr: { name: 'Cheeseburger', description: 'Hamburger au Fromage' },
                    ar: { name: 'ÿ™ÿ¥Ÿäÿ≤ÿ®ÿ±ÿ∫ÿ±', description: 'ŸáŸÖÿ®ÿ±ÿ∫ÿ± ÿ®ÿßŸÑÿ¨ÿ®ŸÜ' }
                },
                ingredients: ['Dana K√∂fte', 'Ka≈üar Peyniri', 'Hamburger Ekmeƒüi', 'Marul', 'Domates'],
                extras: []
            },
            {
                id: 'h3',
                category: 'hamburger',
                price: 160,
                image: this.getAutoImagePath('h3', 'Tavuk Burger', 'Hamburger'),
                translations: {
                    tr: { name: 'Tavuk Burger', description: 'Tavuk Burger' },
                    en: { name: 'Chicken Burger', description: 'Chicken Burger' },
                    de: { name: 'H√§hnchen Burger', description: 'H√§hnchen Burger' },
                    ru: { name: '–ö—É—Ä–∏–Ω—ã–π –±—É—Ä–≥–µ—Ä', description: '–ö—É—Ä–∏–Ω—ã–π –±—É—Ä–≥–µ—Ä' },
                    fr: { name: 'Burger au Poulet', description: 'Burger au Poulet' },
                    ar: { name: 'ÿ®ÿ±ÿ¨ÿ± ÿØÿ¨ÿßÿ¨', description: 'ÿ®ÿ±ÿ¨ÿ± ÿØÿ¨ÿßÿ¨' }
                },
                ingredients: ['Tavuk K√∂fte', 'Hamburger Ekmeƒüi', 'Marul', 'Domates'],
                extras: []
            },
            {
                id: 'tavuk-burger',
                category: 'hamburger',
                price: 160,
                image: './images/tavukburger.jpg',
                translations: {
                    tr: { name: 'Tavuk Burger', description: 'Tavuk Burger' },
                    en: { name: 'Chicken Burger', description: 'Chicken Burger' },
                    de: { name: 'H√§hnchen Burger', description: 'H√§hnchen Burger' },
                    ru: { name: '–ö—É—Ä–∏–Ω—ã–π –±—É—Ä–≥–µ—Ä', description: '–ö—É—Ä–∏–Ω—ã–π –±—É—Ä–≥–µ—Ä' },
                    fr: { name: 'Burger au Poulet', description: 'Burger au Poulet' },
                    ar: { name: 'ÿ®ÿ±ÿ¨ÿ± ÿØÿ¨ÿßÿ¨', description: 'ÿ®ÿ±ÿ¨ÿ± ÿØÿ¨ÿßÿ¨' }
                },
                ingredients: ['Tavuk K√∂fte', 'Hamburger Ekmeƒüi', 'Marul', 'Domates'],
                extras: []
            },
            // Salata kategorisi - JSON'dan g√∂m√ºl√º veriler
            {
                id: 's1',
                category: 'salata',
                price: 80,
                image: this.getAutoImagePath('s1', 'Bahar Salata', 'Salata'),
                translations: {
                    tr: { name: 'Bahar Salata', description: 'Bahar Salata' },
                    en: { name: 'Spring Salad', description: 'Spring Salad' },
                    de: { name: 'Fr√ºhlingssalat', description: 'Fr√ºhlingssalat' },
                    ru: { name: '–í–µ—Å–µ–Ω–Ω–∏–π —Å–∞–ª–∞—Ç', description: '–í–µ—Å–µ–Ω–Ω–∏–π —Å–∞–ª–∞—Ç' },
                    fr: { name: 'Salade de Printemps', description: 'Salade de Printemps' },
                    ar: { name: 'ÿ≥ŸÑÿ∑ÿ© ÿßŸÑÿ±ÿ®Ÿäÿπ', description: 'ÿ≥ŸÑÿ∑ÿ© ÿßŸÑÿ±ÿ®Ÿäÿπ' }
                },
                ingredients: ['Marul', 'Domates', 'Salatalƒ±k', 'Soƒüan', 'Zeytin'],
                extras: []
            },
            {
                id: 's2',
                category: 'salata',
                price: 120,
                image: this.getAutoImagePath('s2', '√áƒ±tƒ±r Tavuk Salata', 'Salata'),
                translations: {
                    tr: { name: '√áƒ±tƒ±r Tavuk Salata', description: '√áƒ±tƒ±r Tavuk Salata' },
                    en: { name: 'Crispy Chicken Salad', description: 'Crispy Chicken Salad' },
                    de: { name: 'Knuspriger H√§hnchensalat', description: 'Knuspriger H√§hnchensalat' },
                    ru: { name: '–°–∞–ª–∞—Ç —Å —Ö—Ä—É—Å—Ç—è—â–µ–π –∫—É—Ä–∏—Ü–µ–π', description: '–°–∞–ª–∞—Ç —Å —Ö—Ä—É—Å—Ç—è—â–µ–π –∫—É—Ä–∏—Ü–µ–π' },
                    fr: { name: 'Salade de Poulet Croustillant', description: 'Salade de Poulet Croustillant' },
                    ar: { name: 'ÿ≥ŸÑÿ∑ÿ© ÿØÿ¨ÿßÿ¨ ŸÖŸÇÿ±ŸÖÿ¥', description: 'ÿ≥ŸÑÿ∑ÿ© ÿØÿ¨ÿßÿ¨ ŸÖŸÇÿ±ŸÖÿ¥' }
                },
                ingredients: ['Tavuk', 'Marul', 'Domates', 'Salatalƒ±k', 'Soƒüan'],
                extras: []
            },
            {
                id: 's3',
                category: 'salata',
                price: 100,
                image: this.getAutoImagePath('s3', 'Diyet Tavuk Salata', 'Salata'),
                translations: {
                    tr: { name: 'Diyet Tavuk Salata', description: 'Diyet Tavuk Salata' },
                    en: { name: 'Diet Chicken Salad', description: 'Diet Chicken Salad' },
                    de: { name: 'Di√§t-H√§hnchensalat', description: 'Di√§t-H√§hnchensalat' },
                    ru: { name: '–î–∏–µ—Ç–∏—á–µ—Å–∫–∏–π —Å–∞–ª–∞—Ç —Å –∫—É—Ä–∏—Ü–µ–π', description: '–î–∏–µ—Ç–∏—á–µ—Å–∫–∏–π —Å–∞–ª–∞—Ç —Å –∫—É—Ä–∏—Ü–µ–π' },
                    fr: { name: 'Salade de Poulet Di√©t√©tique', description: 'Salade de Poulet Di√©t√©tique' },
                    ar: { name: 'ÿ≥ŸÑÿ∑ÿ© ÿØÿ¨ÿßÿ¨ ÿØÿßŸäÿ™', description: 'ÿ≥ŸÑÿ∑ÿ© ÿØÿ¨ÿßÿ¨ ÿØÿßŸäÿ™' }
                },
                ingredients: ['Tavuk', 'Marul', 'Domates', 'Salatalƒ±k', 'Soƒüan'],
                extras: []
            },
            {
                id: 's4',
                category: 'salata',
                price: 90,
                image: this.getAutoImagePath('s4', 'Hellim Salata', 'Salata'),
                translations: {
                    tr: { name: 'Hellim Salata', description: 'Hellim Salata' },
                    en: { name: 'Halloumi Salad', description: 'Halloumi Salad' },
                    de: { name: 'Halloumi-Salat', description: 'Halloumi-Salat' },
                    ru: { name: '–°–∞–ª–∞—Ç —Å —Ö–∞–ª—É–º–∏', description: '–°–∞–ª–∞—Ç —Å —Ö–∞–ª—É–º–∏' },
                    fr: { name: 'Salade de Halloumi', description: 'Salade de Halloumi' },
                    ar: { name: 'ÿ≥ŸÑÿ∑ÿ© ÿ≠ŸÑŸàŸÖ', description: 'ÿ≥ŸÑÿ∑ÿ© ÿ≠ŸÑŸàŸÖ' }
                },
                ingredients: ['Hellim Peyniri', 'Marul', 'Domates', 'Salatalƒ±k', 'Soƒüan'],
                extras: []
            },
            {
                id: 's5',
                category: 'salata',
                price: 110,
                image: this.getAutoImagePath('s5', 'Sezar', 'Salata'),
                translations: {
                    tr: { name: 'Sezar', description: 'Sezar Salata' },
                    en: { name: 'Caesar', description: 'Caesar Salad' },
                    de: { name: 'Caesar', description: 'Caesar-Salat' },
                    ru: { name: '–¶–µ–∑–∞—Ä—å', description: '–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å' },
                    fr: { name: 'C√©sar', description: 'Salade C√©sar' },
                    ar: { name: 'ŸÇŸäÿµÿ±', description: 'ÿ≥ŸÑÿ∑ÿ© ŸÇŸäÿµÿ±' }
                },
                ingredients: ['Marul', 'Parmesan Peyniri', 'Kruton', 'Sezar Sosu'],
                extras: []
            },
            {
                id: 's6',
                category: 'salata',
                price: 130,
                image: this.getAutoImagePath('s6', 'Tonno Salata', 'Salata'),
                translations: {
                    tr: { name: 'Tonno Salata', description: 'Tonno Salata' },
                    en: { name: 'Tuna Salad', description: 'Tuna Salad' },
                    de: { name: 'Thunfischsalat', description: 'Thunfischsalat' },
                    ru: { name: '–°–∞–ª–∞—Ç —Å —Ç—É–Ω—Ü–æ–º', description: '–°–∞–ª–∞—Ç —Å —Ç—É–Ω—Ü–æ–º' },
                    fr: { name: 'Salade de Thon', description: 'Salade de Thon' },
                    ar: { name: 'ÿ≥ŸÑÿ∑ÿ© ÿ™ŸàŸÜÿ©', description: 'ÿ≥ŸÑÿ∑ÿ© ÿ™ŸàŸÜÿ©' }
                },
                ingredients: ['Ton Balƒ±ƒüƒ±', 'Marul', 'Domates', 'Salatalƒ±k', 'Soƒüan'],
                extras: []
            },
            {
                id: 'elma-dilim-patates',
                category: 'aperatifler',
                price: 40,
                image: './images/elmadilim.jpg',
                translations: {
                    tr: { name: 'Elma Dilim Patates', description: 'Elma Dilim Patates' },
                    en: { name: 'Apple Slice Potatoes', description: 'Apple Slice Potatoes' },
                    de: { name: 'Apfelscheiben Kartoffeln', description: 'Apfelscheiben Kartoffeln' },
                    ru: { name: '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å –ª–æ–º—Ç–∏–∫–∞–º–∏', description: '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å –ª–æ–º—Ç–∏–∫–∞–º–∏' },
                    fr: { name: 'Pommes de Terre en Tranches', description: 'Pommes de Terre en Tranches' },
                    ar: { name: 'ÿ®ÿ∑ÿßÿ∑ÿ≥ ÿ¥ÿ±ÿßÿ¶ÿ≠', description: 'ÿ®ÿ∑ÿßÿ∑ÿ≥ ÿ¥ÿ±ÿßÿ¶ÿ≠' }
                },
                ingredients: ['Patates', 'Tuz', 'Yaƒü'],
                extras: []
            },
            // Ayvalƒ±k Tostu kategorisi - JSON'dan g√∂m√ºl√º veriler
            {
                id: 't1',
                category: 'ayvalik-tostu',
                price: 130,
                image: './pic/Ayvalik-Tostu/sanayi-tostu.jpg',
                translations: {
                    tr: { name: 'Yicem Sanayi Tostu', description: 'Sanayi Tostu' },
                    en: { name: 'Industrial Toast', description: 'Industrial Toast' },
                    de: { name: 'Industrieller Toast', description: 'Industrieller Toast' },
                    ru: { name: '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π —Ç–æ—Å—Ç', description: '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π —Ç–æ—Å—Ç' },
                    fr: { name: 'Toast Industriel', description: 'Toast Industriel' },
                    ar: { name: 'ÿ™Ÿàÿ≥ÿ™ ÿµŸÜÿßÿπŸä', description: 'ÿ™Ÿàÿ≥ÿ™ ÿµŸÜÿßÿπŸä' }
                },
                ingredients: ['Ta≈ü Fƒ±rƒ±n Ekmeƒüi', 'Sucuk', 'Ka≈üar', 'Sal√ßa'],
                extras: [{
                    type: 'radio',
                    name: 'Servis',
                    translations: { tr: 'Servis', en: 'Serving', de: 'Servieren', ru: '–ü–æ–¥–∞—á–∞', fr: 'Service', ar: 'ÿ™ŸÇÿØŸäŸÖ' },
                    options: [
                        { id: 't1_s1', name: 'Tek', translations: { tr: 'Tek', en: 'Single', de: 'Einzeln', ru: '–û–¥–∏–Ω–æ—á–Ω—ã–π', fr: 'Seul', ar: 'ŸÅÿ±ÿßÿØŸâ' }, priceDelta: 0 },
                        { id: 't1_s2', name: 'Men√º (Cips + ƒ∞√ßecek)', translations: { tr: 'Men√º (Cips + ƒ∞√ßecek)', en: 'Menu (Chips + Drink)', de: 'Men√º (Chips + Getr√§nk)', ru: '–ú–µ–Ω—é (–ß–∏–ø—Å—ã + –ù–∞–ø–∏—Ç–æ–∫)', fr: 'Menu (Chips + Boisson)', ar: 'ŸÇÿßÿ¶ŸÖÿ© (ÿ¥Ÿäÿ®ÿ≥ + ŸÖÿ¥ÿ±Ÿàÿ®)' }, priceDelta: 80 }
                    ]
                }]
            },
            {
                id: 't2',
                category: 'ayvalik-tostu',
                price: 170,
                image: './pic/Ayvalik-Tostu/yicem-karisik.jpg',
                translations: {
                    tr: { name: 'Yicem Karƒ±≈üƒ±k', description: 'Yicem Karƒ±≈üƒ±k Tost' },
                    en: { name: 'Yicem Mixed', description: 'Yicem Mixed Toast' },
                    de: { name: 'Yicem Gemischt', description: 'Yicem Gemischter Toast' },
                    ru: { name: '–ô–∏—Ü–µ–º –°–º–µ—à–∞–Ω–Ω—ã–π', description: '–ô–∏—Ü–µ–º –°–º–µ—à–∞–Ω–Ω—ã–π —Ç–æ—Å—Ç' },
                    fr: { name: 'Yicem M√©lang√©', description: 'Toast Yicem M√©lang√©' },
                    ar: { name: 'Ÿäÿ¨ŸÖ ŸÖÿÆÿ™ŸÑÿ∑', description: 'ÿ™Ÿàÿ≥ÿ™ Ÿäÿ¨ŸÖ ŸÖÿÆÿ™ŸÑÿ∑' }
                },
                ingredients: ['Ka≈üar', 'Sucuk', 'Salam', 'Sosis', 'Tur≈üu', 'Domates', 'Rus Salatasƒ±', 'Ket√ßap', 'Mayonez'],
                extras: [{
                    type: 'radio',
                    name: 'Servis',
                    translations: { tr: 'Servis', en: 'Serving', de: 'Servieren', ru: '–ü–æ–¥–∞—á–∞', fr: 'Service', ar: 'ÿ™ŸÇÿØŸäŸÖ' },
                    options: [
                        { id: 't2_s1', name: 'Tek', translations: { tr: 'Tek', en: 'Single', de: 'Einzeln', ru: '–û–¥–∏–Ω–æ—á–Ω—ã–π', fr: 'Seul', ar: 'ŸÅÿ±ÿßÿØŸâ' }, priceDelta: 0 },
                        { id: 't2_s2', name: 'Men√º (Cips + ƒ∞√ßecek)', translations: { tr: 'Men√º (Cips + ƒ∞√ßecek)', en: 'Menu (Chips + Drink)', de: 'Men√º (Chips + Getr√§nk)', ru: '–ú–µ–Ω—é (–ß–∏–ø—Å—ã + –ù–∞–ø–∏—Ç–æ–∫)', fr: 'Menu (Chips + Boisson)', ar: 'ŸÇÿßÿ¶ŸÖÿ© (ÿ¥Ÿäÿ®ÿ≥ + ŸÖÿ¥ÿ±Ÿàÿ®)' }, priceDelta: 80 }
                    ]
                }]
            },
            {
                id: 't3',
                category: 'ayvalik-tostu',
                price: 130,
                image: './pic/Ayvalik-Tostu/yicem-sucuklu.jpg',
                translations: {
                    tr: { name: 'Yicem Sucuk Ka≈üar', description: 'Yicem Sucuk Ka≈üar Tost' },
                    en: { name: 'Yicem with Sausage', description: 'Yicem Toast with Sausage' },
                    de: { name: 'Yicem mit Wurst', description: 'Yicem Toast mit Wurst' },
                    ru: { name: '–ô–∏—Ü–µ–º —Å –∫–æ–ª–±–∞—Å–æ–π', description: '–ô–∏—Ü–µ–º —Ç–æ—Å—Ç —Å –∫–æ–ª–±–∞—Å–æ–π' },
                    fr: { name: 'Yicem aux Saucisses', description: 'Toast Yicem aux Saucisses' },
                    ar: { name: 'Ÿäÿ¨ŸÖ ÿ®ÿßŸÑÿ≥ÿ¨ŸÇ', description: 'ÿ™Ÿàÿ≥ÿ™ Ÿäÿ¨ŸÖ ÿ®ÿßŸÑÿ≥ÿ¨ŸÇ' }
                },
                ingredients: ['Ka≈üar', 'Sucuk', 'Tur≈üu', 'Domates', '(ƒ∞steƒüe Baƒülƒ± Ket√ßap ve Mayonez)'],
                extras: [{
                    type: 'radio',
                    name: 'Servis',
                    translations: { tr: 'Servis', en: 'Serving', de: 'Servieren', ru: '–ü–æ–¥–∞—á–∞', fr: 'Service', ar: 'ÿ™ŸÇÿØŸäŸÖ' },
                    options: [
                        { id: 't3_s1', name: 'Tek', translations: { tr: 'Tek', en: 'Single', de: 'Einzeln', ru: '–û–¥–∏–Ω–æ—á–Ω—ã–π', fr: 'Seul', ar: 'ŸÅÿ±ÿßÿØŸâ' }, priceDelta: 0 },
                        { id: 't3_s2', name: 'Men√º (Cips + ƒ∞√ßecek)', translations: { tr: 'Men√º (Cips + ƒ∞√ßecek)', en: 'Menu (Chips + Drink)', de: 'Men√º (Chips + Getr√§nk)', ru: '–ú–µ–Ω—é (–ß–∏–ø—Å—ã + –ù–∞–ø–∏—Ç–æ–∫)', fr: 'Menu (Chips + Boisson)', ar: 'ŸÇÿßÿ¶ŸÖÿ© (ÿ¥Ÿäÿ®ÿ≥ + ŸÖÿ¥ÿ±Ÿàÿ®)' }, priceDelta: 80 }
                    ]
                }]
            },
            {
                id: 't4',
                category: 'ayvalik-tostu',
                price: 130,
                image: './pic/Ayvalik-Tostu/yicem-kasarli-jambon.jpg',
                translations: {
                    tr: { name: 'Yicem Ka≈üarlƒ± Jambon', description: 'Yicem Ka≈üarlƒ± Jambon Tost' },
                    en: { name: 'Yicem with Cheese', description: 'Yicem Toast with Cheese' },
                    de: { name: 'Yicem mit K√§se', description: 'Yicem Toast mit K√§se' },
                    ru: { name: '–ô–∏—Ü–µ–º —Å —Å—ã—Ä–æ–º', description: '–ô–∏—Ü–µ–º —Ç–æ—Å—Ç —Å —Å—ã—Ä–æ–º' },
                    fr: { name: 'Yicem au Fromage', description: 'Toast Yicem au Fromage' },
                    ar: { name: 'Ÿäÿ¨ŸÖ ÿ®ÿßŸÑÿ¨ÿ®ŸÜ', description: 'ÿ™Ÿàÿ≥ÿ™ Ÿäÿ¨ŸÖ ÿ®ÿßŸÑÿ¨ÿ®ŸÜ' }
                },
                ingredients: ['Ka≈üar', 'Jambon', 'Tur≈üu', 'Domates', '(ƒ∞steƒüe Baƒülƒ± Ket√ßap ve Mayonez)'],
                extras: [{
                    type: 'radio',
                    name: 'Servis',
                    translations: { tr: 'Servis', en: 'Serving', de: 'Servieren', ru: '–ü–æ–¥–∞—á–∞', fr: 'Service', ar: 'ÿ™ŸÇÿØŸäŸÖ' },
                    options: [
                        { id: 't4_s1', name: 'Tek', translations: { tr: 'Tek', en: 'Single', de: 'Einzeln', ru: '–û–¥–∏–Ω–æ—á–Ω—ã–π', fr: 'Seul', ar: 'ŸÅÿ±ÿßÿØŸâ' }, priceDelta: 0 },
                        { id: 't4_s2', name: 'Men√º (Cips + ƒ∞√ßecek)', translations: { tr: 'Men√º (Cips + ƒ∞√ßecek)', en: 'Menu (Chips + Drink)', de: 'Men√º (Chips + Getr√§nk)', ru: '–ú–µ–Ω—é (–ß–∏–ø—Å—ã + –ù–∞–ø–∏—Ç–æ–∫)', fr: 'Menu (Chips + Boisson)', ar: 'ŸÇÿßÿ¶ŸÖÿ© (ÿ¥Ÿäÿ®ÿ≥ + ŸÖÿ¥ÿ±Ÿàÿ®)' }, priceDelta: 80 }
                    ]
                }]
            },
            {
                id: 't5',
                category: 'ayvalik-tostu',
                price: 130,
                image: './pic/Ayvalik-Tostu/yicem-salam.jpg',
                translations: {
                    tr: { name: 'Yicem Salam Ka≈üarlƒ±', description: 'Yicem Salam Ka≈üarlƒ± Tost' },
                    en: { name: 'Yicem with Salami', description: 'Yicem Toast with Salami' },
                    de: { name: 'Yicem mit Salami', description: 'Yicem Toast mit Salami' },
                    ru: { name: '–ô–∏—Ü–µ–º —Å —Å–∞–ª—è–º–∏', description: '–ô–∏—Ü–µ–º —Ç–æ—Å—Ç —Å —Å–∞–ª—è–º–∏' },
                    fr: { name: 'Yicem au Salami', description: 'Toast Yicem au Salami' },
                    ar: { name: 'Ÿäÿ¨ŸÖ ÿ®ÿßŸÑÿ≥ÿßŸÑŸÖŸä', description: 'ÿ™Ÿàÿ≥ÿ™ Ÿäÿ¨ŸÖ ÿ®ÿßŸÑÿ≥ÿßŸÑŸÖŸä' }
                },
                ingredients: ['Dana Salam', 'Ka≈üar', 'Tur≈üu', 'Domates', '(ƒ∞steƒüe Baƒülƒ± Ket√ßap ve Mayonez)'],
                extras: [{
                    type: 'radio',
                    name: 'Servis',
                    translations: { tr: 'Servis', en: 'Serving', de: 'Servieren', ru: '–ü–æ–¥–∞—á–∞', fr: 'Service', ar: 'ÿ™ŸÇÿØŸäŸÖ' },
                    options: [
                        { id: 't5_s1', name: 'Tek', translations: { tr: 'Tek', en: 'Single', de: 'Einzeln', ru: '–û–¥–∏–Ω–æ—á–Ω—ã–π', fr: 'Seul', ar: 'ŸÅÿ±ÿßÿØŸâ' }, priceDelta: 0 },
                        { id: 't5_s2', name: 'Men√º (Cips + ƒ∞√ßecek)', translations: { tr: 'Men√º (Cips + ƒ∞√ßecek)', en: 'Menu (Chips + Drink)', de: 'Men√º (Chips + Getr√§nk)', ru: '–ú–µ–Ω—é (–ß–∏–ø—Å—ã + –ù–∞–ø–∏—Ç–æ–∫)', fr: 'Menu (Chips + Boisson)', ar: 'ŸÇÿßÿ¶ŸÖÿ© (ÿ¥Ÿäÿ®ÿ≥ + ŸÖÿ¥ÿ±Ÿàÿ®)' }, priceDelta: 80 }
                    ]
                }]
            },
            {
                id: 't6',
                category: 'ayvalik-tostu',
                price: 190,
                image: './pic/Ayvalik-Tostu/yicem-mega-karisik.jpg',
                translations: {
                    tr: { name: 'Yicem Mega Karƒ±≈üƒ±k', description: 'Yicem Mega Karƒ±≈üƒ±k Tost' },
                    en: { name: 'Yicem Mega Mixed', description: 'Yicem Mega Mixed Toast' },
                    de: { name: 'Yicem Mega Gemischt', description: 'Yicem Mega Gemischter Toast' },
                    ru: { name: '–ô–∏—Ü–µ–º –ú–µ–≥–∞ –°–º–µ—à–∞–Ω–Ω—ã–π', description: '–ô–∏—Ü–µ–º –ú–µ–≥–∞ –°–º–µ—à–∞–Ω–Ω—ã–π —Ç–æ—Å—Ç' },
                    fr: { name: 'Yicem Mega M√©lang√©', description: 'Toast Yicem Mega M√©lang√©' },
                    ar: { name: 'Ÿäÿ¨ŸÖ ŸÖŸäÿ¨ÿß ŸÖÿÆÿ™ŸÑÿ∑', description: 'ÿ™Ÿàÿ≥ÿ™ Ÿäÿ¨ŸÖ ŸÖŸäÿ¨ÿß ŸÖÿÆÿ™ŸÑÿ∑' }
                },
                ingredients: ['Ka≈üar', 'Sucuk', 'Salam', 'Sosis', 'Jambon', 'Tur≈üu', 'Domates', 'Rus Salatasƒ±', 'Ket√ßap', 'Mayonez'],
                extras: [{
                    type: 'radio',
                    name: 'Servis',
                    translations: { tr: 'Servis', en: 'Serving', de: 'Servieren', ru: '–ü–æ–¥–∞—á–∞', fr: 'Service', ar: 'ÿ™ŸÇÿØŸäŸÖ' },
                    options: [
                        { id: 't6_s1', name: 'Tek', translations: { tr: 'Tek', en: 'Single', de: 'Einzeln', ru: '–û–¥–∏–Ω–æ—á–Ω—ã–π', fr: 'Seul', ar: 'ŸÅÿ±ÿßÿØŸâ' }, priceDelta: 0 },
                        { id: 't6_s2', name: 'Men√º (Cips + ƒ∞√ßecek)', translations: { tr: 'Men√º (Cips + ƒ∞√ßecek)', en: 'Menu (Chips + Drink)', de: 'Men√º (Chips + Getr√§nk)', ru: '–ú–µ–Ω—é (–ß–∏–ø—Å—ã + –ù–∞–ø–∏—Ç–æ–∫)', fr: 'Menu (Chips + Boisson)', ar: 'ŸÇÿßÿ¶ŸÖÿ© (ÿ¥Ÿäÿ®ÿ≥ + ŸÖÿ¥ÿ±Ÿàÿ®)' }, priceDelta: 80 }
                    ]
                }]
            },
            {
                id: 't7',
                category: 'ayvalik-tostu',
                price: 220,
                image: './pic/Ayvalik-Tostu/yicem-super-karisik.jpg',
                translations: {
                    tr: { name: 'Yicem Super Karƒ±≈üƒ±k', description: 'Yicem Super Karƒ±≈üƒ±k Tost' },
                    en: { name: 'Yicem Super Mixed', description: 'Yicem Super Mixed Toast' },
                    de: { name: 'Yicem Super Gemischt', description: 'Yicem Super Gemischter Toast' },
                    ru: { name: '–ô–∏—Ü–µ–º –°—É–ø–µ—Ä –°–º–µ—à–∞–Ω–Ω—ã–π', description: '–ô–∏—Ü–µ–º –°—É–ø–µ—Ä –°–º–µ—à–∞–Ω–Ω—ã–π —Ç–æ—Å—Ç' },
                    fr: { name: 'Yicem Super M√©lang√©', description: 'Toast Yicem Super M√©lang√©' },
                    ar: { name: 'Ÿäÿ¨ŸÖ ÿ≥Ÿàÿ®ÿ± ŸÖÿÆÿ™ŸÑÿ∑', description: 'ÿ™Ÿàÿ≥ÿ™ Ÿäÿ¨ŸÖ ÿ≥Ÿàÿ®ÿ± ŸÖÿÆÿ™ŸÑÿ∑' }
                },
                ingredients: ['√áift Katlƒ± Ekmek', 'Ka≈üar', 'Sucuk', 'Salam', 'Sosis', 'Tur≈üu', 'Domates', 'Rus Salatasƒ±', 'Ket√ßap', 'Mayonez'],
                extras: [{
                    type: 'radio',
                    name: 'Servis',
                    translations: { tr: 'Servis', en: 'Serving', de: 'Servieren', ru: '–ü–æ–¥–∞—á–∞', fr: 'Service', ar: 'ÿ™ŸÇÿØŸäŸÖ' },
                    options: [
                        { id: 't7_s1', name: 'Tek', translations: { tr: 'Tek', en: 'Single', de: 'Einzeln', ru: '–û–¥–∏–Ω–æ—á–Ω—ã–π', fr: 'Seul', ar: 'ŸÅÿ±ÿßÿØŸâ' }, priceDelta: 0 },
                        { id: 't7_s2', name: 'Men√º (Cips + ƒ∞√ßecek)', translations: { tr: 'Men√º (Cips + ƒ∞√ßecek)', en: 'Menu (Chips + Drink)', de: 'Men√º (Chips + Getr√§nk)', ru: '–ú–µ–Ω—é (–ß–∏–ø—Å—ã + –ù–∞–ø–∏—Ç–æ–∫)', fr: 'Menu (Chips + Boisson)', ar: 'ŸÇÿßÿ¶ŸÖÿ© (ÿ¥Ÿäÿ®ÿ≥ + ŸÖÿ¥ÿ±Ÿàÿ®)' }, priceDelta: 80 }
                    ]
                }]
            },
            {
                id: 't8',
                category: 'ayvalik-tostu',
                price: 300,
                image: './pic/Ayvalik-Tostu/yicem-donerli.jpg',
                translations: {
                    tr: { name: 'Yicem D√∂nerli', description: 'Yicem D√∂nerli Tost' },
                    en: { name: 'Yicem with D√∂ner', description: 'Yicem Toast with D√∂ner' },
                    de: { name: 'Yicem mit D√∂ner', description: 'Yicem Toast mit D√∂ner' },
                    ru: { name: '–ô–∏—Ü–µ–º —Å –¥—ë–Ω–µ—Ä–æ–º', description: '–ô–∏—Ü–µ–º —Ç–æ—Å—Ç —Å –¥—ë–Ω–µ—Ä–æ–º' },
                    fr: { name: 'Yicem au D√∂ner', description: 'Toast Yicem au D√∂ner' },
                    ar: { name: 'Ÿäÿ¨ŸÖ ÿ®ÿßŸÑÿØŸàŸÜÿ±', description: 'ÿ™Ÿàÿ≥ÿ™ Ÿäÿ¨ŸÖ ÿ®ÿßŸÑÿØŸàŸÜÿ±' }
                },
                ingredients: ['Ka≈üar', 'Et D√∂ner (100gr)', 'Marul', 'Tur≈üu', 'Domates', '(ƒ∞steƒüe Baƒülƒ± Ket√ßap ve Mayonez)'],
                extras: [{
                    type: 'radio',
                    name: 'Servis',
                    translations: { tr: 'Servis', en: 'Serving', de: 'Servieren', ru: '–ü–æ–¥–∞—á–∞', fr: 'Service', ar: 'ÿ™ŸÇÿØŸäŸÖ' },
                    options: [
                        { id: 't8_s1', name: 'Tek', translations: { tr: 'Tek', en: 'Single', de: 'Einzeln', ru: '–û–¥–∏–Ω–æ—á–Ω—ã–π', fr: 'Seul', ar: 'ŸÅÿ±ÿßÿØŸâ' }, priceDelta: 0 },
                        { id: 't8_s2', name: 'Men√º (Cips + ƒ∞√ßecek)', translations: { tr: 'Men√º (Cips + ƒ∞√ßecek)', en: 'Menu (Chips + Drink)', de: 'Men√º (Chips + Getr√§nk)', ru: '–ú–µ–Ω—é (–ß–∏–ø—Å—ã + –ù–∞–ø–∏—Ç–æ–∫)', fr: 'Menu (Chips + Boisson)', ar: 'ŸÇÿßÿ¶ŸÖÿ© (ÿ¥Ÿäÿ®ÿ≥ + ŸÖÿ¥ÿ±Ÿàÿ®)' }, priceDelta: 80 }
                    ]
                }]
            },
            {
                id: 't9',
                category: 'ayvalik-tostu',
                price: 200,
                image: './pic/Ayvalik-Tostu/yicem-evkofteli.jpg',
                translations: {
                    tr: { name: 'Yicem Ev K√∂fteli', description: 'Yicem Ev K√∂fteli Tost' },
                    en: { name: 'Yicem with Meatballs', description: 'Yicem Toast with Meatballs' },
                    de: { name: 'Yicem mit Fleischb√§llchen', description: 'Yicem Toast mit Fleischb√§llchen' },
                    ru: { name: '–ô–∏—Ü–µ–º —Å —Ñ—Ä–∏–∫–∞–¥–µ–ª—å–∫–∞–º–∏', description: '–ô–∏—Ü–µ–º —Ç–æ—Å—Ç —Å —Ñ—Ä–∏–∫–∞–¥–µ–ª—å–∫–∞–º–∏' },
                    fr: { name: 'Yicem aux Boulettes', description: 'Toast Yicem aux Boulettes' },
                    ar: { name: 'Ÿäÿ¨ŸÖ ÿ®ÿßŸÑŸÉŸÅÿ™ÿ©', description: 'ÿ™Ÿàÿ≥ÿ™ Ÿäÿ¨ŸÖ ÿ®ÿßŸÑŸÉŸÅÿ™ÿ©' }
                },
                ingredients: ['Ev K√∂ftesi (120gr)', 'Marul', 'Tur≈üu', 'Domates', '(ƒ∞steƒüe Baƒülƒ± Ket√ßap ve Mayonez + Rus Salatasƒ±)'],
                extras: [{
                    type: 'radio',
                    name: 'Servis',
                    translations: { tr: 'Servis', en: 'Serving', de: 'Servieren', ru: '–ü–æ–¥–∞—á–∞', fr: 'Service', ar: 'ÿ™ŸÇÿØŸäŸÖ' },
                    options: [
                        { id: 't9_s1', name: 'Tek', translations: { tr: 'Tek', en: 'Single', de: 'Einzeln', ru: '–û–¥–∏–Ω–æ—á–Ω—ã–π', fr: 'Seul', ar: 'ŸÅÿ±ÿßÿØŸâ' }, priceDelta: 0 },
                        { id: 't9_s2', name: 'Men√º (Cips + ƒ∞√ßecek)', translations: { tr: 'Men√º (Cips + ƒ∞√ßecek)', en: 'Menu (Chips + Drink)', de: 'Men√º (Chips + Getr√§nk)', ru: '–ú–µ–Ω—é (–ß–∏–ø—Å—ã + –ù–∞–ø–∏—Ç–æ–∫)', fr: 'Menu (Chips + Boisson)', ar: 'ŸÇÿßÿ¶ŸÖÿ© (ÿ¥Ÿäÿ®ÿ≥ + ŸÖÿ¥ÿ±Ÿàÿ®)' }, priceDelta: 80 }
                    ]
                }]
            },
            {
                id: 't10',
                category: 'ayvalik-tostu',
                price: 130,
                image: './pic/Ayvalik-Tostu/yicem-schnitzel.jpg',
                translations: {
                    tr: { name: 'Yicem Schnitzel', description: 'Yicem Schnitzel Tost' },
                    en: { name: 'Yicem Schnitzel', description: 'Yicem Schnitzel Toast' },
                    de: { name: 'Yicem Schnitzel', description: 'Yicem Schnitzel Toast' },
                    ru: { name: '–ô–∏—Ü–µ–º –®–Ω–∏—Ü–µ–ª—å', description: '–ô–∏—Ü–µ–º —Ç–æ—Å—Ç —Å —à–Ω–∏—Ü–µ–ª–µ–º' },
                    fr: { name: 'Yicem Schnitzel', description: 'Toast Yicem Schnitzel' },
                    ar: { name: 'Ÿäÿ¨ŸÖ ÿ¥ŸÜŸäÿ™ÿ≤ŸÑ', description: 'ÿ™Ÿàÿ≥ÿ™ Ÿäÿ¨ŸÖ ÿ¥ŸÜŸäÿ™ÿ≤ŸÑ' }
                },
                ingredients: ['Ka≈üar', 'Sucuk', 'Tur≈üu', 'Domates', '(ƒ∞steƒüe Baƒülƒ± Ket√ßap ve Mayonez)'],
                extras: [{
                    type: 'radio',
                    name: 'Servis',
                    translations: { tr: 'Servis', en: 'Serving', de: 'Servieren', ru: '–ü–æ–¥–∞—á–∞', fr: 'Service', ar: 'ÿ™ŸÇÿØŸäŸÖ' },
                    options: [
                        { id: 't10_s1', name: 'Tek', translations: { tr: 'Tek', en: 'Single', de: 'Einzeln', ru: '–û–¥–∏–Ω–æ—á–Ω—ã–π', fr: 'Seul', ar: 'ŸÅÿ±ÿßÿØŸâ' }, priceDelta: 0 },
                        { id: 't10_s2', name: 'Men√º (Cips + ƒ∞√ßecek)', translations: { tr: 'Men√º (Cips + ƒ∞√ßecek)', en: 'Menu (Chips + Drink)', de: 'Men√º (Chips + Getr√§nk)', ru: '–ú–µ–Ω—é (–ß–∏–ø—Å—ã + –ù–∞–ø–∏—Ç–æ–∫)', fr: 'Menu (Chips + Boisson)', ar: 'ŸÇÿßÿ¶ŸÖÿ© (ÿ¥Ÿäÿ®ÿ≥ + ŸÖÿ¥ÿ±Ÿàÿ®)' }, priceDelta: 80 }
                    ]
                }]
            },
            {
                id: 't11',
                category: 'ayvalik-tostu',
                price: 210,
                image: './pic/Ayvalik-Tostu/yicem-kavurma.jpg',
                translations: {
                    tr: { name: 'Yicem Kavurma Ka≈üar', description: 'Yicem Kavurma Ka≈üar Tost' },
                    en: { name: 'Yicem with Stew', description: 'Yicem Toast with Stew' },
                    de: { name: 'Yicem mit Eintopf', description: 'Yicem Toast mit Eintopf' },
                    ru: { name: '–ô–∏—Ü–µ–º —Å —Ç—É—à–µ–Ω—ã–º –º—è—Å–æ–º', description: '–ô–∏—Ü–µ–º —Ç–æ—Å—Ç —Å —Ç—É—à–µ–Ω—ã–º –º—è—Å–æ–º' },
                    fr: { name: 'Yicem au Rago√ªt', description: 'Toast Yicem au Rago√ªt' },
                    ar: { name: 'Ÿäÿ¨ŸÖ ÿ®ÿßŸÑŸÑÿ≠ŸÖ ÿßŸÑŸÖÿ∑ÿ®ŸàÿÆ', description: 'ÿ™Ÿàÿ≥ÿ™ Ÿäÿ¨ŸÖ ÿ®ÿßŸÑŸÑÿ≠ŸÖ ÿßŸÑŸÖÿ∑ÿ®ŸàÿÆ' }
                },
                ingredients: ['Ka≈üar', 'Kavurma (70gr)', 'Tur≈üu', 'Domates'],
                extras: [{
                    type: 'radio',
                    name: 'Servis',
                    translations: { tr: 'Servis', en: 'Serving', de: 'Servieren', ru: '–ü–æ–¥–∞—á–∞', fr: 'Service', ar: 'ÿ™ŸÇÿØŸäŸÖ' },
                    options: [
                        { id: 't11_s1', name: 'Tek', translations: { tr: 'Tek', en: 'Single', de: 'Einzeln', ru: '–û–¥–∏–Ω–æ—á–Ω—ã–π', fr: 'Seul', ar: 'ŸÅÿ±ÿßÿØŸâ' }, priceDelta: 0 },
                        { id: 't11_s2', name: 'Men√º (Cips + ƒ∞√ßecek)', translations: { tr: 'Men√º (Cips + ƒ∞√ßecek)', en: 'Menu (Chips + Drink)', de: 'Men√º (Chips + Getr√§nk)', ru: '–ú–µ–Ω—é (–ß–∏–ø—Å—ã + –ù–∞–ø–∏—Ç–æ–∫)', fr: 'Menu (Chips + Boisson)', ar: 'ŸÇÿßÿ¶ŸÖÿ© (ÿ¥Ÿäÿ®ÿ≥ + ŸÖÿ¥ÿ±Ÿàÿ®)' }, priceDelta: 80 }
                    ]
                }]
            },
            {
                id: 't12',
                category: 'ayvalik-tostu',
                price: 170,
                image: './pic/Ayvalik-Tostu/yicem-yengenn.jpg',
                translations: {
                    tr: { name: 'Yicem Yengen', description: 'Yicem Yengen Tost' },
                    en: { name: 'Yicem Yengen', description: 'Yicem Yengen Toast' },
                    de: { name: 'Yicem Yengen', description: 'Yicem Yengen Toast' },
                    ru: { name: '–ô–∏—Ü–µ–º –ô–µ–Ω–≥–µ–Ω', description: '–ô–∏—Ü–µ–º —Ç–æ—Å—Ç –ô–µ–Ω–≥–µ–Ω' },
                    fr: { name: 'Yicem Yengen', description: 'Toast Yicem Yengen' },
                    ar: { name: 'Ÿäÿ¨ŸÖ ŸäŸÜÿ∫ŸÜ', description: 'ÿ™Ÿàÿ≥ÿ™ Ÿäÿ¨ŸÖ ŸäŸÜÿ∫ŸÜ' }
                },
                ingredients: ['Sosis', 'Sucuk', 'Ka≈üar', 'Tur≈üu', 'Ket√ßap', 'Mayonez'],
                extras: [
                    {
                        type: 'radio',
                        name: 'Servis',
                        translations: { tr: 'Servis', en: 'Serving', de: 'Servieren', ru: '–ü–æ–¥–∞—á–∞', fr: 'Service', ar: 'ÿ™ŸÇÿØŸäŸÖ' },
                        options: [
                            { id: 't12_s1', name: 'Tek', translations: { tr: 'Tek', en: 'Single', de: 'Einzeln', ru: '–û–¥–∏–Ω–æ—á–Ω—ã–π', fr: 'Seul', ar: 'ŸÅÿ±ÿßÿØŸâ' }, priceDelta: 0 },
                            { id: 't12_s2', name: 'Men√º (Cips + ƒ∞√ßecek)', translations: { tr: 'Men√º (Cips + ƒ∞√ßecek)', en: 'Menu (Chips + Drink)', de: 'Men√º (Chips + Getr√§nk)', ru: '–ú–µ–Ω—é (–ß–∏–ø—Å—ã + –ù–∞–ø–∏—Ç–æ–∫)', fr: 'Menu (Chips + Boisson)', ar: 'ŸÇÿßÿ¶ŸÖÿ© (ÿ¥Ÿäÿ®ÿ≥ + ŸÖÿ¥ÿ±Ÿàÿ®)' }, priceDelta: 80 }
                        ]
                    }
                ]
            },
            // Bistro kategorisi - JSON'dan g√∂m√ºl√º veriler
            {
                id: 'b1',
                category: 'bistro',
                price: 180,
                image: this.getAutoImagePath('b1', 'Caf√© de Paris', 'Bistro'),
                translations: {
                    tr: { name: 'Caf√© de Paris', description: 'Caf√© de Paris Tavuk' },
                    en: { name: 'Caf√© de Paris', description: 'Caf√© de Paris Chicken' },
                    de: { name: 'Caf√© de Paris', description: 'Caf√© de Paris H√§hnchen' },
                    ru: { name: '–ö–∞—Ñ–µ –¥–µ –ü–∞—Ä–∏', description: '–ö–∞—Ñ–µ –¥–µ –ü–∞—Ä–∏ –ö—É—Ä–∏—Ü–∞' },
                    fr: { name: 'Caf√© de Paris', description: 'Poulet Caf√© de Paris' },
                    ar: { name: 'ŸÉÿßŸÅŸäŸá ÿØŸä ÿ®ÿßÿ±Ÿäÿ≥', description: 'ÿØÿ¨ÿßÿ¨ ŸÉÿßŸÅŸäŸá ÿØŸä ÿ®ÿßÿ±Ÿäÿ≥' }
                },
                ingredients: ['Tavuk', 'Caf√© de Paris Sosu', 'Pilav', 'Salata'],
                extras: []
            },
            {
                id: 'b2',
                category: 'bistro',
                price: 200,
                image: this.getAutoImagePath('b2', 'Barbek√º Soslu Tavuk', 'Bistro'),
                translations: {
                    tr: { name: 'Barbek√º Soslu Tavuk', description: 'Barbek√º Soslu Tavuk' },
                    en: { name: 'BBQ Sauce Chicken', description: 'BBQ Sauce Chicken' },
                    de: { name: 'H√§hnchen mit BBQ-Sauce', description: 'H√§hnchen mit BBQ-Sauce' },
                    ru: { name: '–ö—É—Ä–∏—Ü–∞ —Å —Å–æ—É—Å–æ–º –±–∞—Ä–±–µ–∫—é', description: '–ö—É—Ä–∏—Ü–∞ —Å —Å–æ—É—Å–æ–º –±–∞—Ä–±–µ–∫—é' },
                    fr: { name: 'Poulet √† la Sauce BBQ', description: 'Poulet √† la Sauce BBQ' },
                    ar: { name: 'ÿØÿ¨ÿßÿ¨ ÿ®ÿµŸÑÿµÿ© ÿßŸÑÿ®ÿßÿ±ÿ®ŸÉŸäŸà', description: 'ÿØÿ¨ÿßÿ¨ ÿ®ÿµŸÑÿµÿ© ÿßŸÑÿ®ÿßÿ±ÿ®ŸÉŸäŸà' }
                },
                ingredients: ['Tavuk', 'Barbek√º Sosu', 'Pilav', 'Salata'],
                extras: []
            },
            {
                id: 'b3',
                category: 'bistro',
                price: 190,
                image: this.getAutoImagePath('b3', 'Chicken Quesadilla', 'Bistro'),
                translations: {
                    tr: { name: 'Chicken Quesadilla', description: 'Chicken Quesadilla' },
                    en: { name: 'Chicken Quesadilla', description: 'Chicken Quesadilla' },
                    de: { name: 'H√§hnchen Quesadilla', description: 'H√§hnchen Quesadilla' },
                    ru: { name: '–ö—É—Ä–∏–Ω–∞—è –∫–µ—Å–∞–¥–∏–ª—å—è', description: '–ö—É—Ä–∏–Ω–∞—è –∫–µ—Å–∞–¥–∏–ª—å—è' },
                    fr: { name: 'Quesadilla au Poulet', description: 'Quesadilla au Poulet' },
                    ar: { name: 'ŸÉŸäÿ≥ÿßÿØŸäŸÑÿß ÿØÿ¨ÿßÿ¨', description: 'ŸÉŸäÿ≥ÿßÿØŸäŸÑÿß ÿØÿ¨ÿßÿ¨' }
                },
                ingredients: ['Tavuk', 'Peynir', 'Tortilla', 'Soƒüan', 'Biber'],
                extras: []
            },
            {
                id: 'b4',
                category: 'bistro',
                price: 220,
                image: this.getAutoImagePath('b4', 'Chicken Stroganoff', 'Bistro'),
                translations: {
                    tr: { name: 'Chicken Stroganoff', description: 'Chicken Stroganoff' },
                    en: { name: 'Chicken Stroganoff', description: 'Chicken Stroganoff' },
                    de: { name: 'H√§hnchen Stroganoff', description: 'H√§hnchen Stroganoff' },
                    ru: { name: '–ö—É—Ä–∏–Ω—ã–π —Å—Ç—Ä–æ–≥–∞–Ω–æ–≤', description: '–ö—É—Ä–∏–Ω—ã–π —Å—Ç—Ä–æ–≥–∞–Ω–æ–≤' },
                    fr: { name: 'Stroganoff au Poulet', description: 'Stroganoff au Poulet' },
                    ar: { name: 'ÿ≥ÿ™ÿ±Ÿàÿ∫ÿßŸÜŸàŸÅ ÿØÿ¨ÿßÿ¨', description: 'ÿ≥ÿ™ÿ±Ÿàÿ∫ÿßŸÜŸàŸÅ ÿØÿ¨ÿßÿ¨' }
                },
                ingredients: ['Tavuk', 'Krema', 'Mantar', 'Soƒüan', 'Pilav'],
                extras: []
            },
            {
                id: 'b5',
                category: 'bistro',
                price: 160,
                image: this.getAutoImagePath('b5', 'Daƒü Kekiƒüi Kremalƒ±', 'Bistro'),
                translations: {
                    tr: { name: 'Daƒü Kekiƒüi Kremalƒ±', description: 'Daƒü Kekiƒüi Kremalƒ± Tavuk' },
                    en: { name: 'Mountain Thyme Cream', description: 'Mountain Thyme Cream Chicken' },
                    de: { name: 'Bergthymian-Sahne', description: 'Bergthymian-Sahne H√§hnchen' },
                    ru: { name: '–ö—É—Ä–∏—Ü–∞ —Å –∫—Ä–µ–º–æ–º –∏–∑ –≥–æ—Ä–Ω–æ–≥–æ —Ç–∏–º—å—è–Ω–∞', description: '–ö—É—Ä–∏—Ü–∞ —Å –∫—Ä–µ–º–æ–º –∏–∑ –≥–æ—Ä–Ω–æ–≥–æ —Ç–∏–º—å—è–Ω–∞' },
                    fr: { name: 'Poulet √† la Cr√®me de Thym des Montagnes', description: 'Poulet √† la Cr√®me de Thym des Montagnes' },
                    ar: { name: 'ÿØÿ¨ÿßÿ¨ ÿ®ÿßŸÑŸÉÿ±ŸäŸÖÿ© ŸàÿßŸÑÿ≤ÿπÿ™ÿ± ÿßŸÑÿ¨ÿ®ŸÑŸä', description: 'ÿØÿ¨ÿßÿ¨ ÿ®ÿßŸÑŸÉÿ±ŸäŸÖÿ© ŸàÿßŸÑÿ≤ÿπÿ™ÿ± ÿßŸÑÿ¨ÿ®ŸÑŸä' }
                },
                ingredients: ['Tavuk', 'Krema', 'Daƒü Kekiƒüi', 'Pilav', 'Salata'],
                extras: []
            },
            {
                id: 'b6',
                category: 'bistro',
                price: 200,
                image: this.getAutoImagePath('b6', 'Ka≈üarlƒ± Mantarlƒ± Quesadilla', 'Bistro'),
                translations: {
                    tr: { name: 'Ka≈üarlƒ± Mantarlƒ± Quesadilla', description: 'Ka≈üarlƒ± Mantarlƒ± Quesadilla' },
                    en: { name: 'Cheesy Mushroom Quesadilla', description: 'Cheesy Mushroom Quesadilla' },
                    de: { name: 'K√§se-Pilz Quesadilla', description: 'K√§se-Pilz Quesadilla' },
                    ru: { name: '–ö–µ—Å–∞–¥–∏–ª—å—è —Å —Å—ã—Ä–æ–º –∏ –≥—Ä–∏–±–∞–º–∏', description: '–ö–µ—Å–∞–¥–∏–ª—å—è —Å —Å—ã—Ä–æ–º –∏ –≥—Ä–∏–±–∞–º–∏' },
                    fr: { name: 'Quesadilla au Fromage et aux Champignons', description: 'Quesadilla au Fromage et aux Champignons' },
                    ar: { name: 'ŸÉŸäÿ≥ÿßÿØŸäŸÑÿß ÿ®ÿßŸÑÿ¨ÿ®ŸÜ ŸàÿßŸÑŸÅÿ∑ÿ±', description: 'ŸÉŸäÿ≥ÿßÿØŸäŸÑÿß ÿ®ÿßŸÑÿ¨ÿ®ŸÜ ŸàÿßŸÑŸÅÿ∑ÿ±' }
                },
                ingredients: ['Ka≈üar Peyniri', 'Mantar', 'Tortilla', 'Soƒüan', 'Biber'],
                extras: []
            },
            {
                id: 'b7',
                category: 'bistro',
                price: 180,
                image: this.getAutoImagePath('b7', 'Mantarlƒ± K√∂ri Tavuk', 'Bistro'),
                translations: {
                    tr: { name: 'Mantarlƒ± K√∂ri Tavuk', description: 'Mantarlƒ± K√∂ri Tavuk' },
                    en: { name: 'Mushroom Curry Chicken', description: 'Mushroom Curry Chicken' },
                    de: { name: 'H√§hnchen mit Pilz-Curry', description: 'H√§hnchen mit Pilz-Curry' },
                    ru: { name: '–ö—É—Ä–∏—Ü–∞ —Å –≥—Ä–∏–±–∞–º–∏ –∏ –∫–∞—Ä—Ä–∏', description: '–ö—É—Ä–∏—Ü–∞ —Å –≥—Ä–∏–±–∞–º–∏ –∏ –∫–∞—Ä—Ä–∏' },
                    fr: { name: 'Poulet au Curry aux Champignons', description: 'Poulet au Curry aux Champignons' },
                    ar: { name: 'ÿØÿ¨ÿßÿ¨ ÿ®ÿßŸÑŸÉÿßÿ±Ÿä ŸàÿßŸÑŸÅÿ∑ÿ±', description: 'ÿØÿ¨ÿßÿ¨ ÿ®ÿßŸÑŸÉÿßÿ±Ÿä ŸàÿßŸÑŸÅÿ∑ÿ±' }
                },
                ingredients: ['Tavuk', 'Mantar', 'K√∂ri', 'Pilav', 'Salata'],
                extras: []
            },
            {
                id: 'b8',
                category: 'bistro',
                price: 190,
                image: this.getAutoImagePath('b8', 'Mexican Soslu Tavuk', 'Bistro'),
                translations: {
                    tr: { name: 'Mexican Soslu Tavuk', description: 'Mexican Soslu Tavuk' },
                    en: { name: 'Mexican Sauce Chicken', description: 'Mexican Sauce Chicken' },
                    de: { name: 'H√§hnchen mit mexikanischer Sauce', description: 'H√§hnchen mit mexikanischer Sauce' },
                    ru: { name: '–ö—É—Ä–∏—Ü–∞ —Å –º–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∏–º —Å–æ—É—Å–æ–º', description: '–ö—É—Ä–∏—Ü–∞ —Å –º–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∏–º —Å–æ—É—Å–æ–º' },
                    fr: { name: 'Poulet √† la Sauce Mexicaine', description: 'Poulet √† la Sauce Mexicaine' },
                    ar: { name: 'ÿØÿ¨ÿßÿ¨ ÿ®ÿßŸÑÿµŸÑÿµÿ© ÿßŸÑŸÖŸÉÿ≥ŸäŸÉŸäÿ©', description: 'ÿØÿ¨ÿßÿ¨ ÿ®ÿßŸÑÿµŸÑÿµÿ© ÿßŸÑŸÖŸÉÿ≥ŸäŸÉŸäÿ©' }
                },
                ingredients: ['Tavuk', 'Mexican Sosu', 'Pilav', 'Salata'],
                extras: []
            },
            {
                id: 'b9',
                category: 'bistro',
                price: 170,
                image: this.getAutoImagePath('b9', 'Tatlƒ± Acƒ± Soslu Tavuk', 'Bistro'),
                translations: {
                    tr: { name: 'Tatlƒ± Acƒ± Soslu Tavuk', description: 'Tatlƒ± Acƒ± Soslu Tavuk' },
                    en: { name: 'Sweet and Sour Chicken', description: 'Sweet and Sour Chicken' },
                    de: { name: 'H√§hnchen mit s√º√ü-saurer Sauce', description: 'H√§hnchen mit s√º√ü-saurer Sauce' },
                    ru: { name: '–ö—É—Ä–∏—Ü–∞ —Å –∫–∏—Å–ª–æ-—Å–ª–∞–¥–∫–∏–º —Å–æ—É—Å–æ–º', description: '–ö—É—Ä–∏—Ü–∞ —Å –∫–∏—Å–ª–æ-—Å–ª–∞–¥–∫–∏–º —Å–æ—É—Å–æ–º' },
                    fr: { name: 'Poulet √† la Sauce Aigre-Douce', description: 'Poulet √† la Sauce Aigre-Douce' },
                    ar: { name: 'ÿØÿ¨ÿßÿ¨ ÿ®ÿßŸÑÿµŸÑÿµÿ© ÿßŸÑÿ≠ŸÑŸàÿ© ŸàÿßŸÑÿ≠ÿßŸÖÿ∂ÿ©', description: 'ÿØÿ¨ÿßÿ¨ ÿ®ÿßŸÑÿµŸÑÿµÿ© ÿßŸÑÿ≠ŸÑŸàÿ© ŸàÿßŸÑÿ≠ÿßŸÖÿ∂ÿ©' }
                },
                ingredients: ['Tavuk', 'Tatlƒ± Acƒ± Sosu', 'Pilav', 'Salata'],
                extras: []
            },
            {
                id: 'b10',
                category: 'bistro',
                price: 160,
                image: this.getAutoImagePath('b10', 'Tavuk Wrap', 'Bistro'),
                translations: {
                    tr: { name: 'Tavuk Wrap', description: 'Tavuk Wrap' },
                    en: { name: 'Chicken Wrap', description: 'Chicken Wrap' },
                    de: { name: 'H√§hnchen Wrap', description: 'H√§hnchen Wrap' },
                    ru: { name: '–ö—É—Ä–∏–Ω—ã–π —Ä—ç–ø', description: '–ö—É—Ä–∏–Ω—ã–π —Ä—ç–ø' },
                    fr: { name: 'Wrap au Poulet', description: 'Wrap au Poulet' },
                    ar: { name: 'ÿ±ÿßÿ® ÿØÿ¨ÿßÿ¨', description: 'ÿ±ÿßÿ® ÿØÿ¨ÿßÿ¨' }
                },
                ingredients: ['Tavuk', 'Lavash', 'Marul', 'Domates', 'Soƒüan'],
                extras: []
            },
            {
                id: 'b11',
                category: 'bistro',
                price: 150,
                image: this.getAutoImagePath('b11', 'Viyana', 'Bistro'),
                translations: {
                    tr: { name: 'Viyana', description: 'Viyana Schnitzel' },
                    en: { name: 'Vienna', description: 'Vienna Schnitzel' },
                    de: { name: 'Wien', description: 'Wiener Schnitzel' },
                    ru: { name: '–í–µ–Ω–∞', description: '–í–µ–Ω—Å–∫–∏–π —à–Ω–∏—Ü–µ–ª—å' },
                    fr: { name: 'Vienne', description: 'Schnitzel de Vienne' },
                    ar: { name: 'ŸÅŸäŸäŸÜÿß', description: 'ÿ¥ŸÜŸäÿ™ÿ≤ŸÑ ŸÅŸäŸäŸÜÿß' }
                },
                ingredients: ['Schnitzel', 'Pilav', 'Salata', 'Limon'],
                extras: []
            },
            {
                id: 'litrelik-icecek',
                category: 'icecekler',
                price: 60,
                image: './images/litrelikicecek.jpg',
                translations: {
                    tr: { name: 'Litrelik ƒ∞√ßecek', description: 'Litrelik ƒ∞√ßecek' },
                    en: { name: 'Liter Drink', description: 'Liter Drink' },
                    de: { name: 'Litergetr√§nk', description: 'Litergetr√§nk' },
                    ru: { name: '–õ–∏—Ç—Ä–æ–≤—ã–π –Ω–∞–ø–∏—Ç–æ–∫', description: '–õ–∏—Ç—Ä–æ–≤—ã–π –Ω–∞–ø–∏—Ç–æ–∫' },
                    fr: { name: 'Boisson d\'un Litre', description: 'Boisson d\'un Litre' },
                    ar: { name: 'ŸÖÿ¥ÿ±Ÿàÿ® ŸÑÿ™ÿ±', description: 'ŸÖÿ¥ÿ±Ÿàÿ® ŸÑÿ™ÿ±' }
                },
                ingredients: ['ƒ∞√ßecek'],
                extras: []
            }
        ];
    }

    // Get embedded manti products
    getMantiProducts() {
        const mantiData = {
            "id": "manti",
            "name": {
                "tr": "Mantƒ±",
                "en": "Manti",
                "de": "Manti",
                "ru": "–ú–∞–Ω—Ç—ã",
                "fr": "Manti",
                "ar": "ŸÖŸÜÿ™Ÿä"
            },
            "products": [
                {
                    "id": "ma1",
                    "name": {
                        "tr": "Ev Yapƒ±mƒ± Mantƒ±",
                        "en": "Homemade Manti",
                        "de": "Hausgemachte Manti",
                        "ru": "–î–æ–º–∞—à–Ω–∏–µ –º–∞–Ω—Ç—ã",
                        "fr": "Manti Maison",
                        "ar": "ŸÖŸÜÿ™Ÿä ŸÖŸÜÿ≤ŸÑŸä"
                    },
                    "price": 200,
                    "description": {
                        "tr": "Ha≈ülanmƒ±≈ü Mantƒ±, %100 Dana Kƒ±yma (250gr), Tereyaƒüƒ±nda Kavrulmu≈ü Pul Biber ve Nane Sosu",
                        "en": "Boiled Manti, 100% Beef Mince (250gr), Red Pepper Flakes and Mint Sauce Fried in Butter",
                        "de": "Gekochte Manti, 100% Rindfleisch-Hackfleisch (250gr), In Butter gebratene Paprikaflocken und Minzsauce",
                        "ru": "–í–∞—Ä–µ–Ω—ã–µ –º–∞–Ω—Ç—ã, 100% –≥–æ–≤—è–∂–∏–π —Ñ–∞—Ä—à (250–≥—Ä), –û–±–∂–∞—Ä–µ–Ω–Ω—ã–µ –≤ –º–∞—Å–ª–µ —Ö–ª–æ–ø—å—è –ø–µ—Ä—Ü–∞ –∏ –º—è—Ç–Ω—ã–π —Å–æ—É—Å",
                        "fr": "Manti Bouillis, 100% Viande de B≈ìuf Hach√©e (250gr), Flocons de Piment Frits au Beurre et Sauce √† la Menthe",
                        "ar": "ŸÖŸÜÿ™Ÿä ŸÖÿ≥ŸÑŸàŸÇÿå 100% ŸÑÿ≠ŸÖ ÿ®ŸÇÿ±Ÿä ŸÖŸÅÿ±ŸàŸÖ (250ÿ∫)ÿå ÿ±ŸÇÿßÿ¶ŸÇ ŸÅŸÑŸÅŸÑ ŸÖÿ≠ŸÖÿ±ÿ© ÿ®ÿßŸÑÿ≤ÿ®ÿØÿ© ŸàÿµŸÑÿµÿ© ÿßŸÑŸÜÿπŸÜÿßÿπ"
                    },
                    "contents": {
                        "tr": [
                            "Ha≈ülanmƒ±≈ü Mantƒ±",
                            "%100 Dana Kƒ±yma (250gr)",
                            "Tereyaƒüƒ±nda Kavrulmu≈ü Pul Biber ve Nane Sosu"
                        ],
                        "en": [
                            "Boiled Manti",
                            "100% Beef Mince (250gr)",
                            "Red Pepper Flakes and Mint Sauce Fried in Butter"
                        ],
                        "de": [
                            "Gekochte Manti",
                            "100% Rindfleisch-Hackfleisch (250gr)",
                            "In Butter gebratene Paprikaflocken und Minzsauce"
                        ],
                        "ru": [
                            "–í–∞—Ä–µ–Ω—ã–µ –º–∞–Ω—Ç—ã",
                            "100% –≥–æ–≤—è–∂–∏–π —Ñ–∞—Ä—à (250–≥—Ä)",
                            "–û–±–∂–∞—Ä–µ–Ω–Ω—ã–µ –≤ –º–∞—Å–ª–µ —Ö–ª–æ–ø—å—è –ø–µ—Ä—Ü–∞ –∏ –º—è—Ç–Ω—ã–π —Å–æ—É—Å"
                        ],
                        "fr": [
                            "Manti Bouillis",
                            "100% Viande de B≈ìuf Hach√©e (250gr)",
                            "Flocons de Piment Frits au Beurre et Sauce √† la Menthe"
                        ],
                        "ar": [
                            "ŸÖŸÜÿ™Ÿä ŸÖÿ≥ŸÑŸàŸÇ",
                            "100% ŸÑÿ≠ŸÖ ÿ®ŸÇÿ±Ÿä ŸÖŸÅÿ±ŸàŸÖ (250ÿ∫)",
                            "ÿ±ŸÇÿßÿ¶ŸÇ ŸÅŸÑŸÅŸÑ ŸÖÿ≠ŸÖÿ±ÿ© ÿ®ÿßŸÑÿ≤ÿ®ÿØÿ© ŸàÿµŸÑÿµÿ© ÿßŸÑŸÜÿπŸÜÿßÿπ"
                        ]
                    },
                    "options": [
                        {
                            "id": "ma1_o1",
                            "label": {
                                "tr": "Sade Yoƒüurt",
                                "en": "Plain Yogurt",
                                "de": "Naturjoghurt",
                                "ru": "–û–±—ã—á–Ω—ã–π –π–æ–≥—É—Ä—Ç",
                                "fr": "Yaourt Nature",
                                "ar": "ÿ≤ÿ®ÿßÿØŸä ÿπÿßÿØŸä"
                            },
                            "price": 0
                        },
                        {
                            "id": "ma1_o2",
                            "label": {
                                "tr": "Sarƒ±msaklƒ± Yoƒüurt",
                                "en": "Garlic Yogurt",
                                "de": "Knoblauchjoghurt",
                                "ru": "–ô–æ–≥—É—Ä—Ç —Å —á–µ—Å–Ω–æ–∫–æ–º",
                                "fr": "Yaourt √† l'Ail",
                                "ar": "ÿ≤ÿ®ÿßÿØŸä ÿ®ÿßŸÑÿ´ŸàŸÖ"
                            },
                            "price": 0
                        }
                    ],
                    "extras": {
                        "drinkOptions": [
                            {
                                "id": "ma1_drink1",
                                "name": {
                                    "tr": "Ayran",
                                    "en": "Ayran",
                                    "de": "Ayran",
                                    "ru": "–ê–π—Ä–∞–Ω",
                                    "fr": "Ayran",
                                    "ar": "ÿπŸäÿ±ÿßŸÜ"
                                },
                                "price": 40
                            },
                            {
                                "id": "ma1_drink2",
                                "name": {
                                    "tr": "Kutu ƒ∞√ßecek",
                                    "en": "Can Drink",
                                    "de": "Dosengetr√§nk",
                                    "ru": "–ù–∞–ø–∏—Ç–æ–∫ –≤ –±–∞–Ω–∫–µ",
                                    "fr": "Boisson en Canette",
                                    "ar": "ŸÖÿ¥ÿ±Ÿàÿ® ŸÖÿπŸÑÿ®"
                                },
                                "price": 60
                            },
                            {
                                "id": "ma1_drink3",
                                "name": {
                                    "tr": "Litrelik ƒ∞√ßecek",
                                    "en": "Liter Drink",
                                    "de": "Litergetr√§nk",
                                    "ru": "–õ–∏—Ç—Ä–æ–≤—ã–π –Ω–∞–ø–∏—Ç–æ–∫",
                                    "fr": "Boisson d'un Litre",
                                    "ar": "ŸÖÿ¥ÿ±Ÿàÿ® ŸÑÿ™ÿ±"
                                },
                                "price": 90
                            }
                        ]
                    }
                }
            ]
        };

        return mantiData.products.map(product => ({
            id: product.id,
            category: 'manti',
            price: product.price,
            image: `https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400&h=300&fit=crop&sig=${product.id}`,
            translations: {
                tr: { name: product.name.tr, description: product.description.tr },
                en: { name: product.name.en, description: product.description.en },
                de: { name: product.name.de, description: product.description.de },
                ru: { name: product.name.ru, description: product.description.ru },
                fr: { name: product.name.fr, description: product.description.fr },
                ar: { name: product.name.ar, description: product.description.ar }
            },
            ingredients: product.contents[this.currentLanguage] || product.contents.tr || [],
            extras: [
                {
                    type: 'radio',
                    name: 'Yoƒüurt Se√ßeneƒüi',
                    translations: {
                        tr: 'Yoƒüurt Se√ßeneƒüi',
                        en: 'Yogurt Option',
                        de: 'Joghurt-Option',
                        ru: '–í–∞—Ä–∏–∞–Ω—Ç –π–æ–≥—É—Ä—Ç–∞',
                        fr: 'Option Yaourt',
                        ar: 'ÿÆŸäÿßÿ± ÿßŸÑÿ≤ÿ®ÿßÿØŸä'
                    },
                    options: product.options.map(option => ({
                        id: option.id,
                        name: option.label[this.currentLanguage] || option.label.tr,
                        translations: {
                            tr: option.label.tr,
                            en: option.label.en,
                            de: option.label.de,
                            ru: option.label.ru,
                            fr: option.label.fr,
                            ar: option.label.ar
                        },
                        priceDelta: option.price
                    }))
                },
                {
                    type: 'checkbox',
                    name: 'ƒ∞√ßecek Se√ßenekleri',
                    translations: {
                        tr: 'ƒ∞√ßecek Se√ßenekleri',
                        en: 'Drink Options',
                        de: 'Getr√§nkeoptionen',
                        ru: '–í–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Ç–∫–æ–≤',
                        fr: 'Options de Boisson',
                        ar: 'ÿÆŸäÿßÿ±ÿßÿ™ ÿßŸÑŸÖÿ¥ÿ±Ÿàÿ®ÿßÿ™'
                    },
                    options: product.extras.drinkOptions.map(drink => ({
                        id: drink.id,
                        name: drink.name[this.currentLanguage] || drink.name.tr,
                        translations: {
                            tr: drink.name.tr,
                            en: drink.name.en,
                            de: drink.name.de,
                            ru: drink.name.ru,
                            fr: drink.name.fr,
                            ar: drink.name.ar
                        },
                        priceDelta: drink.price
                    }))
                }
            ]
        }));
    }

    // Get embedded kofte products
    getKofteProducts() {
        const data = {
            "id": "kofte",
            "name": {
                "tr": "K√∂fte Spesiyel",
                "en": "Meatball Special",
                "de": "Frikadellen Spezial",
                "ru": "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—Ä–∏–∫–∞–¥–µ–ª—å–∫–∏",
                "fr": "Sp√©cial Boulettes",
                "ar": "ŸÉŸÅÿ™ÿ© ÿÆÿßÿµÿ©"
            },
            "products": [
                {
                    "id": "k1",
                    "name": {
                        "tr": "≈ûefin Izgara K√∂ftesi",
                        "en": "Chef's Grilled Meatballs",
                        "de": "Chefs Gegrillte Frikadellen",
                        "ru": "–ñ–∞—Ä–µ–Ω—ã–µ —Ñ—Ä–∏–∫–∞–¥–µ–ª—å–∫–∏ —à–µ—Ñ–∞",
                        "fr": "Boulettes Grill√©es du Chef",
                        "ar": "ŸÉŸÅÿ™ÿ© ŸÖÿ¥ŸàŸäÿ© ŸÖŸÜ ÿßŸÑÿ¥ŸäŸÅ"
                    },
                    "price": 300,
                    "description": {
                        "tr": "180gr Izgara K√∂fte, Pilav, Salata",
                        "en": "180gr Grilled Meatballs, Rice, Salad",
                        "de": "180gr Gegrillte Frikadellen, Reis, Salat",
                        "ru": "180–≥ –∂–∞—Ä–µ–Ω—ã–µ —Ñ—Ä–∏–∫–∞–¥–µ–ª—å–∫–∏, —Ä–∏—Å, —Å–∞–ª–∞—Ç",
                        "fr": "180gr Boulettes Grill√©es, Riz, Salade",
                        "ar": "180ÿ∫ ŸÉŸÅÿ™ÿ© ŸÖÿ¥ŸàŸäÿ©ÿå ÿ£ÿ±ÿ≤ÿå ÿ≥ŸÑÿ∑ÿ©"
                    },
                    "contents": {
                        "tr": ["180gr Izgara K√∂fte", "Pilav", "Salata"],
                        "en": ["180gr Grilled Meatballs", "Rice", "Salad"],
                        "de": ["180gr Gegrillte Frikadellen", "Reis", "Salat"],
                        "ru": ["180–≥ –∂–∞—Ä–µ–Ω—ã–µ —Ñ—Ä–∏–∫–∞–¥–µ–ª—å–∫–∏", "–†–∏—Å", "–°–∞–ª–∞—Ç"],
                        "fr": ["180gr Boulettes Grill√©es", "Riz", "Salade"],
                        "ar": ["180ÿ∫ ŸÉŸÅÿ™ÿ© ŸÖÿ¥ŸàŸäÿ©", "ÿ£ÿ±ÿ≤", "ÿ≥ŸÑÿ∑ÿ©"]
                    },
                    "options": [
                        {
                            "id": "k1_o1",
                            "label": {"tr": "Sade K√∂fte", "en": "Plain Meatballs", "de": "Einfache Frikadellen", "ru": "–û–±—ã—á–Ω—ã–µ —Ñ—Ä–∏–∫–∞–¥–µ–ª—å–∫–∏", "fr": "Boulettes Simples", "ar": "ŸÉŸÅÿ™ÿ© ÿπÿßÿØŸäÿ©"},
                            "price": 0
                        },
                        {
                            "id": "k1_o2",
                            "label": {"tr": "Men√º (Cips + Kola)", "en": "Menu (Chips + Cola)", "de": "Men√º (Chips + Cola)", "ru": "–ú–µ–Ω—é (–ß–∏–ø—Å—ã + –ö–æ–ª–∞)", "fr": "Menu (Chips + Cola)", "ar": "ŸÇÿßÿ¶ŸÖÿ© (ÿ±ŸÇÿßÿ¶ŸÇ + ŸÉŸàŸÑÿß)"},
                            "price": 80
                        }
                    ]
                },
                {
                    "id": "k2",
                    "name": {
                        "tr": "Ekmek Arasƒ± K√∂fte",
                        "en": "Meatball Sandwich",
                        "de": "Frikadellen-Sandwich",
                        "ru": "–°—ç–Ω–¥–≤–∏—á —Å —Ñ—Ä–∏–∫–∞–¥–µ–ª—å–∫–∞–º–∏",
                        "fr": "Sandwich aux Boulettes",
                        "ar": "ÿ≥ÿßŸÜÿØŸàŸäÿ™ÿ¥ ŸÉŸÅÿ™ÿ©"
                    },
                    "price": 200,
                    "description": {
                        "tr": "120gr Ekmek Arasƒ± K√∂fte",
                        "en": "120gr Meatball Sandwich",
                        "de": "120gr Frikadellen-Sandwich",
                        "ru": "120–≥ —Å—ç–Ω–¥–≤–∏—á —Å —Ñ—Ä–∏–∫–∞–¥–µ–ª—å–∫–∞–º–∏",
                        "fr": "120gr Sandwich aux Boulettes",
                        "ar": "120ÿ∫ ÿ≥ÿßŸÜÿØŸàŸäÿ™ÿ¥ ŸÉŸÅÿ™ÿ©"
                    },
                    "contents": {
                        "tr": ["120gr Ekmek Arasƒ± K√∂fte"],
                        "en": ["120gr Meatball Sandwich"],
                        "de": ["120gr Frikadellen-Sandwich"],
                        "ru": ["120–≥ —Å—ç–Ω–¥–≤–∏—á —Å —Ñ—Ä–∏–∫–∞–¥–µ–ª—å–∫–∞–º–∏"],
                        "fr": ["120gr Sandwich aux Boulettes"],
                        "ar": ["120ÿ∫ ÿ≥ÿßŸÜÿØŸàŸäÿ™ÿ¥ ŸÉŸÅÿ™ÿ©"]
                    },
                    "options": [
                        {"id": "k2_o1", "label": {"tr": "Sade Ekmek Arasƒ±", "en": "Plain Sandwich", "de": "Einfaches Sandwich", "ru": "–û–±—ã—á–Ω—ã–π —Å—ç–Ω–¥–≤–∏—á", "fr": "Sandwich Simple", "ar": "ÿ≥ÿßŸÜÿØŸàŸäÿ™ÿ¥ ÿπÿßÿØŸä"}, "price": 0},
                        {"id": "k2_o2", "label": {"tr": "Men√º (Cips + Kola)", "en": "Menu (Chips + Cola)", "de": "Men√º (Chips + Cola)", "ru": "–ú–µ–Ω—é (–ß–∏–ø—Å—ã + –ö–æ–ª–∞)", "fr": "Menu (Chips + Cola)", "ar": "ŸÇÿßÿ¶ŸÖÿ© (ÿ±ŸÇÿßÿ¶ŸÇ + ŸÉŸàŸÑÿß)"}, "price": 80}
                    ]
                },
                {
                    "id": "k3",
                    "name": {
                        "tr": "Ekmek Arasƒ± Ka≈üarlƒ± K√∂fte",
                        "en": "Cheddar Meatball Sandwich",
                        "de": "Frikadellen-Sandwich mit K√§se",
                        "ru": "–°—ç–Ω–¥–≤–∏—á —Å —Ñ—Ä–∏–∫–∞–¥–µ–ª—å–∫–∞–º–∏ –∏ —Å—ã—Ä–æ–º",
                        "fr": "Sandwich aux Boulettes au Fromage",
                        "ar": "ÿ≥ÿßŸÜÿØŸàŸäÿ™ÿ¥ ŸÉŸÅÿ™ÿ© ÿ®ÿßŸÑÿ¨ÿ®ŸÜ"
                    },
                    "price": 220,
                    "description": {
                        "tr": "120gr Ekmek Arasƒ± Ka≈üarlƒ± K√∂fte",
                        "en": "120gr Cheddar Meatball Sandwich",
                        "de": "120gr Frikadellen-Sandwich mit K√§se",
                        "ru": "120–≥ —Å—ç–Ω–¥–≤–∏—á —Å —Ñ—Ä–∏–∫–∞–¥–µ–ª—å–∫–∞–º–∏ –∏ —Å—ã—Ä–æ–º",
                        "fr": "120gr Sandwich aux Boulettes au Fromage",
                        "ar": "120ÿ∫ ÿ≥ÿßŸÜÿØŸàŸäÿ™ÿ¥ ŸÉŸÅÿ™ÿ© ÿ®ÿßŸÑÿ¨ÿ®ŸÜ"
                    },
                    "contents": {
                        "tr": ["120gr Ekmek Arasƒ± Ka≈üarlƒ± K√∂fte"],
                        "en": ["120gr Cheddar Meatball Sandwich"],
                        "de": ["120gr Frikadellen-Sandwich mit K√§se"],
                        "ru": ["120–≥ —Å—ç–Ω–¥–≤–∏—á —Å —Ñ—Ä–∏–∫–∞–¥–µ–ª—å–∫–∞–º–∏ –∏ —Å—ã—Ä–æ–º"],
                        "fr": ["120gr Sandwich aux Boulettes au Fromage"],
                        "ar": ["120ÿ∫ ÿ≥ÿßŸÜÿØŸàŸäÿ™ÿ¥ ŸÉŸÅÿ™ÿ© ÿ®ÿßŸÑÿ¨ÿ®ŸÜ"]
                    },
                    "options": [
                        {"id": "k3_o1", "label": {"tr": "Sade Ka≈üarlƒ± K√∂fte", "en": "Plain Cheddar Meatballs", "de": "Einfache Frikadellen mit K√§se", "ru": "–û–±—ã—á–Ω—ã–µ —Ñ—Ä–∏–∫–∞–¥–µ–ª—å–∫–∏ —Å —Å—ã—Ä–æ–º", "fr": "Boulettes au Fromage Simples", "ar": "ŸÉŸÅÿ™ÿ© ÿ®ÿßŸÑÿ¨ÿ®ŸÜ ÿπÿßÿØŸäÿ©"}, "price": 0},
                        {"id": "k3_o2", "label": {"tr": "Men√º (Cips + Kola)", "en": "Menu (Chips + Cola)", "de": "Men√º (Chips + Cola)", "ru": "–ú–µ–Ω—é (–ß–∏–ø—Å—ã + –ö–æ–ª–∞)", "fr": "Menu (Chips + Cola)", "ar": "ŸÇÿßÿ¶ŸÖÿ© (ÿ±ŸÇÿßÿ¶ŸÇ + ŸÉŸàŸÑÿß)"}, "price": 80}
                    ]
                }
            ]
        };

        return data.products.map(product => ({
            id: product.id,
            category: 'kofte-spesiyel',
            price: product.price,
            image: `https://images.unsplash.com/photo-1550547660-d9450f859349?w=400&h=300&fit=crop&sig=${product.id}`,
            translations: {
                tr: { name: product.name.tr, description: product.description.tr },
                en: { name: product.name.en, description: product.description.en },
                de: { name: product.name.de, description: product.description.de },
                ru: { name: product.name.ru, description: product.description.ru },
                fr: { name: product.name.fr, description: product.description.fr },
                ar: { name: product.name.ar, description: product.description.ar }
            },
            ingredients: product.contents[this.currentLanguage] || product.contents.tr || [],
            extras: [
                {
                    type: 'radio',
                    name: 'Servis',
                    translations: { tr: 'Servis', en: 'Serving', de: 'Servieren', ru: '–ü–æ–¥–∞—á–∞', fr: 'Service', ar: 'ÿ™ŸÇÿØŸäŸÖ' },
                    options: (product.options || []).map(option => ({
                        id: option.id,
                        name: option.label[this.currentLanguage] || option.label.tr,
                        translations: {
                            tr: option.label.tr,
                            en: option.label.en,
                            de: option.label.de,
                            ru: option.label.ru,
                            fr: option.label.fr,
                            ar: option.label.ar
                        },
                        priceDelta: option.price
                    }))
                }
            ]
        }));
    }

    // Minimal seed products used when JSON cannot be fetched
    getSeedProducts() {
        return [];
    }

    // Allow setting products from external JSON
    setProductsFromJson(jsonData) {
        try {
            const data = Array.isArray(jsonData) ? jsonData : JSON.parse(jsonData);
            if (!Array.isArray(data)) return;
            this.products = data;
            this.renderProducts();
        } catch (e) {
            console.error('Invalid products JSON', e);
        }
    }

    // Allow setting products directly from pizza.json structure
    setProductsFromPizzaJson(jsonData) {
        try {
            const data = typeof jsonData === 'string' ? JSON.parse(jsonData) : jsonData;
            if (!data || !Array.isArray(data.products)) return;
            this.products = data.products.map(product => ({
                id: product.id,
                category: 'pizzalar',
                price: product.price,
                image: `https://images.unsplash.com/photo-1604382354936-07c5d9983bd3?w=400&h=300&fit=crop&sig=${product.id}`,
                translations: {
                    tr: { name: product.name.tr, description: product.description.tr },
                    en: { name: product.name.en, description: product.description.en },
                    de: { name: product.name.de, description: product.description.de },
                    ru: { name: product.name.ru, description: product.description.ru },
                    fr: { name: product.name.fr, description: product.description.fr },
                    ar: { name: product.name.ar, description: product.description.ar }
                },
                ingredients: product.contents[this.currentLanguage] || product.contents.tr || [],
                extras: [{
                    type: 'radio',
                    name: 'Boyut',
                    translations: {
                        tr: 'Boyut',
                        en: 'Size',
                        de: 'Gr√∂√üe',
                        ru: '–†–∞–∑–º–µ—Ä',
                        fr: 'Taille',
                        ar: 'ÿßŸÑÿ≠ÿ¨ŸÖ'
                    },
                    options: (product.options || []).map(option => ({
                        id: option.id,
                        name: option.label[this.currentLanguage] || option.label.tr,
                        translations: {
                            tr: option.label.tr,
                            en: option.label.en,
                            de: option.label.de,
                            ru: option.label.ru,
                            fr: option.label.fr,
                            ar: option.label.ar
                        },
                        priceDelta: option.price
                    }))
                }]
            }));
            this.renderProducts();
        } catch (e) {
            console.error('Invalid pizza JSON structure', e);
        }
    }

    renderProducts() {
        const productsGrid = document.getElementById('productsGrid');
        if (!productsGrid) return;

        let filteredProducts = this.currentCategory === 'all' 
            ? this.products 
            : this.products.filter(product => product.category === this.currentCategory);

        // When showing all, order by menu category sequence
        if (this.currentCategory === 'all') {
            const categoryOrder = [
                'pizzalar',
                'ayvalik-tostu',
                'soguk-sandvic',
                'tavuk-doner',
                'et-doner',
                'makarnalar',
                'manti',
                'hamburger',
                'kofte-spesiyel',
                'aperatifler',
                'bistro',
                'salata',
                'icecekler'
            ];
            const orderIndex = new Map(categoryOrder.map((c, i) => [c, i]));
            filteredProducts = [...filteredProducts].sort((a, b) => {
                const ai = orderIndex.has(a.category) ? orderIndex.get(a.category) : Number.MAX_SAFE_INTEGER;
                const bi = orderIndex.has(b.category) ? orderIndex.get(b.category) : Number.MAX_SAFE_INTEGER;
                return ai - bi;
            });
        }

        if (filteredProducts.length === 0) {
            const emptyText = {
                tr: 'Hen√ºz √ºr√ºn eklenmedi',
                en: 'No products yet',
                ru: '–¢–æ–≤–∞—Ä—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã',
                de: 'Noch keine Produkte',
                fr: 'Aucun produit pour le moment',
                ar: 'ŸÑÿß ÿ™Ÿàÿ¨ÿØ ŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿ®ÿπÿØ'
            };
            productsGrid.innerHTML = `<div class="no-products">${emptyText[this.currentLanguage] || emptyText.en}</div>`;
            return;
        }

        productsGrid.innerHTML = filteredProducts.map(product => {
            const translation = product.translations[this.currentLanguage] || product.translations['en'];
            // Localized ingredients for card preview
            const lang = this.currentLanguage || 'tr';
            let ingList = [];
            if (Array.isArray(product.ingredients)) {
                ingList = product.ingredients;
            } else if (product.ingredients && typeof product.ingredients === 'object') {
                ingList = product.ingredients[lang] || product.ingredients.tr || [];
            }
            const hideDescription = product.category === 'pizzalar' || product.category === 'ayvalik-tostu';
            const descriptionHtml = hideDescription ? '' : `<p class="product-description">${this.getDisplayDescription(product, translation)}</p>`;
            const ingredientsHtml = (Array.isArray(ingList) && ingList.length)
                ? `<div class="product-ingredients"><strong data-translate="ingredients">ƒ∞√ßerikler</strong>: ${ingList.join(', ')}</div>`
                : '';
            return `
                <div class="product-card" data-category="${product.category}">
                    <img src="${product.image}" alt="${translation.name}" class="product-image" loading="lazy">
                    <div class="product-content">
                        <h3 class="product-name">${translation.name}</h3>
                        ${descriptionHtml}
                        ${ingredientsHtml}
                        <div class="product-footer">
                            <span class="product-price">‚Ç∫${product.price}</span>
                            <button class="product-details-btn" data-product-id="${product.id}">
                                <i class="fas fa-shopping-cart"></i>
                                <span data-translate="product_details">Sipari≈ü Ver</span>
                            </button>
                        </div>
                    </div>
                </div>
            `;
        }).join('');

        // Update translations for new elements
        this.updateTranslations();
    }

    // Theme System
    loadTheme() {
        const saved = localStorage.getItem('restaurant_theme');
        this.currentTheme = (saved === 'light' || saved === 'dark') ? saved : 'light';
        document.documentElement.setAttribute('data-theme', this.currentTheme);
        const cb = document.getElementById('themeToggle');
        if (cb) cb.checked = this.currentTheme === 'light';
    }

    toggleTheme(isLight) {
        this.currentTheme = isLight ? 'light' : 'dark';
        document.documentElement.setAttribute('data-theme', this.currentTheme);
        localStorage.setItem('restaurant_theme', this.currentTheme);
    }

    // Event Listeners
    setupEventListeners() {
        // Language modal
        const languageModal = document.getElementById('languageModal');
        const languageToggle = document.getElementById('languageToggle');
        const modalClose = document.querySelector('.modal-close');
        const languageBtns = document.querySelectorAll('.language-btn');

        if (languageToggle) {
            languageToggle.addEventListener('click', () => {
                if (languageModal) {
                    languageModal.classList.add('show');
                }
            });
        }

        if (modalClose) {
            modalClose.addEventListener('click', () => {
                this.hideLanguageModal();
            });
        }

        if (languageModal) {
            languageModal.addEventListener('click', (e) => {
                if (e.target === languageModal) {
                    this.hideLanguageModal();
                }
            });
        }

        languageBtns.forEach(btn => {
            btn.addEventListener('click', (e) => {
                const lang = e.currentTarget.getAttribute('data-lang');
                if (this.isValidLanguage(lang)) {
                    this.currentLanguage = lang;
                    localStorage.setItem('restaurant_language', lang);
                    this.updateLanguage();
                    this.renderProducts();
                    this.hideLanguageModal();
                }
            });
        });

        // Category navigation
        const categoryBtns = document.querySelectorAll('.category-btn');
        const prevBtn = document.getElementById('prevCategory');
        const nextBtn = document.getElementById('nextCategory');
        const categoriesScroll = document.getElementById('categoriesScroll');

        categoryBtns.forEach(btn => {
            btn.addEventListener('click', (e) => {
                const category = e.currentTarget.getAttribute('data-category');
                this.currentCategory = category;
                
                // Update active state
                categoryBtns.forEach(b => b.classList.remove('active'));
                e.currentTarget.classList.add('active');
                
                this.renderProducts();
            });
        });

        // Category scroll navigation
        if (prevBtn && categoriesScroll) {
            prevBtn.addEventListener('click', () => {
                categoriesScroll.scrollBy({ left: -200, behavior: 'smooth' });
            });
        }

        if (nextBtn && categoriesScroll) {
            nextBtn.addEventListener('click', () => {
                categoriesScroll.scrollBy({ left: 200, behavior: 'smooth' });
            });
        }

        // Product details modal - Open modal instead of adding to cart
        document.addEventListener('click', (e) => {
            if (e.target.closest('.product-details-btn')) {
                const btn = e.target.closest('.product-details-btn');
                const productId = btn.getAttribute('data-product-id');
                this.showProductModal(productId);
            }
        });

        // QR Modal - open on QR image click
        const qrImg = document.querySelector('.qr-image');
        const qrModal = document.getElementById('qrModal');
        const qrModalClose = document.getElementById('qrModalClose');
        if (qrImg && qrModal) {
            qrImg.addEventListener('click', () => {
                const modalImg = document.getElementById('qrModalImg');
                if (modalImg) {
                    modalImg.src = qrImg.getAttribute('src') || './qr.png';
                    modalImg.alt = qrImg.getAttribute('alt') || 'QR';
                }
                qrModal.classList.add('show');
            });
            if (qrModalClose) {
                qrModalClose.addEventListener('click', () => qrModal.classList.remove('show'));
            }
            qrModal.addEventListener('click', (ev) => {
                if (ev.target === qrModal) {
                    qrModal.classList.remove('show');
                }
            });
        }

        // Add to cart
        document.addEventListener('click', (e) => {
            if (e.target.closest('.add-to-cart-btn')) {
                const btn = e.target.closest('.add-to-cart-btn');
                const productId = btn.getAttribute('data-product-id');
                this.addToCart(productId);
            }
        });

            // WhatsApp order button
            const whatsappBtn = document.getElementById('whatsappOrderBtn');
            if (whatsappBtn) {
                whatsappBtn.addEventListener('click', () => {
                    this.sendWhatsAppOrder();
                });
            }

            // Hero Download button - PWA Install
            const heroInstallBtn = document.getElementById('heroInstallBtn');
            if (heroInstallBtn) {
                heroInstallBtn.addEventListener('click', () => {
                    if (this.deferredPrompt) {
                        this.deferredPrompt.prompt();
                        this.deferredPrompt.userChoice.then((choiceResult) => {
                            if (choiceResult.outcome === 'accepted') {
                                console.log('User accepted the install prompt');
                            }
                            this.deferredPrompt = null;
                        });
                    }
                });
            }

            // Logo click - Scroll to top
            const logo = document.querySelector('.logo');
            if (logo) {
                logo.addEventListener('click', (e) => {
                    e.preventDefault();
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                });
            }

        // Theme toggle
        const themeToggle = document.getElementById('themeToggle');
        if (themeToggle) {
            themeToggle.addEventListener('change', (e) => {
                this.toggleTheme(e.currentTarget.checked);
            });
        }

        // CTA button
        const ctaButton = document.querySelector('.cta-button');
        if (ctaButton) {
            ctaButton.addEventListener('click', () => {
                document.querySelector('.products').scrollIntoView({ behavior: 'smooth' });
            });
        }

        // Header scroll effect
        window.addEventListener('scroll', () => {
            const header = document.getElementById('header');
            if (header) {
                if (window.scrollY > 100) {
                    header.classList.add('scrolled');
                } else {
                    header.classList.remove('scrolled');
                }
            }
        });

        // Product modal close
        const productModal = document.getElementById('productModal');
        const productModalClose = document.getElementById('productModalClose');
        
        if (productModalClose) {
            productModalClose.addEventListener('click', () => {
                this.hideProductModal();
            });
        }

        if (productModal) {
            productModal.addEventListener('click', (e) => {
                if (e.target === productModal) {
                    this.hideProductModal();
                }
            });
        }

        // Modal i√ßindeki Sipari≈ü Ver butonu
        const productModalOrderBtn = document.getElementById('productModalOrderBtn');
        if (productModalOrderBtn) {
            productModalOrderBtn.addEventListener('click', () => {
                if (this.currentProduct) {
                    this.addToCart(this.currentProduct.id);
                    this.hideProductModal();
                }
            });
        }

        // Keyboard navigation
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.hideLanguageModal();
                this.hideProductModal();
            }
        });

        // Touch gestures for mobile
        let startX = 0;
        let startY = 0;

        document.addEventListener('touchstart', (e) => {
            startX = e.touches[0].clientX;
            startY = e.touches[0].clientY;
        });

        document.addEventListener('touchend', (e) => {
            if (!startX || !startY) return;

            const endX = e.changedTouches[0].clientX;
            const endY = e.changedTouches[0].clientY;
            const diffX = startX - endX;
            const diffY = startY - endY;

            // Horizontal swipe
            if (Math.abs(diffX) > Math.abs(diffY) && Math.abs(diffX) > 50) {
                if (diffX > 0) {
                    // Swipe left - next category
                    if (nextBtn) nextBtn.click();
                } else {
                    // Swipe right - previous category
                    if (prevBtn) prevBtn.click();
                }
            }

            startX = 0;
            startY = 0;
        });
    }

    showProductModal(productId) {
        const product = this.products.find(p => p.id === productId);
        if (!product) return;

        const translation = product.translations[this.currentLanguage] || product.translations['en'];
        const modal = document.getElementById('productModal');
        
        if (!modal) return;

        // Update modal content
        document.getElementById('productModalImg').src = product.image;
        document.getElementById('productModalImg').alt = translation.name;
        document.getElementById('productModalName').textContent = translation.name;
		document.getElementById('productModalDescription').textContent = this.getDisplayDescription(product, translation);
        document.getElementById('productModalPrice').textContent = `‚Ç∫${product.price}`;
        this.currentProduct = product;
        this.currentSelections = { extras: {}, removedIngredients: new Set() };
        this.renderExtrasAndIngredients();
        this.updateTotalPrice();

        // Show modal
        modal.classList.add('show');
        document.body.style.overflow = 'hidden';
    }

    hideProductModal() {
        const modal = document.getElementById('productModal');
        if (modal) {
            modal.classList.remove('show');
            document.body.style.overflow = '';
        }
    }

    // Render extras (radio/checkbox) and removable ingredients
    renderExtrasAndIngredients() {
        const t = this.getTranslations()[this.currentLanguage];
        const container = document.querySelector('.product-modal-info');
        if (!container || !this.currentProduct) return;

        // Remove old dynamic blocks if exist
        const oldExtras = container.querySelector('.extras-groups');
        if (oldExtras) oldExtras.remove();
        const oldIngredients = container.querySelector('.ingredients-list');
        if (oldIngredients) oldIngredients.remove();
        const oldTotal = container.querySelector('.modal-total');
        if (oldTotal) oldTotal.remove();

        const frag = document.createDocumentFragment();

        // Ingredients (removable)
        if (Array.isArray(this.currentProduct.ingredients)) {
            const ingWrap = document.createElement('div');
            ingWrap.className = 'ingredients-list';
            const title = document.createElement('h4');
            title.textContent = t.ingredients;
            ingWrap.appendChild(title);

            const list = document.createElement('div');
            list.className = 'chips';
            this.currentProduct.ingredients.forEach((ing) => {
                const chip = document.createElement('label');
                chip.className = 'chip removable';
                const input = document.createElement('input');
                input.type = 'checkbox';
                input.checked = true; // default included
                input.addEventListener('change', () => {
                    if (input.checked) {
                        this.currentSelections.removedIngredients.delete(ing);
                    } else {
                        this.currentSelections.removedIngredients.add(ing);
                    }
                });
                const span = document.createElement('span');
                span.textContent = this.translateIngredient(ing, this.currentLanguage);
                chip.appendChild(input);
                chip.appendChild(span);
                list.appendChild(chip);
            });
            ingWrap.appendChild(list);
            frag.appendChild(ingWrap);
        }

        // Extras
        if (Array.isArray(this.currentProduct.extras)) {
            const extrasWrap = document.createElement('div');
            extrasWrap.className = 'extras-groups';
            const title = document.createElement('h4');
            title.textContent = t.extras;
            extrasWrap.appendChild(title);

            this.currentProduct.extras.forEach((group, groupIdx) => {
                const groupBlock = document.createElement('div');
                groupBlock.className = 'extra-group';
                const groupTitle = document.createElement('h5');
                const groupLabelRaw = (group.translations && group.translations[this.currentLanguage]) || group.name || '';
                groupTitle.textContent = this.normalizeLabel(groupLabelRaw);
                groupBlock.appendChild(groupTitle);

                const type = group.type === 'radio' ? 'radio' : 'checkbox';
                const optionsWrap = document.createElement('div');
                optionsWrap.className = 'extra-options';

                group.options.forEach((opt, optIdx) => {
                    const label = document.createElement('label');
                    label.className = 'option-row';
                    const input = document.createElement('input');
                    input.type = type;
                    input.name = `extra_${groupIdx}`;
                    input.value = opt.id ?? `${groupIdx}_${optIdx}`;
                    const priceDelta = Number(opt.priceDelta || 0);
                    input.addEventListener('change', () => {
                        if (type === 'radio') {
                            this.currentSelections.extras[groupIdx] = [input.value];
                        } else {
                            const current = new Set(this.currentSelections.extras[groupIdx] || []);
                            if (input.checked) current.add(input.value); else current.delete(input.value);
                            this.currentSelections.extras[groupIdx] = Array.from(current);
                        }
                        this.updateTotalPrice();
                    });

                    const optLabelRaw = (opt.translations && opt.translations[this.currentLanguage]) || opt.name || '';
                    const spanText = document.createElement('span');
                    spanText.textContent = this.normalizeLabel(optLabelRaw);
                    const spanPrice = document.createElement('span');
                    spanPrice.className = 'option-price';
                    if (priceDelta) spanPrice.textContent = `+‚Ç∫${priceDelta}`;
                    label.appendChild(input);
                    label.appendChild(spanText);
                    label.appendChild(spanPrice);
                    optionsWrap.appendChild(label);
                });

                groupBlock.appendChild(optionsWrap);
                extrasWrap.appendChild(groupBlock);
            });

            frag.appendChild(extrasWrap);
        }

        // Total
        const totalRow = document.createElement('div');
        totalRow.className = 'modal-total';
        const totalLabel = document.createElement('span');
        totalLabel.textContent = t.total;
        const totalValue = document.createElement('strong');
        totalValue.id = 'modalTotalPrice';
        totalRow.appendChild(totalLabel);
        totalRow.appendChild(totalValue);
        frag.appendChild(totalRow);

        container.appendChild(frag);
    }

    // Compute price with selected extras
    updateTotalPrice() {
        if (!this.currentProduct) return;
        let total = Number(this.currentProduct.price || 0);
        if (Array.isArray(this.currentProduct.extras)) {
            this.currentProduct.extras.forEach((group, groupIdx) => {
                const selected = this.currentSelections.extras[groupIdx] || [];
                if (!Array.isArray(group.options)) return;
                group.options.forEach((opt, idx) => {
                    const id = opt.id ?? `${groupIdx}_${idx}`;
                    if (selected.includes(String(id))) {
                        total += Number(opt.priceDelta || 0);
                    }
                });
            });
        }
        const el = document.getElementById('modalTotalPrice');
        if (el) el.textContent = `‚Ç∫${total.toFixed(2)}`;
        const basePriceEl = document.getElementById('productModalPrice');
        if (basePriceEl) basePriceEl.textContent = `‚Ç∫${Number(this.currentProduct.price || 0).toFixed(2)}`;
    }

    // Cart System
    addToCart(productId) {
        const product = this.products.find(p => p.id === productId);
        if (!product) return;

        const translation = product.translations[this.currentLanguage] || product.translations['en'];
        
        const cartItem = {
            id: productId,
            name: translation.name,
            description: translation.description,
            price: product.price,
            quantity: 1,
            extras: this.currentSelections.extras || {},
            removedIngredients: Array.from(this.currentSelections.removedIngredients || new Set())
        };

        // Check if item already exists in cart
        const existingItemIndex = this.cartItems.findIndex(item => 
            item.id === productId && 
            JSON.stringify(item.extras) === JSON.stringify(cartItem.extras) &&
            JSON.stringify(item.removedIngredients) === JSON.stringify(cartItem.removedIngredients)
        );

        if (existingItemIndex > -1) {
            this.cartItems[existingItemIndex].quantity += 1;
        } else {
            this.cartItems.push(cartItem);
        }

        this.updateWhatsAppButton();
        this.showCartFeedback();
    }

    updateWhatsAppButton() {
        const whatsappBtn = document.getElementById('whatsappOrderBtn');
        const cartBadge = document.getElementById('cartBadge');
        
        if (whatsappBtn && cartBadge) {
            const totalItems = this.cartItems.reduce((total, item) => total + item.quantity, 0);
            
            // WhatsApp butonunu her zaman g√∂ster
            whatsappBtn.style.display = 'flex';
            
            if (totalItems > 0) {
                cartBadge.style.display = 'flex';
                cartBadge.textContent = totalItems;
            } else {
                cartBadge.style.display = 'none';
            }
        }
    }

    showCartFeedback() {
        // Simple feedback - you can enhance this with animations
        const btn = event.target.closest('.add-to-cart-btn');
        if (btn) {
            const originalText = btn.querySelector('span').textContent;
            btn.querySelector('span').textContent = 'Eklendi!';
            btn.style.background = 'var(--color-success)';
            
            setTimeout(() => {
                btn.querySelector('span').textContent = originalText;
                btn.style.background = '';
            }, 1500);
        }
    }

    sendWhatsAppOrder() {
        const message = 'Merhaba Yicem, sipari≈ü vermek istiyorum';
        const phoneNumber = '905412429007';
        const encodedMessage = encodeURIComponent(message);
        const whatsappUrl = `https://wa.me/${phoneNumber}?text=${encodedMessage}`;
        
        window.open(whatsappUrl, '_blank');
    }

    // PWA Service Worker Registration
    registerServiceWorker() {
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                navigator.serviceWorker.register('sw.js')
                    .then(registration => {
                        console.log('SW registered: ', registration);
                    })
                    .catch(registrationError => {
                        console.log('SW registration failed: ', registrationError);
                    });
            });
        }
    }

    // PWA Install Prompt
    setupInstallPrompt() {
        this.deferredPrompt = null;
        const installBtn = document.getElementById('installBtn');
        const heroInstallBtn = document.getElementById('heroInstallBtn');

        window.addEventListener('beforeinstallprompt', (e) => {
            // Prevent Chrome 67 and earlier from automatically showing the prompt
            e.preventDefault();
            // Stash the event so it can be triggered later
            this.deferredPrompt = e;
            // Show the install buttons
            if (installBtn) {
                installBtn.style.display = 'flex';
            }
            if (heroInstallBtn) {
                heroInstallBtn.style.display = 'flex';
            }
        });

        if (installBtn) {
            installBtn.addEventListener('click', async () => {
                if (this.deferredPrompt) {
                    // Show the install prompt
                    this.deferredPrompt.prompt();
                    // Wait for the user to respond to the prompt
                    const { outcome } = await this.deferredPrompt.userChoice;
                    console.log(`User response to the install prompt: ${outcome}`);
                    // We no longer need the prompt. Clear it up.
                    this.deferredPrompt = null;
                    // Hide the install button
                    installBtn.style.display = 'none';
                }
            });
        }

        window.addEventListener('appinstalled', (evt) => {
            console.log('PWA was installed');
            if (installBtn) {
                installBtn.style.display = 'none';
            }
            if (heroInstallBtn) {
                heroInstallBtn.style.display = 'none';
            }
        });
    }

    // Translate ingredients function
    translateIngredient(ingredient, language) {
        const translations = {
            tr: {
                'Mozzarella': 'Mozzarella',
                'Domates Sosu': 'Domates Sosu',
                'Fesleƒüen': 'Fesleƒüen',
                'Cherry Domates': 'Cherry Domates',
                'Sucuk': 'Sucuk',
                'Mantar': 'Mantar',
                'Zeytin': 'Zeytin',
                'Pepperoni': 'Pepperoni',
                'Peynir': 'Peynir',
                'Tavuk': 'Tavuk',
                'Dana Eti': 'Dana Eti',
                'Soƒüan': 'Soƒüan',
                'Biber': 'Biber',
                'Marul': 'Marul',
                'Salatalƒ±k': 'Salatalƒ±k',
                'Domates': 'Domates',
                'Ekmek': 'Ekmek',
                'Tereyaƒüƒ±': 'Tereyaƒüƒ±',
                'Tuz': 'Tuz',
                'Karabiber': 'Karabiber',
                'Sarƒ±msak': 'Sarƒ±msak',
                'Maydanoz': 'Maydanoz',
                'Nane': 'Nane',
                'Yoƒüurt': 'Yoƒüurt',
                'Pilav': 'Pilav',
                'Makarna': 'Makarna',
                'Hamur': 'Hamur',
                'Sos': 'Sos',
                'Baharat': 'Baharat',
                'Yaƒü': 'Yaƒü',
                'Yumurta': 'Yumurta',
                'S√ºt': 'S√ºt',
                'Krema': 'Krema',
                'Bal': 'Bal',
                '≈ûeker': '≈ûeker',
                'Un': 'Un',
                'Patates': 'Patates',
                'Havu√ß': 'Havu√ß',
                'Lahana': 'Lahana',
                'Ispanak': 'Ispanak',
                'Patlƒ±can': 'Patlƒ±can',
                'Kabak': 'Kabak',
                'Mƒ±sƒ±r': 'Mƒ±sƒ±r',
                'Bezelye': 'Bezelye',
                'Fasulye': 'Fasulye',
                'Mercimek': 'Mercimek',
                'Nohut': 'Nohut',
                'Ceviz': 'Ceviz',
                'Fƒ±ndƒ±k': 'Fƒ±ndƒ±k',
                'Badem': 'Badem',
                'Antep Fƒ±stƒ±ƒüƒ±': 'Antep Fƒ±stƒ±ƒüƒ±',
                'Kuru √úz√ºm': 'Kuru √úz√ºm',
                'Hurma': 'Hurma',
                'ƒ∞ncir': 'ƒ∞ncir',
                'Elma': 'Elma',
                'Muz': 'Muz',
                'Portakal': 'Portakal',
                'Limon': 'Limon',
                '√áilek': '√áilek',
                'Kiraz': 'Kiraz',
                '√úz√ºm': '√úz√ºm',
                '≈ûeftali': '≈ûeftali',
                'Armut': 'Armut',
                'Kivi': 'Kivi',
                'Ananas': 'Ananas',
                'Karpuz': 'Karpuz',
                'Kavun': 'Kavun',
                'Nar': 'Nar',
                'Avokado': 'Avokado',
                'Hindistan Cevizi': 'Hindistan Cevizi',
                'Zencefil': 'Zencefil',
                'Tar√ßƒ±n': 'Tar√ßƒ±n',
                'Vanilya': 'Vanilya',
                '√áikolata': '√áikolata',
                'Kakao': 'Kakao',
                'Kahve': 'Kahve',
                '√áay': '√áay'
            },
            en: {
                'Mozzarella': 'Mozzarella',
                'Domates Sosu': 'Tomato Sauce',
                'Fesleƒüen': 'Basil',
                'Cherry Domates': 'Cherry Tomatoes',
                'Sucuk': 'Sausage',
                'Mantar': 'Mushroom',
                'Zeytin': 'Olive',
                'Pepperoni': 'Pepperoni',
                'Peynir': 'Cheese',
                'Tavuk': 'Chicken',
                'Dana Eti': 'Beef',
                'Soƒüan': 'Onion',
                'Biber': 'Pepper',
                'Marul': 'Lettuce',
                'Salatalƒ±k': 'Cucumber',
                'Domates': 'Tomato',
                'Ekmek': 'Bread',
                'Tereyaƒüƒ±': 'Butter',
                'Tuz': 'Salt',
                'Karabiber': 'Black Pepper',
                'Sarƒ±msak': 'Garlic',
                'Maydanoz': 'Parsley',
                'Nane': 'Mint',
                'Yoƒüurt': 'Yogurt',
                'Pilav': 'Rice',
                'Makarna': 'Pasta',
                'Hamur': 'Dough',
                'Sos': 'Sauce',
                'Baharat': 'Spice',
                'Yaƒü': 'Oil',
                'Yumurta': 'Egg',
                'S√ºt': 'Milk',
                'Krema': 'Cream',
                'Bal': 'Honey',
                '≈ûeker': 'Sugar',
                'Un': 'Flour',
                'Patates': 'Potato',
                'Havu√ß': 'Carrot',
                'Lahana': 'Cabbage',
                'Ispanak': 'Spinach',
                'Patlƒ±can': 'Eggplant',
                'Kabak': 'Zucchini',
                'Mƒ±sƒ±r': 'Corn',
                'Bezelye': 'Peas',
                'Fasulye': 'Beans',
                'Mercimek': 'Lentil',
                'Nohut': 'Chickpea',
                'Ceviz': 'Walnut',
                'Fƒ±ndƒ±k': 'Hazelnut',
                'Badem': 'Almond',
                'Antep Fƒ±stƒ±ƒüƒ±': 'Pistachio',
                'Kuru √úz√ºm': 'Raisin',
                'Hurma': 'Date',
                'ƒ∞ncir': 'Fig',
                'Elma': 'Apple',
                'Muz': 'Banana',
                'Portakal': 'Orange',
                'Limon': 'Lemon',
                '√áilek': 'Strawberry',
                'Kiraz': 'Cherry',
                '√úz√ºm': 'Grape',
                '≈ûeftali': 'Peach',
                'Armut': 'Pear',
                'Kivi': 'Kiwi',
                'Ananas': 'Pineapple',
                'Karpuz': 'Watermelon',
                'Kavun': 'Melon',
                'Nar': 'Pomegranate',
                'Avokado': 'Avocado',
                'Hindistan Cevizi': 'Coconut',
                'Zencefil': 'Ginger',
                'Tar√ßƒ±n': 'Cinnamon',
                'Vanilya': 'Vanilla',
                '√áikolata': 'Chocolate',
                'Kakao': 'Cocoa',
                'Kahve': 'Coffee',
                '√áay': 'Tea'
            },
            ru: {
                'Mozzarella': '–ú–æ—Ü–∞—Ä–µ–ª–ª–∞',
                'Domates Sosu': '–¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å',
                'Fesleƒüen': '–ë–∞–∑–∏–ª–∏–∫',
                'Cherry Domates': '–ü–æ–º–∏–¥–æ—Ä—ã —á–µ—Ä—Ä–∏',
                'Sucuk': '–ö–æ–ª–±–∞—Å–∞',
                'Mantar': '–ì—Ä–∏–±—ã',
                'Zeytin': '–û–ª–∏–≤–∫–∏',
                'Pepperoni': '–ü–µ–ø–ø–µ—Ä–æ–Ω–∏',
                'Peynir': '–°—ã—Ä',
                'Tavuk': '–ö—É—Ä–∏—Ü–∞',
                'Dana Eti': '–ì–æ–≤—è–¥–∏–Ω–∞',
                'Soƒüan': '–õ—É–∫',
                'Biber': '–ü–µ—Ä–µ—Ü',
                'Marul': '–°–∞–ª–∞—Ç',
                'Salatalƒ±k': '–û–≥—É—Ä–µ—Ü',
                'Domates': '–ü–æ–º–∏–¥–æ—Ä',
                'Ekmek': '–•–ª–µ–±',
                'Tereyaƒüƒ±': '–ú–∞—Å–ª–æ',
                'Tuz': '–°–æ–ª—å',
                'Karabiber': '–ß–µ—Ä–Ω—ã–π –ø–µ—Ä–µ—Ü',
                'Sarƒ±msak': '–ß–µ—Å–Ω–æ–∫',
                'Maydanoz': '–ü–µ—Ç—Ä—É—à–∫–∞',
                'Nane': '–ú—è—Ç–∞',
                'Yoƒüurt': '–ô–æ–≥—É—Ä—Ç',
                'Pilav': '–†–∏—Å',
                'Makarna': '–ú–∞–∫–∞—Ä–æ–Ω—ã',
                'Hamur': '–¢–µ—Å—Ç–æ',
                'Sos': '–°–æ—É—Å',
                'Baharat': '–°–ø–µ—Ü–∏–∏',
                'Yaƒü': '–ú–∞—Å–ª–æ',
                'Yumurta': '–Ø–π—Ü–æ',
                'S√ºt': '–ú–æ–ª–æ–∫–æ',
                'Krema': '–°–ª–∏–≤–∫–∏',
                'Bal': '–ú–µ–¥',
                '≈ûeker': '–°–∞—Ö–∞—Ä',
                'Un': '–ú—É–∫–∞',
                'Patates': '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å',
                'Havu√ß': '–ú–æ—Ä–∫–æ–≤—å',
                'Lahana': '–ö–∞–ø—É—Å—Ç–∞',
                'Ispanak': '–®–ø–∏–Ω–∞—Ç',
                'Patlƒ±can': '–ë–∞–∫–ª–∞–∂–∞–Ω',
                'Kabak': '–ö–∞–±–∞—á–æ–∫',
                'Mƒ±sƒ±r': '–ö—É–∫—É—Ä—É–∑–∞',
                'Bezelye': '–ì–æ—Ä–æ—Ö',
                'Fasulye': '–§–∞—Å–æ–ª—å',
                'Mercimek': '–ß–µ—á–µ–≤–∏—Ü–∞',
                'Nohut': '–ù—É—Ç',
                'Ceviz': '–ì—Ä–µ—Ü–∫–∏–π –æ—Ä–µ—Ö',
                'Fƒ±ndƒ±k': '–§—É–Ω–¥—É–∫',
                'Badem': '–ú–∏–Ω–¥–∞–ª—å',
                'Antep Fƒ±stƒ±ƒüƒ±': '–§–∏—Å—Ç–∞—à–∫–∏',
                'Kuru √úz√ºm': '–ò–∑—é–º',
                'Hurma': '–§–∏–Ω–∏–∫',
                'ƒ∞ncir': '–ò–Ω–∂–∏—Ä',
                'Elma': '–Ø–±–ª–æ–∫–æ',
                'Muz': '–ë–∞–Ω–∞–Ω',
                'Portakal': '–ê–ø–µ–ª—å—Å–∏–Ω',
                'Limon': '–õ–∏–º–æ–Ω',
                '√áilek': '–ö–ª—É–±–Ω–∏–∫–∞',
                'Kiraz': '–í–∏—à–Ω—è',
                '√úz√ºm': '–í–∏–Ω–æ–≥—Ä–∞–¥',
                '≈ûeftali': '–ü–µ—Ä—Å–∏–∫',
                'Armut': '–ì—Ä—É—à–∞',
                'Kivi': '–ö–∏–≤–∏',
                'Ananas': '–ê–Ω–∞–Ω–∞—Å',
                'Karpuz': '–ê—Ä–±—É–∑',
                'Kavun': '–î—ã–Ω—è',
                'Nar': '–ì—Ä–∞–Ω–∞—Ç',
                'Avokado': '–ê–≤–æ–∫–∞–¥–æ',
                'Hindistan Cevizi': '–ö–æ–∫–æ—Å',
                'Zencefil': '–ò–º–±–∏—Ä—å',
                'Tar√ßƒ±n': '–ö–æ—Ä–∏—Ü–∞',
                'Vanilya': '–í–∞–Ω–∏–ª—å',
                '√áikolata': '–®–æ–∫–æ–ª–∞–¥',
                'Kakao': '–ö–∞–∫–∞–æ',
                'Kahve': '–ö–æ—Ñ–µ',
                '√áay': '–ß–∞–π'
            },
            de: {
                'Mozzarella': 'Mozzarella',
                'Domates Sosu': 'Tomatensauce',
                'Fesleƒüen': 'Basilikum',
                'Cherry Domates': 'Kirschtomaten',
                'Sucuk': 'Wurst',
                'Mantar': 'Pilz',
                'Zeytin': 'Olive',
                'Pepperoni': 'Pepperoni',
                'Peynir': 'K√§se',
                'Tavuk': 'H√§hnchen',
                'Dana Eti': 'Rindfleisch',
                'Soƒüan': 'Zwiebel',
                'Biber': 'Pfeffer',
                'Marul': 'Salat',
                'Salatalƒ±k': 'Gurke',
                'Domates': 'Tomate',
                'Ekmek': 'Brot',
                'Tereyaƒüƒ±': 'Butter',
                'Tuz': 'Salz',
                'Karabiber': 'Schwarzer Pfeffer',
                'Sarƒ±msak': 'Knoblauch',
                'Maydanoz': 'Petersilie',
                'Nane': 'Minze',
                'Yoƒüurt': 'Joghurt',
                'Pilav': 'Reis',
                'Makarna': 'Pasta',
                'Hamur': 'Teig',
                'Sos': 'So√üe',
                'Baharat': 'Gew√ºrz',
                'Yaƒü': '√ñl',
                'Yumurta': 'Ei',
                'S√ºt': 'Milch',
                'Krema': 'Sahne',
                'Bal': 'Honig',
                '≈ûeker': 'Zucker',
                'Un': 'Mehl',
                'Patates': 'Kartoffel',
                'Havu√ß': 'Karotte',
                'Lahana': 'Kohl',
                'Ispanak': 'Spinat',
                'Patlƒ±can': 'Aubergine',
                'Kabak': 'Zucchini',
                'Mƒ±sƒ±r': 'Mais',
                'Bezelye': 'Erbsen',
                'Fasulye': 'Bohnen',
                'Mercimek': 'Linsen',
                'Nohut': 'Kichererbsen',
                'Ceviz': 'Walnuss',
                'Fƒ±ndƒ±k': 'Haselnuss',
                'Badem': 'Mandel',
                'Antep Fƒ±stƒ±ƒüƒ±': 'Pistazie',
                'Kuru √úz√ºm': 'Rosine',
                'Hurma': 'Dattel',
                'ƒ∞ncir': 'Feige',
                'Elma': 'Apfel',
                'Muz': 'Banane',
                'Portakal': 'Orange',
                'Limon': 'Zitrone',
                '√áilek': 'Erdbeere',
                'Kiraz': 'Kirsche',
                '√úz√ºm': 'Traube',
                '≈ûeftali': 'Pfirsich',
                'Armut': 'Birne',
                'Kivi': 'Kiwi',
                'Ananas': 'Ananas',
                'Karpuz': 'Wassermelone',
                'Kavun': 'Melone',
                'Nar': 'Granatapfel',
                'Avokado': 'Avocado',
                'Hindistan Cevizi': 'Kokosnuss',
                'Zencefil': 'Ingwer',
                'Tar√ßƒ±n': 'Zimt',
                'Vanilya': 'Vanille',
                '√áikolata': 'Schokolade',
                'Kakao': 'Kakao',
                'Kahve': 'Kaffee',
                '√áay': 'Tee'
            },
            fr: {
                'Mozzarella': 'Mozzarella',
                'Domates Sosu': 'Sauce tomate',
                'Fesleƒüen': 'Basilic',
                'Cherry Domates': 'Tomates cerises',
                'Sucuk': 'Saucisse',
                'Mantar': 'Champignon',
                'Zeytin': 'Olive',
                'Pepperoni': 'Pepperoni',
                'Peynir': 'Fromage',
                'Tavuk': 'Poulet',
                'Dana Eti': 'B≈ìuf',
                'Soƒüan': 'Oignon',
                'Biber': 'Poivre',
                'Marul': 'Laitue',
                'Salatalƒ±k': 'Concombre',
                'Domates': 'Tomate',
                'Ekmek': 'Pain',
                'Tereyaƒüƒ±': 'Beurre',
                'Tuz': 'Sel',
                'Karabiber': 'Poivre noir',
                'Sarƒ±msak': 'Ail',
                'Maydanoz': 'Persil',
                'Nane': 'Menthe',
                'Yoƒüurt': 'Yaourt',
                'Pilav': 'Riz',
                'Makarna': 'P√¢tes',
                'Hamur': 'P√¢te',
                'Sos': 'Sauce',
                'Baharat': '√âpice',
                'Yaƒü': 'Huile',
                'Yumurta': '≈íuf',
                'S√ºt': 'Lait',
                'Krema': 'Cr√®me',
                'Bal': 'Miel',
                '≈ûeker': 'Sucre',
                'Un': 'Farine',
                'Patates': 'Pomme de terre',
                'Havu√ß': 'Carotte',
                'Lahana': 'Chou',
                'Ispanak': '√âpinard',
                'Patlƒ±can': 'Aubergine',
                'Kabak': 'Courgette',
                'Mƒ±sƒ±r': 'Ma√Øs',
                'Bezelye': 'Pois',
                'Fasulye': 'Haricots',
                'Mercimek': 'Lentille',
                'Nohut': 'Pois chiche',
                'Ceviz': 'Noix',
                'Fƒ±ndƒ±k': 'Noisette',
                'Badem': 'Amande',
                'Antep Fƒ±stƒ±ƒüƒ±': 'Pistache',
                'Kuru √úz√ºm': 'Raisin sec',
                'Hurma': 'Datte',
                'ƒ∞ncir': 'Figue',
                'Elma': 'Pomme',
                'Muz': 'Banane',
                'Portakal': 'Orange',
                'Limon': 'Citron',
                '√áilek': 'Fraise',
                'Kiraz': 'Cerise',
                '√úz√ºm': 'Raisin',
                '≈ûeftali': 'P√™che',
                'Armut': 'Poire',
                'Kivi': 'Kiwi',
                'Ananas': 'Ananas',
                'Karpuz': 'Past√®que',
                'Kavun': 'Melon',
                'Nar': 'Grenade',
                'Avokado': 'Avocat',
                'Hindistan Cevizi': 'Noix de coco',
                'Zencefil': 'Gingembre',
                'Tar√ßƒ±n': 'Cannelle',
                'Vanilya': 'Vanille',
                '√áikolata': 'Chocolat',
                'Kakao': 'Cacao',
                'Kahve': 'Caf√©',
                '√áay': 'Th√©'
            },
            ar: {
                'Mozzarella': 'ŸÖŸàÿ≤ÿßÿ±ŸäŸÑÿß',
                'Domates Sosu': 'ÿµŸÑÿµÿ© ÿßŸÑÿ∑ŸÖÿßÿ∑ŸÖ',
                'Fesleƒüen': 'ÿßŸÑÿ±Ÿäÿ≠ÿßŸÜ',
                'Cherry Domates': 'ÿ∑ŸÖÿßÿ∑ŸÖ ŸÉÿ±ÿ≤Ÿäÿ©',
                'Sucuk': 'ÿßŸÑŸÜŸÇÿßŸÜŸÇ',
                'Mantar': 'ÿßŸÑŸÅÿ∑ÿ±',
                'Zeytin': 'ÿßŸÑÿ≤Ÿäÿ™ŸàŸÜ',
                'Pepperoni': 'ÿ®Ÿäÿ®ÿ±ŸàŸÜŸä',
                'Peynir': 'ÿßŸÑÿ¨ÿ®ŸÜ',
                'Tavuk': 'ÿßŸÑÿØÿ¨ÿßÿ¨',
                'Dana Eti': 'ŸÑÿ≠ŸÖ ÿßŸÑÿ®ŸÇÿ±',
                'Soƒüan': 'ÿßŸÑÿ®ÿµŸÑ',
                'Biber': 'ÿßŸÑŸÅŸÑŸÅŸÑ',
                'Marul': 'ÿßŸÑÿÆÿ≥',
                'Salatalƒ±k': 'ÿßŸÑÿÆŸäÿßÿ±',
                'Domates': 'ÿßŸÑÿ∑ŸÖÿßÿ∑ŸÖ',
                'Ekmek': 'ÿßŸÑÿÆÿ®ÿ≤',
                'Tereyaƒüƒ±': 'ÿßŸÑÿ≤ÿ®ÿØÿ©',
                'Tuz': 'ÿßŸÑŸÖŸÑÿ≠',
                'Karabiber': 'ÿßŸÑŸÅŸÑŸÅŸÑ ÿßŸÑÿ£ÿ≥ŸàÿØ',
                'Sarƒ±msak': 'ÿßŸÑÿ´ŸàŸÖ',
                'Maydanoz': 'ÿßŸÑÿ®ŸÇÿØŸàŸÜÿ≥',
                'Nane': 'ÿßŸÑŸÜÿπŸÜÿßÿπ',
                'Yoƒüurt': 'ÿßŸÑÿ≤ÿ®ÿßÿØŸä',
                'Pilav': 'ÿßŸÑÿ£ÿ±ÿ≤',
                'Makarna': 'ÿßŸÑŸÖÿπŸÉÿ±ŸàŸÜÿ©',
                'Hamur': 'ÿßŸÑÿπÿ¨ŸäŸÜ',
                'Sos': 'ÿßŸÑÿµŸÑÿµÿ©',
                'Baharat': 'ÿßŸÑÿ™Ÿàÿßÿ®ŸÑ',
                'Yaƒü': 'ÿßŸÑÿ≤Ÿäÿ™',
                'Yumurta': 'ÿßŸÑÿ®Ÿäÿ∂',
                'S√ºt': 'ÿßŸÑÿ≠ŸÑŸäÿ®',
                'Krema': 'ÿßŸÑŸÉÿ±ŸäŸÖÿ©',
                'Bal': 'ÿßŸÑÿπÿ≥ŸÑ',
                '≈ûeker': 'ÿßŸÑÿ≥ŸÉÿ±',
                'Un': 'ÿßŸÑÿØŸÇŸäŸÇ',
                'Patates': 'ÿßŸÑÿ®ÿ∑ÿßÿ∑ÿ≥',
                'Havu√ß': 'ÿßŸÑÿ¨ÿ≤ÿ±',
                'Lahana': 'ÿßŸÑŸÖŸÑŸÅŸàŸÅ',
                'Ispanak': 'ÿßŸÑÿ≥ÿ®ÿßŸÜÿÆ',
                'Patlƒ±can': 'ÿßŸÑÿ®ÿßÿ∞ŸÜÿ¨ÿßŸÜ',
                'Kabak': 'ÿßŸÑŸÉŸàÿ≥ÿ©',
                'Mƒ±sƒ±r': 'ÿßŸÑÿ∞ÿ±ÿ©',
                'Bezelye': 'ÿßŸÑÿ®ÿßÿ≤ŸÑÿßÿ°',
                'Fasulye': 'ÿßŸÑŸÅÿßÿµŸàŸÑŸäÿß',
                'Mercimek': 'ÿßŸÑÿπÿØÿ≥',
                'Nohut': 'ÿßŸÑÿ≠ŸÖÿµ',
                'Ceviz': 'ÿßŸÑÿ¨Ÿàÿ≤',
                'Fƒ±ndƒ±k': 'ÿßŸÑÿ®ŸÜÿØŸÇ',
                'Badem': 'ÿßŸÑŸÑŸàÿ≤',
                'Antep Fƒ±stƒ±ƒüƒ±': 'ÿßŸÑŸÅÿ≥ÿ™ŸÇ',
                'Kuru √úz√ºm': 'ÿßŸÑÿ≤ÿ®Ÿäÿ®',
                'Hurma': 'ÿßŸÑÿ™ŸÖÿ±',
                'ƒ∞ncir': 'ÿßŸÑÿ™ŸäŸÜ',
                'Elma': 'ÿßŸÑÿ™ŸÅÿßÿ≠',
                'Muz': 'ÿßŸÑŸÖŸàÿ≤',
                'Portakal': 'ÿßŸÑÿ®ÿ±ÿ™ŸÇÿßŸÑ',
                'Limon': 'ÿßŸÑŸÑŸäŸÖŸàŸÜ',
                '√áilek': 'ÿßŸÑŸÅÿ±ÿßŸàŸÑÿ©',
                'Kiraz': 'ÿßŸÑŸÉÿ±ÿ≤',
                '√úz√ºm': 'ÿßŸÑÿπŸÜÿ®',
                '≈ûeftali': 'ÿßŸÑÿÆŸàÿÆ',
                'Armut': 'ÿßŸÑŸÉŸÖÿ´ÿ±Ÿâ',
                'Kivi': 'ÿßŸÑŸÉŸäŸàŸä',
                'Ananas': 'ÿßŸÑÿ£ŸÜÿßŸÜÿßÿ≥',
                'Karpuz': 'ÿßŸÑÿ®ÿ∑ŸäÿÆ',
                'Kavun': 'ÿßŸÑÿ¥ŸÖÿßŸÖ',
                'Nar': 'ÿßŸÑÿ±ŸÖÿßŸÜ',
                'Avokado': 'ÿßŸÑÿ£ŸÅŸàŸÉÿßÿØŸà',
                'Hindistan Cevizi': 'ÿ¨Ÿàÿ≤ ÿßŸÑŸáŸÜÿØ',
                'Zencefil': 'ÿßŸÑÿ≤ŸÜÿ¨ÿ®ŸäŸÑ',
                'Tar√ßƒ±n': 'ÿßŸÑŸÇÿ±ŸÅÿ©',
                'Vanilya': 'ÿßŸÑŸÅÿßŸÜŸäŸÑŸäÿß',
                '√áikolata': 'ÿßŸÑÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ©',
                'Kakao': 'ÿßŸÑŸÉÿßŸÉÿßŸà',
                'Kahve': 'ÿßŸÑŸÇŸáŸàÿ©',
                '√áay': 'ÿßŸÑÿ¥ÿßŸä'
            }
        };

        return translations[language]?.[ingredient] || ingredient;
    }

    // Utility methods
    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    throttle(func, limit) {
        let inThrottle;
        return function() {
            const args = arguments;
            const context = this;
            if (!inThrottle) {
                func.apply(context, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        };
    }
}

// Add CSS animations
const style = document.createElement('style');
style.textContent = `
    @keyframes slideInRight {
        from {
            opacity: 0;
            transform: translateX(100%);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }
    
    @keyframes slideOutRight {
        from {
            opacity: 1;
            transform: translateX(0);
        }
        to {
            opacity: 0;
            transform: translateX(100%);
        }
    }
    
    .no-products {
        grid-column: 1 / -1;
        text-align: center;
        padding: var(--spacing-xxl);
        color: var(--color-text-secondary);
        font-size: var(--font-size-lg);
    }
`;
document.head.appendChild(style);

// Initialize the app when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    window.restaurantApp = new RestaurantApp();
});

// Service Worker registration for PWA capabilities
if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        navigator.serviceWorker.register('sw.js')
            .then(registration => {
                console.log('SW registered: ', registration);
            })
            .catch(registrationError => {
                console.log('SW registration failed: ', registrationError);
            });
    });
}
